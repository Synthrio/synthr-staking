{
  "address": "0xEF567aa7C61c69761fDc50c38b56797D4dA79d8f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_SYNTH",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_synthrStaking",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pendingRewardAmount",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "pool",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "rewardPerBlock",
          "type": "uint256[]"
        }
      ],
      "name": "EpochUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "IncreaseDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "pool",
          "type": "address[]"
        }
      ],
      "name": "LogPoolAddition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "lastRewardBlock",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accRewardPerShare",
          "type": "uint256"
        }
      ],
      "name": "LogUpdatePool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeAmount",
          "type": "uint256"
        }
      ],
      "name": "LogUpdatedStakeAmount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pendingRewardAmount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawAndClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pendingRewardAmount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawPendingRewardAmount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalLockAmount",
          "type": "uint256"
        }
      ],
      "name": "totalLockAmountUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACC_REWARD_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SYNTH",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_pool",
          "type": "address[]"
        }
      ],
      "name": "addPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "increaseDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pending_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_blockNumber",
          "type": "uint256"
        }
      ],
      "name": "pendingRewardAtBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pending_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "bool",
          "name": "exist",
          "type": "bool"
        },
        {
          "internalType": "uint64",
          "name": "lastRewardBlock",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "accRewardPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardPerBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "secondPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_secondPerBlock",
          "type": "uint256"
        }
      ],
      "name": "setSecondPerBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakeAmount",
          "type": "uint256"
        }
      ],
      "name": "setStakeAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_totalLockAmount",
          "type": "uint256"
        }
      ],
      "name": "setTotalLockAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "synthrStaking",
      "outputs": [
        {
          "internalType": "contract ISynthrStaking",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLockAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rewardAmount",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_pool",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_rewardPerBlock",
          "type": "uint256[]"
        }
      ],
      "name": "updateEpoch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "updatePool",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "exist",
              "type": "bool"
            },
            {
              "internalType": "uint64",
              "name": "lastRewardBlock",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "accRewardPerShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardPerBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "epoch",
              "type": "uint256"
            }
          ],
          "internalType": "struct NftStaking.NFTPoolInfo",
          "name": "_poolInfo",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "rewardDebt",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "userRewardsDebt",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "withdrawAndClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xed56699d2c0331b3d5f1a17d3e885349fdecc8a63e7c1338d14adff78e945283",
  "receipt": {
    "to": null,
    "from": "0xD2344ce2CFEaD1cBE24e33E8301411d62946A1d2",
    "contractAddress": "0xEF567aa7C61c69761fDc50c38b56797D4dA79d8f",
    "transactionIndex": 1,
    "gasUsed": "1746637",
    "logsBloom": "0x
    "blockHash": "0x7f2ac5ca1601b4fcfd0cdf4a8451fb21b9b3a21431cbc45c20c150aedc903313",
    "transactionHash": "0xed56699d2c0331b3d5f1a17d3e885349fdecc8a63e7c1338d14adff78e945283",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 37297384,
        "transactionHash": "0xed56699d2c0331b3d5f1a17d3e885349fdecc8a63e7c1338d14adff78e945283",
        "address": "0xEF567aa7C61c69761fDc50c38b56797D4dA79d8f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d2344ce2cfead1cbe24e33e8301411d62946a1d2"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x7f2ac5ca1601b4fcfd0cdf4a8451fb21b9b3a21431cbc45c20c150aedc903313"
      }
    ],
    "blockNumber": 37297384,
    "cumulativeGasUsed": "1746637",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD2344ce2CFEaD1cBE24e33E8301411d62946A1d2",
    "0x1D2c289687a5c7f6a16Ac7801D73563B7f8d7bEe",
    "0x925089eB5cB7915F88AC10df84fBF43f39B63aB2"
  ],
  "numDeployments": 4,
  "solcInputHash": "ee2ef732c0c1907d63b25b76f46aa997",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_SYNTH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_synthrStaking\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pendingRewardAmount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"pool\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"rewardPerBlock\",\"type\":\"uint256[]\"}],\"name\":\"EpochUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"IncreaseDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"pool\",\"type\":\"address[]\"}],\"name\":\"LogPoolAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"lastRewardBlock\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"}],\"name\":\"LogUpdatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"}],\"name\":\"LogUpdatedStakeAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pendingRewardAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawAndClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pendingRewardAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawPendingRewardAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalLockAmount\",\"type\":\"uint256\"}],\"name\":\"totalLockAmountUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACC_REWARD_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SYNTH\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pool\",\"type\":\"address[]\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"increaseDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pending_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"pendingRewardAtBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pending_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exist\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"lastRewardBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_secondPerBlock\",\"type\":\"uint256\"}],\"name\":\"setSecondPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeAmount\",\"type\":\"uint256\"}],\"name\":\"setStakeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalLockAmount\",\"type\":\"uint256\"}],\"name\":\"setTotalLockAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"synthrStaking\",\"outputs\":[{\"internalType\":\"contract ISynthrStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLockAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_pool\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256[]\"}],\"name\":\"updateEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"updatePool\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"exist\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"lastRewardBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"internalType\":\"struct NftStaking.NFTPoolInfo\",\"name\":\"_poolInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"rewardDebt\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userRewardsDebt\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawAndClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"claim(address,address)\":{\"params\":{\"_pool\":\"The address of the pool. See `NFTPoolInfo`.\",\"_to\":\"Receiver rewards.\"}},\"deposit(address,uint256)\":{\"params\":{\"_pool\":\"The address of the pool. See `NFTPoolInfo`.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingReward(address,address)\":{\"params\":{\"_pool\":\"The address of the pool. See `poolInfo`.\",\"_user\":\"Address of user.\"},\"returns\":{\"pending_\":\"reward for a given user.\"}},\"pendingRewardAtBlock(address,address,uint256)\":{\"params\":{\"_pool\":\"The address of the pool. See `poolInfo`.\",\"_user\":\"Address of user.\"},\"returns\":{\"pending_\":\"reward for a given user.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateEpoch(address,uint256,address[],uint256[])\":{\"params\":{\"_pool\":\"addresses of pool to be updated.\",\"_rewardPerBlock\":\"array of rewardPerBlock\"}},\"updatePool(address)\":{\"params\":{\"_pool\":\"The address of the pool. See `NFTPoolInfo`.\"},\"returns\":{\"_poolInfo\":\"Returns the pool that was updated.\"}},\"userRewardsDebt(address,address)\":{\"details\":\"retuen user reward debt\",\"params\":{\"_pool\":\"address of pool\",\"_user\":\"address of user\"}},\"withdrawAndClaim(address,address)\":{\"params\":{\"_pool\":\"address of the pool. See `NFTPoolInfo`.\",\"_to\":\"Receiver of the LP tokens and syUSD rewards.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"SYNTH()\":{\"notice\":\"Address of reward token contract.\"},\"addPool(address[])\":{\"notice\":\"Add a new NFT pool. Can only be called by the owner.\"},\"claim(address,address)\":{\"notice\":\"Claim proceeds for transaction sender to `to`.\"},\"deposit(address,uint256)\":{\"notice\":\"Deposit NFT token.\"},\"pendingReward(address,address)\":{\"notice\":\"View function to see pending reward of user in pool at current block.\"},\"pendingRewardAtBlock(address,address,uint256)\":{\"notice\":\"View function to see pending reward of user in pool at future block.\"},\"poolInfo(address)\":{\"notice\":\"Info of each pool.\"},\"setTotalLockAmount(uint256)\":{\"notice\":\"set total locked token for lpSupply\"},\"synthrStaking()\":{\"notice\":\"synthr staking instance\"},\"totalLockAmount()\":{\"notice\":\"Total lock amount of users in VotingEscrow\"},\"updateEpoch(address,uint256,address[],uint256[])\":{\"notice\":\"update epoch of pool\"},\"updatePool(address)\":{\"notice\":\"Update reward variables of the given pool.\"},\"userInfo(address,address)\":{\"notice\":\"Info of each user that stakes LP tokens.\"},\"withdrawAndClaim(address,address)\":{\"notice\":\"Withdraw NFT token from pool and claim proceeds for transaction sender to `to`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFT-Staking/NftStaking.sol\":\"NftStaking\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/NFT-Staking/NftStaking.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"../interfaces/ISynthrNFT.sol\\\";\\nimport \\\"../interfaces/ISynthrStaking.sol\\\";\\n\\ncontract NftStaking is IERC721Receiver, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Address of reward token contract.\\n    IERC20 public immutable SYNTH;\\n\\n    uint256 public constant ACC_REWARD_PRECISION = 1e18;\\n\\n    /// @notice Info of each gauge controller user.\\n    /// `amount` LP token amount the user has provided.\\n    /// `rewardDebt` The amount of reward token entitled to the user.\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 tokenId;\\n        int256 rewardDebt;\\n    }\\n\\n    /// @notice Info of each gauge pool.\\n    struct NFTPoolInfo {\\n        bool exist;\\n        uint64 lastRewardBlock;\\n        uint256 accRewardPerShare;\\n        uint256 rewardPerBlock;\\n        uint256 epoch;\\n    }\\n\\n    uint256 public stakeAmount = 1000 * 1e18;\\n    uint256 public secondPerBlock = 12;\\n\\n    /// @notice Total lock amount of users in VotingEscrow\\n    uint256 public totalLockAmount;\\n\\n    /// @notice synthr staking instance\\n    ISynthrStaking public synthrStaking;\\n\\n    /// @notice Info of each pool.\\n    mapping(address => NFTPoolInfo) public poolInfo;\\n\\n    /// @notice Info of each user that stakes LP tokens.\\n    mapping(address => mapping(address => UserInfo)) public userInfo;\\n\\n    event Deposit(address indexed pool, address indexed user, uint256 tokenId);\\n    event IncreaseDeposit(address indexed pool, address indexed user, uint256 amount);\\n    event Withdraw(address indexed pool, address indexed user, uint256 tokenId);\\n    event Claimed(\\n        address indexed pool,\\n        address indexed user,\\n        uint256 pendingRewardAmount\\n    );\\n    event WithdrawAndClaim(\\n        address indexed pool,\\n        address indexed user,\\n        uint256 pendingRewardAmount\\n    );\\n    event WithdrawPendingRewardAmount(\\n        address indexed pool,\\n        address indexed user,\\n        uint256 pendingRewardAmount\\n    );\\n    event LogPoolAddition(address indexed owner, address[] pool);\\n    event LogUpdatePool(\\n        address indexed pool,\\n        uint64 lastRewardBlock,\\n        uint256 accRewardPerShare\\n    );\\n    event EpochUpdated(\\n        address indexed owner,\\n        address[] pool,\\n        uint256[] rewardPerBlock\\n    );\\n    event totalLockAmountUpdated(address owner, uint256 totalLockAmount);\\n    event LogUpdatedStakeAmount(address owner, uint256 stakeAmount);\\n\\n    constructor(address _admin, address _SYNTH, address _synthrStaking) Ownable(_admin) {\\n        SYNTH = IERC20(_SYNTH);\\n        synthrStaking = ISynthrStaking(_synthrStaking);\\n    }\\n\\n    /// @dev retuen user reward debt\\n    /// @param _pool address of pool\\n    /// @param _user address of user\\n    function userRewardsDebt(\\n        address _pool,\\n        address _user\\n    ) external view returns (int256) {\\n        return userInfo[_pool][_user].rewardDebt;\\n    }\\n\\n    /// @notice View function to see pending reward of user in pool at current block.\\n    /// @param _pool The address of the pool. See `poolInfo`.\\n    /// @param _user Address of user.\\n    /// @return pending_ reward for a given user.\\n    function pendingReward(\\n        address _pool,\\n        address _user\\n    ) external view returns (uint256 pending_) {\\n        pending_ = _pendingRewardAmount(_pool, _user, block.number);\\n    }\\n\\n    /// @notice View function to see pending reward of user in pool at future block.\\n    /// @param _pool The address of the pool. See `poolInfo`.\\n    /// @param _user Address of user.\\n    /// @return pending_ reward for a given user.\\n    function pendingRewardAtBlock(\\n        address _pool,\\n        address _user,\\n        uint256 _blockNumber\\n    ) external view returns (uint256 pending_) {\\n        pending_ = _pendingRewardAmount(_pool, _user, _blockNumber);\\n    }\\n\\n    /// @notice set total locked token for lpSupply\\n    function setTotalLockAmount(\\n        uint256 _totalLockAmount\\n    ) external onlyOwner {\\n        totalLockAmount = _totalLockAmount;\\n\\n        emit totalLockAmountUpdated(msg.sender, totalLockAmount);\\n    }\\n\\n    function setSecondPerBlock(\\n        uint256 _secondPerBlock\\n    ) external onlyOwner {\\n        secondPerBlock = _secondPerBlock;\\n\\n        emit totalLockAmountUpdated(msg.sender, totalLockAmount);\\n    }\\n\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    function setStakeAmount(uint256 _stakeAmount) external onlyOwner {\\n        stakeAmount = _stakeAmount;\\n        emit LogUpdatedStakeAmount(msg.sender, stakeAmount);\\n    }\\n\\n    /// @notice Add a new NFT pool. Can only be called by the owner.\\n    function addPool(\\n        address[] memory _pool\\n    ) external onlyOwner {\\n        for (uint256 i; i < _pool.length; ++i) {\\n            poolInfo[_pool[i]].exist = true;\\n            poolInfo[_pool[i]].lastRewardBlock = uint64(block.number);\\n        }\\n\\n        emit LogPoolAddition(msg.sender, _pool);\\n    }\\n\\n    /// @notice update epoch of pool\\n    /// @param _pool addresses of pool to be updated.\\n    /// @param _rewardPerBlock array of rewardPerBlock\\n    function updateEpoch(\\n        address _user,\\n        uint256 _rewardAmount,\\n        address[] memory _pool,\\n        uint256[] memory _rewardPerBlock\\n    ) external onlyOwner {\\n        require(\\n            _rewardPerBlock.length == _pool.length,\\n            \\\"NftStaking: length of array doesn't mach\\\"\\n        );\\n\\n        for (uint256 i; i < _pool.length; ++i) {\\n            NFTPoolInfo memory _poolInfo = poolInfo[_pool[i]];\\n            require(_poolInfo.exist, \\\"NftStaking: pool not exist\\\");\\n            _poolInfo.rewardPerBlock = _rewardPerBlock[i];\\n            _poolInfo.lastRewardBlock = uint64(block.number);\\n            ++_poolInfo.epoch;\\n            poolInfo[_pool[i]] = _poolInfo;\\n        }\\n\\n        SYNTH.safeTransferFrom(_user, address(this), _rewardAmount);\\n\\n        emit EpochUpdated(msg.sender, _pool, _rewardPerBlock);\\n    }\\n\\n    /// @notice Update reward variables of the given pool.\\n    /// @param _pool The address of the pool. See `NFTPoolInfo`.\\n    /// @return _poolInfo Returns the pool that was updated.\\n    function updatePool(\\n        address _pool\\n    ) public returns (NFTPoolInfo memory _poolInfo) {\\n        _poolInfo = poolInfo[_pool];\\n        require(_poolInfo.exist, \\\"NftStaking: pool not exist\\\");\\n        uint256 _lpSupply = totalLockAmount;\\n        if (block.number > _poolInfo.lastRewardBlock) {\\n            if (_lpSupply > 0) {\\n                uint256 _blocks = block.number - _poolInfo.lastRewardBlock;\\n                uint256 _rewardAmount = (_blocks * _poolInfo.rewardPerBlock);\\n                _poolInfo.accRewardPerShare += _calAccPerShare(\\n                    _rewardAmount,\\n                    _lpSupply\\n                );\\n            }\\n            _poolInfo.lastRewardBlock = uint64(block.number);\\n            poolInfo[_pool] = _poolInfo;\\n            emit LogUpdatePool(\\n                _pool,\\n                _poolInfo.lastRewardBlock,\\n                _poolInfo.accRewardPerShare\\n            );\\n        }\\n    }\\n\\n    /// @notice Deposit NFT token.\\n    /// @param _pool The address of the pool. See `NFTPoolInfo`.\\n    function deposit(address _pool, uint256 _tokenId) external {\\n        uint256 _amount = _checkStakeAmountAndLockEnd();\\n\\n        UserInfo memory _user = userInfo[_pool][msg.sender];\\n        require(_user.tokenId == 0, \\\"NftStaking: already exist\\\");\\n\\n        NFTPoolInfo memory _poolInfo = updatePool(_pool);\\n\\n        // Effects\\n        int256 _calRewardDebt = _calAccRewardPerShare(\\n            _poolInfo.accRewardPerShare,\\n            _amount\\n        );\\n\\n        _user.amount = _amount;\\n        _user.rewardDebt += _calRewardDebt;\\n        _user.tokenId = _tokenId;\\n\\n        userInfo[_pool][msg.sender] = _user;\\n\\n        ISynthrNFT(_pool).safeTransferFrom(msg.sender, address(this), _tokenId);\\n\\n        emit Deposit(_pool, msg.sender, _tokenId);\\n    }\\n\\n    function increaseDeposit(address _pool) external {\\n        uint256 _amount = _checkStakeAmountAndLockEnd();\\n\\n        UserInfo memory _user = userInfo[_pool][msg.sender];\\n        require(_user.tokenId != 0, \\\"NftStaking: token not deposit\\\");\\n\\n        NFTPoolInfo memory _poolInfo = updatePool(_pool);\\n\\n        uint256 _updatedAmount = _amount - _user.amount;\\n\\n        // Effects\\n        int256 _calRewardDebt = _calAccRewardPerShare(\\n            _poolInfo.accRewardPerShare,\\n            _updatedAmount\\n        );\\n\\n        _user.amount = _amount;\\n        _user.rewardDebt += _calRewardDebt;\\n\\n        userInfo[_pool][msg.sender] = _user;\\n\\n        emit IncreaseDeposit(_pool, msg.sender, _updatedAmount);\\n    }\\n\\n    function withdraw(address _pool) external {\\n        NFTPoolInfo memory _poolInfo = updatePool(_pool);\\n        UserInfo memory _user = userInfo[_pool][msg.sender];\\n\\n        int256 _calRewardDebt = _calAccRewardPerShare(\\n            _poolInfo.accRewardPerShare,\\n            _user.amount\\n        );\\n\\n        uint256 _tokenId = _user.tokenId;\\n\\n        _user.amount = 0;\\n        _user.rewardDebt -= _calRewardDebt;\\n        _user.tokenId = 0;\\n\\n        userInfo[_pool][msg.sender] = _user;\\n\\n        // Interactions\\n        ISynthrNFT(_pool).transferFrom(\\n            address(this),\\n            msg.sender,\\n            _tokenId\\n        );\\n\\n        emit Withdraw(_pool, msg.sender, _tokenId);\\n    }\\n\\n    /// @notice Claim proceeds for transaction sender to `to`.\\n    /// @param _pool The address of the pool. See `NFTPoolInfo`.\\n    /// @param _to Receiver rewards.\\n    function claim(address _pool, address _to) external {\\n        NFTPoolInfo memory _poolInfo = updatePool(_pool);\\n        UserInfo memory _user = userInfo[_pool][msg.sender];\\n\\n        (\\n            int256 accumulatedReward,\\n            uint256 _pendingReward\\n        ) = _calAccumaltedAndPendingReward(\\n                _poolInfo.accRewardPerShare,\\n                _user.amount,\\n                _user.rewardDebt\\n            );\\n\\n        _pendingReward = _pendingRewardDeduction(msg.sender, _user.amount, _poolInfo.rewardPerBlock, _pendingReward, block.timestamp);\\n\\n        // Effects\\n        _user.rewardDebt = accumulatedReward;\\n        userInfo[_pool][msg.sender] = _user;\\n\\n        // Interactions\\n        if (_pendingReward != 0) {\\n            SYNTH.safeTransfer(_to, _pendingReward);\\n        }\\n\\n        emit Claimed(msg.sender, _pool, _pendingReward);\\n    }\\n\\n    /// @notice Withdraw NFT token from pool and claim proceeds for transaction sender to `to`.\\n    /// @param _pool address of the pool. See `NFTPoolInfo`.\\n    /// @param _to Receiver of the LP tokens and syUSD rewards.\\n    function withdrawAndClaim(address _pool, address _to) external {\\n        NFTPoolInfo memory _poolInfo = updatePool(_pool);\\n        UserInfo memory _user = userInfo[_pool][msg.sender];\\n\\n        (\\n            ,\\n            uint256 _pendingReward\\n        ) = _calAccumaltedAndPendingReward(\\n                _poolInfo.accRewardPerShare,\\n                _user.amount,\\n                _user.rewardDebt\\n            );\\n\\n        _pendingReward = _pendingRewardDeduction(msg.sender, _user.amount, _poolInfo.rewardPerBlock, _pendingReward, block.timestamp);\\n\\n        // Effects\\n        uint256 _tokenId = _user.tokenId;\\n        delete userInfo[_pool][msg.sender];\\n\\n        // Interactions\\n        if (_pendingReward != 0) {\\n            SYNTH.safeTransfer(_to, _pendingReward);\\n        }\\n\\n        ISynthrNFT(_pool).transferFrom(\\n            address(this),\\n            msg.sender,\\n            _tokenId\\n        );\\n\\n        emit WithdrawAndClaim(_pool, msg.sender, _pendingReward);\\n    }\\n\\n    function _pendingRewardAmount(\\n        address _pool,\\n        address _user,\\n        uint256 _blockNumber\\n    ) internal view returns (uint256 _pending) {\\n        uint256 _lpSupply = totalLockAmount;\\n        NFTPoolInfo memory _poolInfo = poolInfo[_pool];\\n        UserInfo memory _userInfo = userInfo[_pool][_user];\\n        uint256 _accRewardPerShare = _poolInfo.accRewardPerShare;\\n        if (_blockNumber > _poolInfo.lastRewardBlock && _lpSupply != 0) {\\n            uint256 _blocks = _blockNumber - (_poolInfo.lastRewardBlock);\\n            uint256 _rewardAmount = (_blocks * _poolInfo.rewardPerBlock);\\n            _accRewardPerShare += (_calAccPerShare(_rewardAmount, _lpSupply));\\n        }\\n        _pending = uint256(\\n            _calAccRewardPerShare(_accRewardPerShare, _userInfo.amount) -\\n                _userInfo.rewardDebt\\n        );\\n\\n        uint256 _blockTime = _blockNumber * secondPerBlock;\\n\\n        _pending = _pendingRewardDeduction(_user, _userInfo.amount, _poolInfo.rewardPerBlock, _pending, _blockTime);\\n    }\\n\\n    function _calAccPerShare(\\n        uint256 _rewardAmount,\\n        uint256 _lpSupply\\n    ) internal pure returns (uint256) {\\n        return (_rewardAmount * ACC_REWARD_PRECISION) / _lpSupply;\\n    }\\n\\n    function _calAccRewardPerShare(\\n        uint256 _accRewardPerShare,\\n        uint256 _amount\\n    ) internal pure returns (int256) {\\n        return int256((_amount * _accRewardPerShare) / ACC_REWARD_PRECISION);\\n    }\\n\\n    function _calAccumaltedAndPendingReward(\\n        uint256 _accRewardPerShare,\\n        uint256 _amount,\\n        int256 _rewardDebt\\n    )\\n        internal\\n        pure\\n        returns (int256 _accumulatedReward, uint256 _pendingReward)\\n    {\\n        _accumulatedReward = _calAccRewardPerShare(_accRewardPerShare, _amount);\\n        _pendingReward = uint256(_accumulatedReward - (_rewardDebt));\\n    }\\n\\n    function _checkStakeAmountAndLockEnd() internal view returns(uint256) {\\n        ISynthrStaking.UserInfo memory _userInfo = synthrStaking.userInfo(msg.sender);\\n        require(_userInfo.amount >= stakeAmount, \\\"NftStaking: low amount staked\\\");\\n        require(_userInfo.unlockEnd > block.timestamp, \\\"NftStaking: lock time expired\\\");\\n\\n        return _userInfo.amount;\\n    }\\n\\n    function _calculateExcessReward(address _user, uint256 _amount, uint256 _rewardPerBlock, uint256 _currentTime) internal view returns(uint256 _excessReward) {\\n        uint256 _lockEndTime = (synthrStaking.userInfo(_user)).unlockEnd;\\n        if (_currentTime > _lockEndTime) {\\n            uint256 _rewardAmount = ((_currentTime - _lockEndTime) / secondPerBlock) * _rewardPerBlock;\\n            uint256 _accPerShare = _calAccPerShare(_rewardAmount, totalLockAmount); \\n            _excessReward = uint256(_calAccRewardPerShare(_accPerShare, _amount));\\n        }\\n    }\\n\\n    function _pendingRewardDeduction(address _user, uint256 _amount, uint256 _rewardPerBlock, uint256 _pendingReward, uint256 _currentTime) internal view returns(uint256) {\\n        uint256 _excessReward = _calculateExcessReward(_user, _amount, _rewardPerBlock, _currentTime);\\n        if (_pendingReward < _excessReward) {\\n            _pendingReward = 0;\\n        } else {\\n            _pendingReward -= _excessReward;\\n        }\\n\\n        return _pendingReward;\\n    }\\n}\\n\",\"keccak256\":\"0x8d593b5be1c7d2bffe46c76c4648383a803e1df7b038aa5bbef943bdbb8b6f34\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISynthrNFT.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.24;\\n\\ninterface ISynthrNFT {\\n\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n    function safeMint(address to, uint256 lpAmount) external returns (uint256);\\n    function safeMintBatch(address[] calldata _to, uint256[] calldata _lpAmount) external;\\n}\\n\",\"keccak256\":\"0x85ac8740d3b80310bb01250e84d959aed1b5efea0b1e1461a737306cb770408f\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISynthrStaking.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.24;\\n\\ninterface ISynthrStaking {\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 lockType;\\n        uint256 unlockEnd;\\n        int256 rewardDebt;\\n    }\\n\\n    function userInfo(address user) external view returns(UserInfo memory);\\n}\",\"keccak256\":\"0xc45fabe7f45110b1525653c3cfc49702917d09a8f2e2a33b3b45aefdcfa9d4de\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a0346200012257601f62001e4a38819003918201601f19168301916001600160401b03831184841017620001275780849260609460405283398101031262000122576200004d816200013d565b62000069604062000061602085016200013d565b93016200013d565b6001600160a01b03918216919082156200010957816000549460018060a01b03199480868816176000558260405197167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3683635c9adc5dea00000600155600c6002551660805216906004541617600455611cf7908162000153823960805181818161027e0152818161068c01528181610f2a01526111a20152f35b604051631e4fbdf760e01b815260006004820152602490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620001225756fe608080604052600436101561001357600080fd5b600090813560e01c9081630f208beb1461125057508063150b7a02146111cd57806321c0b342146110925780632287b18014610f555780633e434e5d14610da55780633f1a7b5614610d4757806343808c5014610ce957806347e7ef2414610b3757806351cff8d9146109e957806360c7dc47146109cb5780636e7b2c26146108d0578063715018a61461085e5780637b46c54f146107fd5780638a7023f2146107aa5780638a747bf3146104275780638da5cb5b146104015780638fcdfafe146103da578063976df6bb146103aa5780639a7b5f11146103375780639ced7e7614610301578063a111bab9146102e3578063c467d559146102c5578063d1c6a231146102a2578063e1eddde31461025e578063f2fde38b146101a55763f71b22b81461013f57600080fd5b346101a25760206003193601126101a2577f5ed6e55c430fc2a42200c2d6f80a56a038dbf3ca778a54686acf00ac42f2e1a661019c60043561017f6119a6565b600381905560408051338152602081019290925290918291820190565b0390a180f35b80fd5b50346101a25760206003193601126101a2576101bf6112b2565b6101c76119a6565b6001600160a01b0380911690811561022d57600054827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b602483604051907f1e4fbdf70000000000000000000000000000000000000000000000000000000082526004820152fd5b50346101a257806003193601126101a25760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346101a257806003193601126101a2576020604051670de0b6b3a76400008152f35b50346101a257806003193601126101a2576020600254604051908152f35b50346101a257806003193601126101a2576020600354604051908152f35b50346101a25760406003193601126101a257602061032f6103206112b2565b6103286112cd565b4391611a0e565b604051908152f35b50346101a25760206003193601126101a257604060a0916001600160a01b0361035e6112b2565b168152600560205220805490600181015490600360028201549101549167ffffffffffffffff6040519460ff81161515865260081c166020850152604084015260608301526080820152f35b50346101a25760606003193601126101a257602061032f6103c96112b2565b6103d16112cd565b60443591611a0e565b50346101a257806003193601126101a25760206001600160a01b0360045416604051908152f35b50346101a257806003193601126101a2576001600160a01b036020915416604051908152f35b50346101a25760806003193601126101a2576104416112b2565b60443567ffffffffffffffff81116107a657610461903690600401611380565b6064359067ffffffffffffffff82116107a257366023830112156107a257816004013561048d81611368565b9261049b6040519485611345565b818452602084016024819360051b8301019136831161079e57602401905b82821061078e575050506104cb6119a6565b825182510361072457845b825181101561063e576001600160a01b036104f18285611448565b5116865260056020526040862061054f6040519161050e83611329565b600381549167ffffffffffffffff60ff841615159384875260081c1660208601526001810154604086015260028101546060860152015460808401526114af565b6105598286611448565b51606082015267ffffffffffffffff4316602082015260808101517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461062a579060018093920160808201526001600160a01b036105b98387611448565b5116885260056020526003608060408a20926105e581511515859060ff60ff1983541691151516179055565b6020810151845468ffffffffffffffff00191660089190911b68ffffffffffffffff0016178455604081015186850155606081015160028501550151910155016104d6565b602488634e487b7160e01b81526011600452fd5b506040516323b872dd60e01b60208201526001600160a01b039490941660248086019190915230604486015235606480860191909152845284939092906106b09061068a608482611345565b7f0000000000000000000000000000000000000000000000000000000000000000611b40565b60206106c760405193604085526040850190611472565b91838303828501525191828152019290845b81811061070e57505050807feeed64b8fc3f300f7edc84ec3f54d79beded7fb1691c186e046c059958efb2729133930390a280f35b82518552602094850194909201916001016106d9565b608460405162461bcd60e51b815260206004820152602860248201527f4e66745374616b696e673a206c656e677468206f6620617272617920646f657360448201527f6e2774206d6163680000000000000000000000000000000000000000000000006064820152fd5b81358152602091820191016104b9565b8780fd5b8380fd5b8280fd5b50346101a25760406003193601126101a2576107c46112b2565b60406107ce6112cd565b926001600160a01b03809316815260066020522091166000526020526020600260406000200154604051908152f35b50346101a25760206003193601126101a25760a061082161081c6112b2565b61151a565b60806040519180511515835267ffffffffffffffff6020820151166020840152604081015160408401526060810151606084015201516080820152f35b50346101a257806003193601126101a2576108776119a6565b60006001600160a01b0381547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50346101a2576020806003193601126109c75767ffffffffffffffff906004358281116107a2579161090784933690600401611380565b61090f6119a6565b83914316915b8151811015610987576001906001600160a01b03806109348386611448565b51168752600590818752604088208460ff198254161790556109568386611448565b51168752855260408620805468ffffffffffffffff001916600886901b68ffffffffffffffff001617905501610915565b84827f3120197cb0bf46828731cd89ce8090a06db0ca162ee78919341272fb45817b1f60405160208152806109c133946020830190611472565b0390a280f35b5080fd5b50346101a257806003193601126101a2576020600154604051908152f35b50346101a2576020806003193601126109c757610a046112b2565b906001600160a01b03610a168361151a565b9216908184526006815260408420336000528152604060002092600260405191610a3f836112e3565b670de0b6b3a7640000610a70875480865260408560018b01549a8989019b8c520154948188019586520151906114fa565b0495610a82815197898652835161142f565b8252878152858852600685526040882033600052855260406000209351845551600184015551910155813b156107a2576040516323b872dd60e01b8152306004820152336024820152604481018490528490818160648183885af18015610b2c57610b18575b50507f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb906040519384523393a380f35b610b2190611315565b6107a2578338610ae8565b6040513d84823e3d90fd5b50346101a25760406003193601126101a257610b516112b2565b60243590610b5d611873565b906001600160a01b038116918285526020916006835260408620336000528352604060002060405192610b8f846112e3565b8154845260018201549260028686019385855201549360408601948552610ca5576002939291670de0b6b3a7640000610bd76040610bcf610be29561151a565b0151836114fa565b049086528351611413565b8252868152858852600685526040882033600052855260406000209351845551600184015551910155813b156107a2576040517f42842e0e000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018490528490818160648183885af18015610b2c57610c91575b50507f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62906040519384523393a380f35b610c9a90611315565b6107a2578338610c61565b6064866040519062461bcd60e51b82526004820152601960248201527f4e66745374616b696e673a20616c7265616479206578697374000000000000006044820152fd5b50346101a25760206003193601126101a2577f9ebcfad0fd447195381cabc8e99bd2c8d6f050ffbbc10538f729030481e564af61019c600435610d2a6119a6565b600181905560408051338152602081019290925290918291820190565b50346101a25760206003193601126101a257610d616119a6565b6004356002556003546040805133815260208101929092527f5ed6e55c430fc2a42200c2d6f80a56a038dbf3ca778a54686acf00ac42f2e1a691908190810161019c565b50346101a25760406003193601126101a257610dbf6112b2565b610dc76112cd565b6001600160a01b03610dd88361151a565b92169081845260209060068252604085203386528252610e4d6040862094604051610e02816112e3565b6060610e408854808452670de0b6b3a7640000610e3a600260018d01549c8b88019d8e520154928360408801526040880151906114fa565b0461142f565b91519201514292336116ba565b935190838652600683526040862033875283528560026040822082815582600182015501558480610f24575b505084833b156101a2576040516323b872dd60e01b815230600482015233602482015260448101929092528160648183875af18015610f1957610ee6575b507f7bb2f81fe27ec9003020db5e0d207b11ff9f4f7aad1380050355dfdb72967564906040519384523393a380f35b93610f127f7bb2f81fe27ec9003020db5e0d207b11ff9f4f7aad1380050355dfdb729675649295611315565b9390610eb7565b6040513d87823e3d90fd5b610f4e917f00000000000000000000000000000000000000000000000000000000000000006117c8565b3884610e79565b50346101a2576020806003193601126109c757610f706112b2565b610f78611873565b916001600160a01b0382169182855260068252604085203386528252604085209060405191610fa6836112e3565b80548352600181015491600285850192848452015492604085019384521561104e579160029161101e610ffb7f73b16f71cf3c4e1e462af5a372769931a4bb28cd70ef6791b41c16cacc89e88897969561151a565b98670de0b6b3a7640000610bd760406110158951856113f0565b9c01518c6114fa565b82528689526006855260408920338a5285526040892093518455516001840155519101556040519384523393a380f35b6064856040519062461bcd60e51b82526004820152601d60248201527f4e66745374616b696e673a20746f6b656e206e6f74206465706f7369740000006044820152fd5b50346101a25760406003193601126101a2576110ac6112b2565b6110b46112cd565b907ff7a40077ff7a04c7e61f6f26fb13774259ddf1b6bce9ecf26a8276cdd39926836001600160a01b036110e78361151a565b9216928385526020906006825260408620338752825260408620600260405191611110836112e3565b80549081845261116283600183015492888701938452015498611153670de0b6b3a764000061114b60408901968d88526040850151906114fa565b049a8b61142f565b606087519201514292336116ba565b978252888a526006865260408a20338b52865260408a209351845551600184015551910155838061119c575b50506040519283523392a380f35b6111c6917f00000000000000000000000000000000000000000000000000000000000000006117c8565b388361118e565b50346101a25760806003193601126101a2576111e76112b2565b506111f06112cd565b5060643567ffffffffffffffff8082116107a657366023830112156107a65781600401359081116107a657369101602401116101a25760206040517f150b7a02000000000000000000000000000000000000000000000000000000008152f35b9050346109c75760406003193601126109c75760406060926112706112b2565b6112786112cd565b906001600160a01b038091168352600660205283832091168252602052208054906002600182015491015491835260208301526040820152f35b600435906001600160a01b03821682036112c857565b600080fd5b602435906001600160a01b03821682036112c857565b6060810190811067ffffffffffffffff8211176112ff57604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116112ff57604052565b60a0810190811067ffffffffffffffff8211176112ff57604052565b90601f601f19910116810190811067ffffffffffffffff8211176112ff57604052565b67ffffffffffffffff81116112ff5760051b60200190565b9080601f830112156112c857602090823561139a81611368565b936113a86040519586611345565b81855260208086019260051b8201019283116112c857602001905b8282106113d1575050505090565b81356001600160a01b03811681036112c85781529083019083016113c3565b919082039182116113fd57565b634e487b7160e01b600052601160045260246000fd5b919091600083820193841291129080158216911516176113fd57565b818103929160001380158285131691841216176113fd57565b805182101561145c5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b90815180825260208080930193019160005b828110611492575050505090565b83516001600160a01b031685529381019392810192600101611484565b156114b657565b606460405162461bcd60e51b815260206004820152601a60248201527f4e66745374616b696e673a20706f6f6c206e6f742065786973740000000000006044820152fd5b818102929181159184041417156113fd57565b919082018092116113fd57565b906080916001600160a01b03604091825161153481611329565b600095818780935282602082015282868201528260608201520152169081845260056020528084209080519461156986611329565b82549260ff841615159687815267ffffffffffffffff9283602083019660081c168652600183015493858301948552600360028501549460608501958652015490608084019182526115bb849b6114af565b6003549781815116988943116115d9575b5050505050505050505050565b88600395827f4884fdd3ca611190740fbfd998257f953e9e90cb530f233718a74e5b702051cb9c61163094611689575b505084431684528c815260056020522095511515869060ff60ff1983541691151516179055565b51169461165c86859068ffffffffffffffff001968ffffffffffffffff0083549260081b169116179055565b51938460018501555160028401555191015582519182526020820152a238808080808080808080806115cc565b6116b1916116a561169d6116aa93436113f0565b8d51906114fa565b6119ea565b8b5161150d565b8a523880611609565b929391909160009360806001600160a01b03602481600454169360405194859384927f1959a0020000000000000000000000000000000000000000000000000000000084521660048301525afa80156117bc5760409160009161178d575b50015190818111611743575b5050505080821015611737575050600090565b611740916113f0565b90565b670de0b6b3a76400009450611783939261176f61176661177d94611774946113f0565b60025490611986565b6114fa565b600354906119ea565b906114fa565b0438808080611724565b6117af915060803d6080116117b5575b6117a78183611345565b810190611824565b38611718565b503d61179d565b6040513d6000823e3d90fd5b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000060208201526001600160a01b039290921660248301526044808301939093529181526118229161181d606483611345565b611b40565b565b908160809103126112c85760405190608082019082821067ffffffffffffffff8311176112ff576060916040528051835260208101516020840152604081015160408401520151606082015290565b602460806001600160a01b0360045416604051928380927f1959a0020000000000000000000000000000000000000000000000000000000082523360048301525afa9081156117bc57600091611967575b508051600154116119235760408101514210156118df575190565b606460405162461bcd60e51b815260206004820152601d60248201527f4e66745374616b696e673a206c6f636b2074696d6520657870697265640000006044820152fd5b606460405162461bcd60e51b815260206004820152601d60248201527f4e66745374616b696e673a206c6f7720616d6f756e74207374616b65640000006044820152fd5b611980915060803d6080116117b5576117a78183611345565b386118c4565b8115611990570490565b634e487b7160e01b600052601260045260246000fd5b6001600160a01b036000541633036119ba57565b60246040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152fd5b90670de0b6b3a7640000918281029281840414901517156113fd5761174091611986565b91600354916001600160a01b03809416600093818552600560205260408086209281805197611a3c89611329565b85549960ff8b1615158a5267ffffffffffffffff938460208c019c60081c168c5260018801549a8481019b8c5260028901549860608201998a526003015490608001528252600660205282822090881682526020522096825197611a9f896112e3565b80548952600181015460208a01526002015492880192835251975116908582811161174099611b0295611af895670de0b6b3a76400009484611aef95611b37575b611b0c575b50505089516114fa565b0490519061142f565b93600254906114fa565b93519051916116ba565b916116a5611b21611b2993611b2f96956113f0565b8b51906114fa565b9061150d565b38808a611ae5565b50821515611ae0565b6001600160a01b031690600080826020829451910182865af13d15611c22573d9067ffffffffffffffff8211611c0e5790611b9d9160405191611b8d6020601f19601f8401160184611345565b82523d84602084013e5b84611c2e565b908151918215159283611be6575b505050611bb55750565b602490604051907f5274afe70000000000000000000000000000000000000000000000000000000082526004820152fd5b8192935090602091810103126109c75760200151908115918215036101a25750388080611bab565b602483634e487b7160e01b81526041600452fd5b611b9d90606090611b97565b90611c6d5750805115611c4357805190602001fd5b60046040517f1425ea42000000000000000000000000000000000000000000000000000000008152fd5b81511580611cb8575b611c7e575090565b6024906001600160a01b03604051917f9996b315000000000000000000000000000000000000000000000000000000008352166004820152fd5b50803b15611c7656fea2646970667358221220377ce631b73cab710caccf5e959992c57a1e460a0377969af23272b8c777ff6964736f6c63430008180033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b600090813560e01c9081630f208beb1461125057508063150b7a02146111cd57806321c0b342146110925780632287b18014610f555780633e434e5d14610da55780633f1a7b5614610d4757806343808c5014610ce957806347e7ef2414610b3757806351cff8d9146109e957806360c7dc47146109cb5780636e7b2c26146108d0578063715018a61461085e5780637b46c54f146107fd5780638a7023f2146107aa5780638a747bf3146104275780638da5cb5b146104015780638fcdfafe146103da578063976df6bb146103aa5780639a7b5f11146103375780639ced7e7614610301578063a111bab9146102e3578063c467d559146102c5578063d1c6a231146102a2578063e1eddde31461025e578063f2fde38b146101a55763f71b22b81461013f57600080fd5b346101a25760206003193601126101a2577f5ed6e55c430fc2a42200c2d6f80a56a038dbf3ca778a54686acf00ac42f2e1a661019c60043561017f6119a6565b600381905560408051338152602081019290925290918291820190565b0390a180f35b80fd5b50346101a25760206003193601126101a2576101bf6112b2565b6101c76119a6565b6001600160a01b0380911690811561022d57600054827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b602483604051907f1e4fbdf70000000000000000000000000000000000000000000000000000000082526004820152fd5b50346101a257806003193601126101a25760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346101a257806003193601126101a2576020604051670de0b6b3a76400008152f35b50346101a257806003193601126101a2576020600254604051908152f35b50346101a257806003193601126101a2576020600354604051908152f35b50346101a25760406003193601126101a257602061032f6103206112b2565b6103286112cd565b4391611a0e565b604051908152f35b50346101a25760206003193601126101a257604060a0916001600160a01b0361035e6112b2565b168152600560205220805490600181015490600360028201549101549167ffffffffffffffff6040519460ff81161515865260081c166020850152604084015260608301526080820152f35b50346101a25760606003193601126101a257602061032f6103c96112b2565b6103d16112cd565b60443591611a0e565b50346101a257806003193601126101a25760206001600160a01b0360045416604051908152f35b50346101a257806003193601126101a2576001600160a01b036020915416604051908152f35b50346101a25760806003193601126101a2576104416112b2565b60443567ffffffffffffffff81116107a657610461903690600401611380565b6064359067ffffffffffffffff82116107a257366023830112156107a257816004013561048d81611368565b9261049b6040519485611345565b818452602084016024819360051b8301019136831161079e57602401905b82821061078e575050506104cb6119a6565b825182510361072457845b825181101561063e576001600160a01b036104f18285611448565b5116865260056020526040862061054f6040519161050e83611329565b600381549167ffffffffffffffff60ff841615159384875260081c1660208601526001810154604086015260028101546060860152015460808401526114af565b6105598286611448565b51606082015267ffffffffffffffff4316602082015260808101517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461062a579060018093920160808201526001600160a01b036105b98387611448565b5116885260056020526003608060408a20926105e581511515859060ff60ff1983541691151516179055565b6020810151845468ffffffffffffffff00191660089190911b68ffffffffffffffff0016178455604081015186850155606081015160028501550151910155016104d6565b602488634e487b7160e01b81526011600452fd5b506040516323b872dd60e01b60208201526001600160a01b039490941660248086019190915230604486015235606480860191909152845284939092906106b09061068a608482611345565b7f0000000000000000000000000000000000000000000000000000000000000000611b40565b60206106c760405193604085526040850190611472565b91838303828501525191828152019290845b81811061070e57505050807feeed64b8fc3f300f7edc84ec3f54d79beded7fb1691c186e046c059958efb2729133930390a280f35b82518552602094850194909201916001016106d9565b608460405162461bcd60e51b815260206004820152602860248201527f4e66745374616b696e673a206c656e677468206f6620617272617920646f657360448201527f6e2774206d6163680000000000000000000000000000000000000000000000006064820152fd5b81358152602091820191016104b9565b8780fd5b8380fd5b8280fd5b50346101a25760406003193601126101a2576107c46112b2565b60406107ce6112cd565b926001600160a01b03809316815260066020522091166000526020526020600260406000200154604051908152f35b50346101a25760206003193601126101a25760a061082161081c6112b2565b61151a565b60806040519180511515835267ffffffffffffffff6020820151166020840152604081015160408401526060810151606084015201516080820152f35b50346101a257806003193601126101a2576108776119a6565b60006001600160a01b0381547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50346101a2576020806003193601126109c75767ffffffffffffffff906004358281116107a2579161090784933690600401611380565b61090f6119a6565b83914316915b8151811015610987576001906001600160a01b03806109348386611448565b51168752600590818752604088208460ff198254161790556109568386611448565b51168752855260408620805468ffffffffffffffff001916600886901b68ffffffffffffffff001617905501610915565b84827f3120197cb0bf46828731cd89ce8090a06db0ca162ee78919341272fb45817b1f60405160208152806109c133946020830190611472565b0390a280f35b5080fd5b50346101a257806003193601126101a2576020600154604051908152f35b50346101a2576020806003193601126109c757610a046112b2565b906001600160a01b03610a168361151a565b9216908184526006815260408420336000528152604060002092600260405191610a3f836112e3565b670de0b6b3a7640000610a70875480865260408560018b01549a8989019b8c520154948188019586520151906114fa565b0495610a82815197898652835161142f565b8252878152858852600685526040882033600052855260406000209351845551600184015551910155813b156107a2576040516323b872dd60e01b8152306004820152336024820152604481018490528490818160648183885af18015610b2c57610b18575b50507f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb906040519384523393a380f35b610b2190611315565b6107a2578338610ae8565b6040513d84823e3d90fd5b50346101a25760406003193601126101a257610b516112b2565b60243590610b5d611873565b906001600160a01b038116918285526020916006835260408620336000528352604060002060405192610b8f846112e3565b8154845260018201549260028686019385855201549360408601948552610ca5576002939291670de0b6b3a7640000610bd76040610bcf610be29561151a565b0151836114fa565b049086528351611413565b8252868152858852600685526040882033600052855260406000209351845551600184015551910155813b156107a2576040517f42842e0e000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018490528490818160648183885af18015610b2c57610c91575b50507f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62906040519384523393a380f35b610c9a90611315565b6107a2578338610c61565b6064866040519062461bcd60e51b82526004820152601960248201527f4e66745374616b696e673a20616c7265616479206578697374000000000000006044820152fd5b50346101a25760206003193601126101a2577f9ebcfad0fd447195381cabc8e99bd2c8d6f050ffbbc10538f729030481e564af61019c600435610d2a6119a6565b600181905560408051338152602081019290925290918291820190565b50346101a25760206003193601126101a257610d616119a6565b6004356002556003546040805133815260208101929092527f5ed6e55c430fc2a42200c2d6f80a56a038dbf3ca778a54686acf00ac42f2e1a691908190810161019c565b50346101a25760406003193601126101a257610dbf6112b2565b610dc76112cd565b6001600160a01b03610dd88361151a565b92169081845260209060068252604085203386528252610e4d6040862094604051610e02816112e3565b6060610e408854808452670de0b6b3a7640000610e3a600260018d01549c8b88019d8e520154928360408801526040880151906114fa565b0461142f565b91519201514292336116ba565b935190838652600683526040862033875283528560026040822082815582600182015501558480610f24575b505084833b156101a2576040516323b872dd60e01b815230600482015233602482015260448101929092528160648183875af18015610f1957610ee6575b507f7bb2f81fe27ec9003020db5e0d207b11ff9f4f7aad1380050355dfdb72967564906040519384523393a380f35b93610f127f7bb2f81fe27ec9003020db5e0d207b11ff9f4f7aad1380050355dfdb729675649295611315565b9390610eb7565b6040513d87823e3d90fd5b610f4e917f00000000000000000000000000000000000000000000000000000000000000006117c8565b3884610e79565b50346101a2576020806003193601126109c757610f706112b2565b610f78611873565b916001600160a01b0382169182855260068252604085203386528252604085209060405191610fa6836112e3565b80548352600181015491600285850192848452015492604085019384521561104e579160029161101e610ffb7f73b16f71cf3c4e1e462af5a372769931a4bb28cd70ef6791b41c16cacc89e88897969561151a565b98670de0b6b3a7640000610bd760406110158951856113f0565b9c01518c6114fa565b82528689526006855260408920338a5285526040892093518455516001840155519101556040519384523393a380f35b6064856040519062461bcd60e51b82526004820152601d60248201527f4e66745374616b696e673a20746f6b656e206e6f74206465706f7369740000006044820152fd5b50346101a25760406003193601126101a2576110ac6112b2565b6110b46112cd565b907ff7a40077ff7a04c7e61f6f26fb13774259ddf1b6bce9ecf26a8276cdd39926836001600160a01b036110e78361151a565b9216928385526020906006825260408620338752825260408620600260405191611110836112e3565b80549081845261116283600183015492888701938452015498611153670de0b6b3a764000061114b60408901968d88526040850151906114fa565b049a8b61142f565b606087519201514292336116ba565b978252888a526006865260408a20338b52865260408a209351845551600184015551910155838061119c575b50506040519283523392a380f35b6111c6917f00000000000000000000000000000000000000000000000000000000000000006117c8565b388361118e565b50346101a25760806003193601126101a2576111e76112b2565b506111f06112cd565b5060643567ffffffffffffffff8082116107a657366023830112156107a65781600401359081116107a657369101602401116101a25760206040517f150b7a02000000000000000000000000000000000000000000000000000000008152f35b9050346109c75760406003193601126109c75760406060926112706112b2565b6112786112cd565b906001600160a01b038091168352600660205283832091168252602052208054906002600182015491015491835260208301526040820152f35b600435906001600160a01b03821682036112c857565b600080fd5b602435906001600160a01b03821682036112c857565b6060810190811067ffffffffffffffff8211176112ff57604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116112ff57604052565b60a0810190811067ffffffffffffffff8211176112ff57604052565b90601f601f19910116810190811067ffffffffffffffff8211176112ff57604052565b67ffffffffffffffff81116112ff5760051b60200190565b9080601f830112156112c857602090823561139a81611368565b936113a86040519586611345565b81855260208086019260051b8201019283116112c857602001905b8282106113d1575050505090565b81356001600160a01b03811681036112c85781529083019083016113c3565b919082039182116113fd57565b634e487b7160e01b600052601160045260246000fd5b919091600083820193841291129080158216911516176113fd57565b818103929160001380158285131691841216176113fd57565b805182101561145c5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b90815180825260208080930193019160005b828110611492575050505090565b83516001600160a01b031685529381019392810192600101611484565b156114b657565b606460405162461bcd60e51b815260206004820152601a60248201527f4e66745374616b696e673a20706f6f6c206e6f742065786973740000000000006044820152fd5b818102929181159184041417156113fd57565b919082018092116113fd57565b906080916001600160a01b03604091825161153481611329565b600095818780935282602082015282868201528260608201520152169081845260056020528084209080519461156986611329565b82549260ff841615159687815267ffffffffffffffff9283602083019660081c168652600183015493858301948552600360028501549460608501958652015490608084019182526115bb849b6114af565b6003549781815116988943116115d9575b5050505050505050505050565b88600395827f4884fdd3ca611190740fbfd998257f953e9e90cb530f233718a74e5b702051cb9c61163094611689575b505084431684528c815260056020522095511515869060ff60ff1983541691151516179055565b51169461165c86859068ffffffffffffffff001968ffffffffffffffff0083549260081b169116179055565b51938460018501555160028401555191015582519182526020820152a238808080808080808080806115cc565b6116b1916116a561169d6116aa93436113f0565b8d51906114fa565b6119ea565b8b5161150d565b8a523880611609565b929391909160009360806001600160a01b03602481600454169360405194859384927f1959a0020000000000000000000000000000000000000000000000000000000084521660048301525afa80156117bc5760409160009161178d575b50015190818111611743575b5050505080821015611737575050600090565b611740916113f0565b90565b670de0b6b3a76400009450611783939261176f61176661177d94611774946113f0565b60025490611986565b6114fa565b600354906119ea565b906114fa565b0438808080611724565b6117af915060803d6080116117b5575b6117a78183611345565b810190611824565b38611718565b503d61179d565b6040513d6000823e3d90fd5b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000060208201526001600160a01b039290921660248301526044808301939093529181526118229161181d606483611345565b611b40565b565b908160809103126112c85760405190608082019082821067ffffffffffffffff8311176112ff576060916040528051835260208101516020840152604081015160408401520151606082015290565b602460806001600160a01b0360045416604051928380927f1959a0020000000000000000000000000000000000000000000000000000000082523360048301525afa9081156117bc57600091611967575b508051600154116119235760408101514210156118df575190565b606460405162461bcd60e51b815260206004820152601d60248201527f4e66745374616b696e673a206c6f636b2074696d6520657870697265640000006044820152fd5b606460405162461bcd60e51b815260206004820152601d60248201527f4e66745374616b696e673a206c6f7720616d6f756e74207374616b65640000006044820152fd5b611980915060803d6080116117b5576117a78183611345565b386118c4565b8115611990570490565b634e487b7160e01b600052601260045260246000fd5b6001600160a01b036000541633036119ba57565b60246040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152fd5b90670de0b6b3a7640000918281029281840414901517156113fd5761174091611986565b91600354916001600160a01b03809416600093818552600560205260408086209281805197611a3c89611329565b85549960ff8b1615158a5267ffffffffffffffff938460208c019c60081c168c5260018801549a8481019b8c5260028901549860608201998a526003015490608001528252600660205282822090881682526020522096825197611a9f896112e3565b80548952600181015460208a01526002015492880192835251975116908582811161174099611b0295611af895670de0b6b3a76400009484611aef95611b37575b611b0c575b50505089516114fa565b0490519061142f565b93600254906114fa565b93519051916116ba565b916116a5611b21611b2993611b2f96956113f0565b8b51906114fa565b9061150d565b38808a611ae5565b50821515611ae0565b6001600160a01b031690600080826020829451910182865af13d15611c22573d9067ffffffffffffffff8211611c0e5790611b9d9160405191611b8d6020601f19601f8401160184611345565b82523d84602084013e5b84611c2e565b908151918215159283611be6575b505050611bb55750565b602490604051907f5274afe70000000000000000000000000000000000000000000000000000000082526004820152fd5b8192935090602091810103126109c75760200151908115918215036101a25750388080611bab565b602483634e487b7160e01b81526041600452fd5b611b9d90606090611b97565b90611c6d5750805115611c4357805190602001fd5b60046040517f1425ea42000000000000000000000000000000000000000000000000000000008152fd5b81511580611cb8575b611c7e575090565b6024906001600160a01b03604051917f9996b315000000000000000000000000000000000000000000000000000000008352166004820152fd5b50803b15611c7656fea2646970667358221220377ce631b73cab710caccf5e959992c57a1e460a0377969af23272b8c777ff6964736f6c63430008180033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "claim(address,address)": {
        "params": {
          "_pool": "The address of the pool. See `NFTPoolInfo`.",
          "_to": "Receiver rewards."
        }
      },
      "deposit(address,uint256)": {
        "params": {
          "_pool": "The address of the pool. See `NFTPoolInfo`."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingReward(address,address)": {
        "params": {
          "_pool": "The address of the pool. See `poolInfo`.",
          "_user": "Address of user."
        },
        "returns": {
          "pending_": "reward for a given user."
        }
      },
      "pendingRewardAtBlock(address,address,uint256)": {
        "params": {
          "_pool": "The address of the pool. See `poolInfo`.",
          "_user": "Address of user."
        },
        "returns": {
          "pending_": "reward for a given user."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateEpoch(address,uint256,address[],uint256[])": {
        "params": {
          "_pool": "addresses of pool to be updated.",
          "_rewardPerBlock": "array of rewardPerBlock"
        }
      },
      "updatePool(address)": {
        "params": {
          "_pool": "The address of the pool. See `NFTPoolInfo`."
        },
        "returns": {
          "_poolInfo": "Returns the pool that was updated."
        }
      },
      "userRewardsDebt(address,address)": {
        "details": "retuen user reward debt",
        "params": {
          "_pool": "address of pool",
          "_user": "address of user"
        }
      },
      "withdrawAndClaim(address,address)": {
        "params": {
          "_pool": "address of the pool. See `NFTPoolInfo`.",
          "_to": "Receiver of the LP tokens and syUSD rewards."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "SYNTH()": {
        "notice": "Address of reward token contract."
      },
      "addPool(address[])": {
        "notice": "Add a new NFT pool. Can only be called by the owner."
      },
      "claim(address,address)": {
        "notice": "Claim proceeds for transaction sender to `to`."
      },
      "deposit(address,uint256)": {
        "notice": "Deposit NFT token."
      },
      "pendingReward(address,address)": {
        "notice": "View function to see pending reward of user in pool at current block."
      },
      "pendingRewardAtBlock(address,address,uint256)": {
        "notice": "View function to see pending reward of user in pool at future block."
      },
      "poolInfo(address)": {
        "notice": "Info of each pool."
      },
      "setTotalLockAmount(uint256)": {
        "notice": "set total locked token for lpSupply"
      },
      "synthrStaking()": {
        "notice": "synthr staking instance"
      },
      "totalLockAmount()": {
        "notice": "Total lock amount of users in VotingEscrow"
      },
      "updateEpoch(address,uint256,address[],uint256[])": {
        "notice": "update epoch of pool"
      },
      "updatePool(address)": {
        "notice": "Update reward variables of the given pool."
      },
      "userInfo(address,address)": {
        "notice": "Info of each user that stakes LP tokens."
      },
      "withdrawAndClaim(address,address)": {
        "notice": "Withdraw NFT token from pool and claim proceeds for transaction sender to `to`."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/NFT-Staking/NftStaking.sol:NftStaking",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 899,
        "contract": "contracts/NFT-Staking/NftStaking.sol:NftStaking",
        "label": "stakeAmount",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 902,
        "contract": "contracts/NFT-Staking/NftStaking.sol:NftStaking",
        "label": "secondPerBlock",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 905,
        "contract": "contracts/NFT-Staking/NftStaking.sol:NftStaking",
        "label": "totalLockAmount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 909,
        "contract": "contracts/NFT-Staking/NftStaking.sol:NftStaking",
        "label": "synthrStaking",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ISynthrStaking)2210"
      },
      {
        "astId": 915,
        "contract": "contracts/NFT-Staking/NftStaking.sol:NftStaking",
        "label": "poolInfo",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(NFTPoolInfo)894_storage)"
      },
      {
        "astId": 923,
        "contract": "contracts/NFT-Staking/NftStaking.sol:NftStaking",
        "label": "userInfo",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)882_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ISynthrStaking)2210": {
        "encoding": "inplace",
        "label": "contract ISynthrStaking",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)882_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct NftStaking.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)882_storage)"
      },
      "t_mapping(t_address,t_struct(NFTPoolInfo)894_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct NftStaking.NFTPoolInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(NFTPoolInfo)894_storage"
      },
      "t_mapping(t_address,t_struct(UserInfo)882_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct NftStaking.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)882_storage"
      },
      "t_struct(NFTPoolInfo)894_storage": {
        "encoding": "inplace",
        "label": "struct NftStaking.NFTPoolInfo",
        "members": [
          {
            "astId": 885,
            "contract": "contracts/NFT-Staking/NftStaking.sol:NftStaking",
            "label": "exist",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 887,
            "contract": "contracts/NFT-Staking/NftStaking.sol:NftStaking",
            "label": "lastRewardBlock",
            "offset": 1,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 889,
            "contract": "contracts/NFT-Staking/NftStaking.sol:NftStaking",
            "label": "accRewardPerShare",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 891,
            "contract": "contracts/NFT-Staking/NftStaking.sol:NftStaking",
            "label": "rewardPerBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 893,
            "contract": "contracts/NFT-Staking/NftStaking.sol:NftStaking",
            "label": "epoch",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(UserInfo)882_storage": {
        "encoding": "inplace",
        "label": "struct NftStaking.UserInfo",
        "members": [
          {
            "astId": 877,
            "contract": "contracts/NFT-Staking/NftStaking.sol:NftStaking",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 879,
            "contract": "contracts/NFT-Staking/NftStaking.sol:NftStaking",
            "label": "tokenId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 881,
            "contract": "contracts/NFT-Staking/NftStaking.sol:NftStaking",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "2",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}