{
  "address": "0xf16b45008e4d89E30c97a4624Fd89258bc9f8550",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_votingEscrow",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pendingRewardAmount",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "pool",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "rewardPerBlock",
          "type": "uint256[]"
        }
      ],
      "name": "EpochUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "IncreaseDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "pool",
          "type": "address[]"
        }
      ],
      "name": "LogPoolAddition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "lastRewardBlock",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accRewardPerShare",
          "type": "uint256"
        }
      ],
      "name": "LogUpdatePool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeAmount",
          "type": "uint256"
        }
      ],
      "name": "LogUpdatedStakeAmount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pendingRewardAmount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawAndClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pendingRewardAmount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawPendingRewardAmount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalLockAmount",
          "type": "uint256"
        }
      ],
      "name": "totalLockAmountUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACC_REWARD_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CONTROLLER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSE_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_TOKEN",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_pool",
          "type": "address[]"
        }
      ],
      "name": "addPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "increaseDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_users",
          "type": "address[]"
        }
      ],
      "name": "pauseUserReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pending_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_blockNumber",
          "type": "uint256"
        }
      ],
      "name": "pendingRewardAtBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pending_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "bool",
          "name": "exist",
          "type": "bool"
        },
        {
          "internalType": "uint64",
          "name": "lastRewardBlock",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "accRewardPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardPerBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentEpoch",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakeAmount",
          "type": "uint256"
        }
      ],
      "name": "setStakeAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_totalLockAmount",
          "type": "uint256"
        }
      ],
      "name": "setTotalLockAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLockAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "unpauseReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rewardAmount",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_pool",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_rewardPerBlock",
          "type": "uint256[]"
        }
      ],
      "name": "updateEpoch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "updatePool",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "exist",
              "type": "bool"
            },
            {
              "internalType": "uint64",
              "name": "lastRewardBlock",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "accRewardPerShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardPerBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentEpoch",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "epoch",
              "type": "uint256"
            }
          ],
          "internalType": "struct NftStaking.NFTPoolInfo",
          "name": "_poolInfo",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isPause",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "rewardDebt",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "userRewardsDebt",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingEscrow",
      "outputs": [
        {
          "internalType": "contract IVotingEscrow",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "withdrawAndClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "withdrawPendingReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x451c85ec13d9f5d3035f4a57967b01214c0e1ffba1ed522604c53b15df6e35e1",
  "receipt": {
    "to": null,
    "from": "0xD2344ce2CFEaD1cBE24e33E8301411d62946A1d2",
    "contractAddress": "0xf16b45008e4d89E30c97a4624Fd89258bc9f8550",
    "transactionIndex": 8,
    "gasUsed": "6415986",
    "logsBloom": "0x
    "blockHash": "0x778c896ea55aa96c6915d934f319e0b2fc43ece7dbe68167b7b9d5086f91a2ed",
    "transactionHash": "0x451c85ec13d9f5d3035f4a57967b01214c0e1ffba1ed522604c53b15df6e35e1",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 31506151,
        "transactionHash": "0x451c85ec13d9f5d3035f4a57967b01214c0e1ffba1ed522604c53b15df6e35e1",
        "address": "0xf16b45008e4d89E30c97a4624Fd89258bc9f8550",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x7b765e0e932d348852a6f810bfa1ab891e259123f02db8cdcde614c570223357",
          "0x000000000000000000000000d2344ce2cfead1cbe24e33e8301411d62946a1d2",
          "0x000000000000000000000000d2344ce2cfead1cbe24e33e8301411d62946a1d2"
        ],
        "data": "0x",
        "logIndex": 19,
        "blockHash": "0x778c896ea55aa96c6915d934f319e0b2fc43ece7dbe68167b7b9d5086f91a2ed"
      },
      {
        "transactionIndex": 8,
        "blockNumber": 31506151,
        "transactionHash": "0x451c85ec13d9f5d3035f4a57967b01214c0e1ffba1ed522604c53b15df6e35e1",
        "address": "0xf16b45008e4d89E30c97a4624Fd89258bc9f8550",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x7b765e0e932d348852a6f810bfa1ab891e259123f02db8cdcde614c570223357",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x7b765e0e932d348852a6f810bfa1ab891e259123f02db8cdcde614c570223357"
        ],
        "data": "0x",
        "logIndex": 20,
        "blockHash": "0x778c896ea55aa96c6915d934f319e0b2fc43ece7dbe68167b7b9d5086f91a2ed"
      },
      {
        "transactionIndex": 8,
        "blockNumber": 31506151,
        "transactionHash": "0x451c85ec13d9f5d3035f4a57967b01214c0e1ffba1ed522604c53b15df6e35e1",
        "address": "0xf16b45008e4d89E30c97a4624Fd89258bc9f8550",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x139c2898040ef16910dc9f44dc697df79363da767d8bc92f2e310312b816e46d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x7b765e0e932d348852a6f810bfa1ab891e259123f02db8cdcde614c570223357"
        ],
        "data": "0x",
        "logIndex": 21,
        "blockHash": "0x778c896ea55aa96c6915d934f319e0b2fc43ece7dbe68167b7b9d5086f91a2ed"
      }
    ],
    "blockNumber": 31506151,
    "cumulativeGasUsed": "8406411",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD2344ce2CFEaD1cBE24e33E8301411d62946A1d2",
    "0x172160B1C9BD74D683e1EbaE0EdD96a6fEA9A6Eb",
    "0x3335951873CdDEA5d7e38AD37Ca864c9Aaf6BdAA"
  ],
  "numDeployments": 1,
  "solcInputHash": "fe784cf5df976413bb762493e149b683",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_votingEscrow\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pendingRewardAmount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"pool\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"rewardPerBlock\",\"type\":\"uint256[]\"}],\"name\":\"EpochUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"IncreaseDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"pool\",\"type\":\"address[]\"}],\"name\":\"LogPoolAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"lastRewardBlock\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"}],\"name\":\"LogUpdatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"}],\"name\":\"LogUpdatedStakeAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pendingRewardAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawAndClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pendingRewardAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawPendingRewardAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalLockAmount\",\"type\":\"uint256\"}],\"name\":\"totalLockAmountUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACC_REWARD_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTROLLER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pool\",\"type\":\"address[]\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"increaseDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"pauseUserReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pending_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"pendingRewardAtBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pending_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exist\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"lastRewardBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeAmount\",\"type\":\"uint256\"}],\"name\":\"setStakeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalLockAmount\",\"type\":\"uint256\"}],\"name\":\"setTotalLockAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLockAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"unpauseReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_pool\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256[]\"}],\"name\":\"updateEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"updatePool\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"exist\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"lastRewardBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"internalType\":\"struct NftStaking.NFTPoolInfo\",\"name\":\"_poolInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isPause\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"rewardDebt\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userRewardsDebt\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingEscrow\",\"outputs\":[{\"internalType\":\"contract IVotingEscrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawAndClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"withdrawPendingReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"claim(address,address)\":{\"params\":{\"_pool\":\"The address of the pool. See `NFTPoolInfo`.\",\"_to\":\"Receiver rewards.\"}},\"deposit(address,uint256)\":{\"params\":{\"_pool\":\"The address of the pool. See `NFTPoolInfo`.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"pendingReward(address,address)\":{\"params\":{\"_pool\":\"The address of the pool. See `poolInfo`.\",\"_user\":\"Address of user.\"},\"returns\":{\"pending_\":\"reward for a given user.\"}},\"pendingRewardAtBlock(address,address,uint256)\":{\"params\":{\"_pool\":\"The address of the pool. See `poolInfo`.\",\"_user\":\"Address of user.\"},\"returns\":{\"pending_\":\"reward for a given user.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"updateEpoch(address,uint256,address[],uint256[])\":{\"params\":{\"_pool\":\"addresses of pool to be updated.\",\"_rewardPerBlock\":\"array of rewardPerBlock\"}},\"updatePool(address)\":{\"params\":{\"_pool\":\"The address of the pool. See `NFTPoolInfo`.\"},\"returns\":{\"_poolInfo\":\"Returns the pool that was updated.\"}},\"userRewardsDebt(address,address)\":{\"details\":\"retuen user reward debt\",\"params\":{\"_pool\":\"address of pool\",\"_user\":\"address of user\"}},\"withdrawAndClaim(address,address)\":{\"params\":{\"_pool\":\"address of the pool. See `NFTPoolInfo`.\",\"_to\":\"Receiver of the LP tokens and syUSD rewards.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"REWARD_TOKEN()\":{\"notice\":\"Address of reward token contract.\"},\"addPool(address[])\":{\"notice\":\"Add a new NFT pool. Can only be called by the owner.\"},\"claim(address,address)\":{\"notice\":\"Claim proceeds for transaction sender to `to`.\"},\"deposit(address,uint256)\":{\"notice\":\"Deposit NFT token.\"},\"pendingReward(address,address)\":{\"notice\":\"View function to see pending reward of user in pool at current block.\"},\"pendingRewardAtBlock(address,address,uint256)\":{\"notice\":\"View function to see pending reward of user in pool at future block.\"},\"poolInfo(address)\":{\"notice\":\"Info of each pool.\"},\"setTotalLockAmount(uint256)\":{\"notice\":\"set total locked token for lpSupply\"},\"totalLockAmount()\":{\"notice\":\"Total lock amount of users in VotingEscrow\"},\"unpauseReward(address)\":{\"notice\":\"user will need to call this immediately after re-createLock\"},\"updateEpoch(address,uint256,address[],uint256[])\":{\"notice\":\"update epoch of pool\"},\"updatePool(address)\":{\"notice\":\"Update reward variables of the given pool.\"},\"userInfo(address,address)\":{\"notice\":\"Info of each user that stakes LP tokens.\"},\"votingEscrow()\":{\"notice\":\"voting escrow instance\"},\"withdrawAndClaim(address,address)\":{\"notice\":\"Withdraw NFT token from pool and claim proceeds for transaction sender to `to`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFT-Staking/NftStaking.sol\":\"NftStaking\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/NFT-Staking/NftStaking.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/ISynthrNFT.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"../interfaces/IVotingEscrow.sol\\\";\\n\\ncontract NftStaking is IERC721Receiver, AccessControl {\\n    using SafeERC20 for IERC20;\\n\\n    bytes32 public constant CONTROLLER_ROLE = keccak256(\\\"CONTROLLER_ROLE\\\");\\n    bytes32 public constant PAUSE_ROLE = keccak256(\\\"PAUSE_ROLE\\\");\\n\\n\\n    /// @notice Address of reward token contract.\\n    IERC20 public immutable REWARD_TOKEN;\\n\\n    uint256 public constant ACC_REWARD_PRECISION = 1e18;\\n\\n    /// @notice Info of each gauge controller user.\\n    /// `amount` LP token amount the user has provided.\\n    /// `rewardDebt` The amount of reward token entitled to the user.\\n    struct UserInfo {\\n        bool isPause;\\n        uint256 amount;\\n        uint256 pendingReward;\\n        uint256 tokenId;\\n        int256 rewardDebt;\\n    }\\n\\n    /// @notice Info of each gauge pool.\\n    struct NFTPoolInfo {\\n        bool exist;\\n        uint64 lastRewardBlock;\\n        uint256 accRewardPerShare;\\n        uint256 rewardPerBlock;\\n        uint256 currentEpoch;\\n        uint256 epoch;\\n    }\\n\\n    uint256 public stakeAmount = 1000 * 1e18;\\n\\n    /// @notice Total lock amount of users in VotingEscrow\\n    uint256 public totalLockAmount;\\n\\n    /// @notice voting escrow instance\\n    IVotingEscrow public votingEscrow;\\n\\n    /// @notice Info of each pool.\\n    mapping(address => NFTPoolInfo) public poolInfo;\\n\\n    /// @notice Info of each user that stakes LP tokens.\\n    mapping(address => mapping(address => UserInfo)) public userInfo;\\n\\n    event Deposit(address indexed pool, address indexed user, uint256 tokenId);\\n    event IncreaseDeposit(address indexed pool, address indexed user, uint256 amount);\\n    event Withdraw(address indexed pool, address indexed user, uint256 tokenId);\\n    event Claimed(\\n        address indexed pool,\\n        address indexed user,\\n        uint256 pendingRewardAmount\\n    );\\n    event WithdrawAndClaim(\\n        address indexed pool,\\n        address indexed user,\\n        uint256 pendingRewardAmount\\n    );\\n    event WithdrawPendingRewardAmount(\\n        address indexed pool,\\n        address indexed user,\\n        uint256 pendingRewardAmount\\n    );\\n    event LogPoolAddition(address indexed owner, address[] pool);\\n    event LogUpdatePool(\\n        address indexed pool,\\n        uint64 lastRewardBlock,\\n        uint256 accRewardPerShare\\n    );\\n    event EpochUpdated(\\n        address indexed owner,\\n        address[] pool,\\n        uint256[] rewardPerBlock\\n    );\\n    event totalLockAmountUpdated(address owner, uint256 totalLockAmount);\\n    event LogUpdatedStakeAmount(address owner, uint256 stakeAmount);\\n\\n    constructor(address _admin, address _rewardToken, address _votingEscrow) {\\n        REWARD_TOKEN = IERC20(_rewardToken);\\n        votingEscrow = IVotingEscrow(_votingEscrow);\\n        _grantRole(CONTROLLER_ROLE, _admin);\\n        _setRoleAdmin(CONTROLLER_ROLE, CONTROLLER_ROLE);\\n        _setRoleAdmin(PAUSE_ROLE, CONTROLLER_ROLE);\\n    }\\n\\n    /// @dev retuen user reward debt\\n    /// @param _pool address of pool\\n    /// @param _user address of user\\n    function userRewardsDebt(\\n        address _pool,\\n        address _user\\n    ) external view returns (int256) {\\n        return userInfo[_pool][_user].rewardDebt;\\n    }\\n\\n    /// @notice View function to see pending reward of user in pool at current block.\\n    /// @param _pool The address of the pool. See `poolInfo`.\\n    /// @param _user Address of user.\\n    /// @return pending_ reward for a given user.\\n    function pendingReward(\\n        address _pool,\\n        address _user\\n    ) external view returns (uint256 pending_) {\\n        pending_ = _pendingRewardAmount(_pool, _user, block.number);\\n    }\\n\\n    /// @notice View function to see pending reward of user in pool at future block.\\n    /// @param _pool The address of the pool. See `poolInfo`.\\n    /// @param _user Address of user.\\n    /// @return pending_ reward for a given user.\\n    function pendingRewardAtBlock(\\n        address _pool,\\n        address _user,\\n        uint256 _blockNumber\\n    ) external view returns (uint256 pending_) {\\n        pending_ = _pendingRewardAmount(_pool, _user, _blockNumber);\\n    }\\n\\n    function pauseUserReward(\\n        address _pool,\\n        address[] memory _users\\n    ) external onlyRole(PAUSE_ROLE) {\\n        NFTPoolInfo memory _poolInfo = updatePool(_pool);\\n        for (uint256 i; i < _users.length; i++) {\\n            UserInfo memory _userInfo = userInfo[_pool][_users[i]];\\n            require(votingEscrow.lockedEnd(_users[i]) <= block.timestamp, \\\"NftStaking: lock time not expired\\\");\\n            (\\n                int256 accumulatedReward,\\n                uint256 _pendingReward\\n            ) = _calAccumaltedAndPendingReward(\\n                    _poolInfo.accRewardPerShare,\\n                    _userInfo.amount,\\n                    _userInfo.rewardDebt\\n                );\\n\\n            _userInfo.rewardDebt = accumulatedReward;\\n            userInfo[_pool][msg.sender] = _userInfo;\\n\\n            _userInfo.isPause = true;\\n            _userInfo.pendingReward += _pendingReward;\\n            userInfo[_pool][_users[i]] = _userInfo;\\n        }\\n    }\\n\\n    /// @notice user will need to call this immediately after re-createLock\\n    function unpauseReward(address _pool) external {\\n        uint256 _amount = _checkStakeAmountAndLockEnd();\\n\\n        UserInfo memory _user = userInfo[_pool][msg.sender];\\n        require(_user.isPause, \\\"NftStaking: user is not paused\\\");\\n        require(_user.tokenId != 0, \\\"NftStaking: token id not deposited\\\");\\n\\n        NFTPoolInfo memory _poolInfo = updatePool(_pool);\\n\\n        // Effects\\n        int256 _calRewardDebt = _calAccRewardPerShare(\\n            _poolInfo.accRewardPerShare,\\n            _amount\\n        );\\n\\n        _user.rewardDebt = _calRewardDebt;\\n        _user.amount = _amount;\\n        _user.isPause = false;\\n\\n        userInfo[_pool][msg.sender] = _user;\\n    }\\n\\n    function withdrawPendingReward(address _pool) external {\\n        UserInfo memory _userInfo = userInfo[_pool][msg.sender];\\n        uint256 _pendingAmount = _userInfo.pendingReward;\\n        if (_pendingAmount != 0) {\\n            _userInfo.pendingReward = 0;\\n            userInfo[_pool][msg.sender] = _userInfo;\\n            REWARD_TOKEN.safeTransfer(msg.sender, _pendingAmount);\\n        }\\n\\n        emit WithdrawPendingRewardAmount(_pool, msg.sender, _pendingAmount);\\n    }\\n\\n    /// @notice set total locked token for lpSupply\\n    function setTotalLockAmount(\\n        uint256 _totalLockAmount\\n    ) external onlyRole(CONTROLLER_ROLE) {\\n        totalLockAmount = _totalLockAmount;\\n\\n        emit totalLockAmountUpdated(msg.sender, totalLockAmount);\\n    }\\n\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    function setStakeAmount(uint256 _stakeAmount) external onlyRole(CONTROLLER_ROLE) {\\n        stakeAmount = _stakeAmount;\\n        emit LogUpdatedStakeAmount(msg.sender, stakeAmount);\\n    }\\n\\n    /// @notice Add a new NFT pool. Can only be called by the owner.\\n    function addPool(\\n        address[] memory _pool\\n    ) external onlyRole(CONTROLLER_ROLE) {\\n        for (uint256 i; i < _pool.length; i++) {\\n            poolInfo[_pool[i]].exist = true;\\n            poolInfo[_pool[i]].lastRewardBlock = uint64(block.number);\\n        }\\n\\n        emit LogPoolAddition(msg.sender, _pool);\\n    }\\n\\n    /// @notice update epoch of pool\\n    /// @param _pool addresses of pool to be updated.\\n    /// @param _rewardPerBlock array of rewardPerBlock\\n    function updateEpoch(\\n        address _user,\\n        uint256 _rewardAmount,\\n        address[] memory _pool,\\n        uint256[] memory _rewardPerBlock\\n    ) external onlyRole(CONTROLLER_ROLE) {\\n        require(\\n            _rewardPerBlock.length == _pool.length,\\n            \\\"NftStaking: length of array doesn't mach\\\"\\n        );\\n\\n        for (uint256 i; i < _pool.length; i++) {\\n            NFTPoolInfo memory _poolInfo = poolInfo[_pool[i]];\\n            require(_poolInfo.exist, \\\"NftStaking: pool not exist\\\");\\n            _poolInfo.rewardPerBlock = _rewardPerBlock[i];\\n            _poolInfo.lastRewardBlock = uint64(block.number);\\n            ++_poolInfo.epoch;\\n            poolInfo[_pool[i]] = _poolInfo;\\n        }\\n\\n        REWARD_TOKEN.safeTransferFrom(_user, address(this), _rewardAmount);\\n\\n        emit EpochUpdated(msg.sender, _pool, _rewardPerBlock);\\n    }\\n\\n    /// @notice Update reward variables of the given pool.\\n    /// @param _pool The address of the pool. See `NFTPoolInfo`.\\n    /// @return _poolInfo Returns the pool that was updated.\\n    function updatePool(\\n        address _pool\\n    ) public returns (NFTPoolInfo memory _poolInfo) {\\n        _poolInfo = poolInfo[_pool];\\n        require(_poolInfo.exist, \\\"NftStaking: pool not exist\\\");\\n        uint256 _lpSupply = totalLockAmount;\\n        if (block.number > _poolInfo.lastRewardBlock) {\\n            if (_lpSupply > 0) {\\n                uint256 _blocks = block.number - _poolInfo.lastRewardBlock;\\n                uint256 _rewardAmount = (_blocks * _poolInfo.rewardPerBlock);\\n                _poolInfo.accRewardPerShare += _calAccPerShare(\\n                    _rewardAmount,\\n                    _lpSupply\\n                );\\n            }\\n            _poolInfo.lastRewardBlock = uint64(block.number);\\n            poolInfo[_pool] = _poolInfo;\\n            emit LogUpdatePool(\\n                _pool,\\n                _poolInfo.lastRewardBlock,\\n                _poolInfo.accRewardPerShare\\n            );\\n        }\\n    }\\n\\n    /// @notice Deposit NFT token.\\n    /// @param _pool The address of the pool. See `NFTPoolInfo`.\\n    function deposit(address _pool, uint256 _tokenId) external {\\n        uint256 _amount = _checkStakeAmountAndLockEnd();\\n\\n        UserInfo memory _user = userInfo[_pool][msg.sender];\\n        require(_user.tokenId == 0, \\\"NftStaking: already exist\\\");\\n\\n        NFTPoolInfo memory _poolInfo = updatePool(_pool);\\n\\n        // Effects\\n        int256 _calRewardDebt = _calAccRewardPerShare(\\n            _poolInfo.accRewardPerShare,\\n            _amount\\n        );\\n\\n        _user.amount = _amount;\\n        _user.rewardDebt += _calRewardDebt;\\n        _user.tokenId = _tokenId;\\n        _user.isPause = false;\\n\\n        userInfo[_pool][msg.sender] = _user;\\n\\n        ISynthrNFT(_pool).safeTransferFrom(msg.sender, address(this), _tokenId);\\n\\n        emit Deposit(_pool, msg.sender, _tokenId);\\n    }\\n\\n    function increaseDeposit(address _pool) external {\\n        uint256 _amount = _checkStakeAmountAndLockEnd();\\n\\n        UserInfo memory _user = userInfo[_pool][msg.sender];\\n        require(_user.tokenId != 0, \\\"NftStaking: token not deposit\\\");\\n\\n        NFTPoolInfo memory _poolInfo = updatePool(_pool);\\n\\n        uint256 _updatedAmount = _amount - _user.amount;\\n\\n        // Effects\\n        int256 _calRewardDebt = _calAccRewardPerShare(\\n            _poolInfo.accRewardPerShare,\\n            _updatedAmount\\n        );\\n\\n        _user.amount = _amount;\\n        _user.rewardDebt += _calRewardDebt;\\n        _user.isPause = false;\\n\\n        userInfo[_pool][msg.sender] = _user;\\n\\n        emit IncreaseDeposit(_pool, msg.sender, _updatedAmount);\\n    }\\n\\n    function withdraw(address _pool) external {\\n        NFTPoolInfo memory _poolInfo = updatePool(_pool);\\n        UserInfo memory _user = userInfo[_pool][msg.sender];\\n\\n        int256 _calRewardDebt = _calAccRewardPerShare(\\n            _poolInfo.accRewardPerShare,\\n            _user.amount\\n        );\\n\\n        uint256 _tokenId = _user.tokenId;\\n\\n        _user.amount = 0;\\n        _user.rewardDebt -= _calRewardDebt;\\n        _user.tokenId = 0;\\n\\n        userInfo[_pool][msg.sender] = _user;\\n\\n        // Interactions\\n        ISynthrNFT(_pool).transferFrom(\\n            address(this),\\n            msg.sender,\\n            _tokenId\\n        );\\n\\n        emit Withdraw(_pool, msg.sender, _tokenId);\\n    }\\n\\n    /// @notice Claim proceeds for transaction sender to `to`.\\n    /// @param _pool The address of the pool. See `NFTPoolInfo`.\\n    /// @param _to Receiver rewards.\\n    function claim(address _pool, address _to) external {\\n        NFTPoolInfo memory _poolInfo = updatePool(_pool);\\n        UserInfo memory _user = userInfo[_pool][msg.sender];\\n        require(!_user.isPause, \\\"NftStaking: reward paused\\\");\\n\\n        (\\n            int256 accumulatedReward,\\n            uint256 _pendingReward\\n        ) = _calAccumaltedAndPendingReward(\\n                _poolInfo.accRewardPerShare,\\n                _user.amount,\\n                _user.rewardDebt\\n            );\\n\\n        // Effects\\n        _user.rewardDebt = accumulatedReward;\\n        userInfo[_pool][msg.sender] = _user;\\n\\n        // Interactions\\n        if (_pendingReward != 0) {\\n            REWARD_TOKEN.safeTransfer(_to, _pendingReward);\\n        }\\n\\n        emit Claimed(msg.sender, _pool, _pendingReward);\\n    }\\n\\n    /// @notice Withdraw NFT token from pool and claim proceeds for transaction sender to `to`.\\n    /// @param _pool address of the pool. See `NFTPoolInfo`.\\n    /// @param _to Receiver of the LP tokens and syUSD rewards.\\n    function withdrawAndClaim(address _pool, address _to) external {\\n        NFTPoolInfo memory _poolInfo = updatePool(_pool);\\n        UserInfo memory _user = userInfo[_pool][msg.sender];\\n        require(!_user.isPause, \\\"NftStaking: reward paused\\\");\\n\\n        (\\n            int256 accumulatedReward,\\n            uint256 _pendingReward\\n        ) = _calAccumaltedAndPendingReward(\\n                _poolInfo.accRewardPerShare,\\n                _user.amount,\\n                _user.rewardDebt\\n            );\\n\\n        // Effects\\n        _user.rewardDebt =\\n            accumulatedReward -\\n            (_calAccRewardPerShare(_poolInfo.accRewardPerShare, _user.amount));\\n        \\n        _user.amount = 0;\\n        uint256 _tokenId = _user.tokenId;\\n        _user.tokenId = 0;\\n        userInfo[_pool][msg.sender] = _user;\\n\\n        // Interactions\\n        if (_pendingReward != 0) {\\n            REWARD_TOKEN.safeTransfer(_to, _pendingReward);\\n        }\\n\\n        ISynthrNFT(_pool).transferFrom(\\n            address(this),\\n            msg.sender,\\n            _tokenId\\n        );\\n\\n        emit WithdrawAndClaim(_pool, msg.sender, _pendingReward);\\n    }\\n\\n    function _pendingRewardAmount(\\n        address _pool,\\n        address _user,\\n        uint256 _blockNumber\\n    ) internal view returns (uint256 _pending) {\\n        uint256 _lpSupply = totalLockAmount;\\n        NFTPoolInfo memory _poolInfo = poolInfo[_pool];\\n        UserInfo memory _userInfo = userInfo[_pool][_user];\\n        uint256 _accRewardPerShare = _poolInfo.accRewardPerShare;\\n        if (_blockNumber > _poolInfo.lastRewardBlock && _lpSupply != 0) {\\n            uint256 _blocks = _blockNumber - (_poolInfo.lastRewardBlock);\\n            uint256 _rewardAmount = (_blocks * _poolInfo.rewardPerBlock);\\n            _accRewardPerShare += (_calAccPerShare(_rewardAmount, _lpSupply));\\n        }\\n        _pending = uint256(\\n            _calAccRewardPerShare(_accRewardPerShare, _userInfo.amount) -\\n                _userInfo.rewardDebt\\n        );\\n    }\\n\\n    function _calAccPerShare(\\n        uint256 _rewardAmount,\\n        uint256 _lpSupply\\n    ) internal pure returns (uint256) {\\n        return (_rewardAmount * ACC_REWARD_PRECISION) / _lpSupply;\\n    }\\n\\n    function _calAccRewardPerShare(\\n        uint256 _accRewardPerShare,\\n        uint256 _amount\\n    ) internal pure returns (int256) {\\n        return int256((_amount * _accRewardPerShare) / ACC_REWARD_PRECISION);\\n    }\\n\\n    function _calAccumaltedAndPendingReward(\\n        uint256 _accRewardPerShare,\\n        uint256 _amount,\\n        int256 _rewardDebt\\n    )\\n        internal\\n        pure\\n        returns (int256 _accumulatedReward, uint256 _pendingReward)\\n    {\\n        _accumulatedReward = _calAccRewardPerShare(_accRewardPerShare, _amount);\\n        _pendingReward = uint256(_accumulatedReward - (_rewardDebt));\\n    }\\n\\n    function _checkStakeAmountAndLockEnd() internal view returns(uint256) {\\n        IVotingEscrow.LockedBalance memory userBalance = votingEscrow.locked(msg.sender);\\n        uint256 _amount = uint256(userBalance.amount);\\n        require(_amount >= stakeAmount, \\\"NftStaking: low amount staked\\\");\\n        require(userBalance.end > block.timestamp, \\\"NftStaking: lock time expired\\\");\\n\\n        return uint256(userBalance.amount);\\n    }\\n}\\n\",\"keccak256\":\"0xc2c4f5ac55c302a271624b39f8e6153f193c2ef31f4c3cc1ea2ddf4df18ec294\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISynthrNFT.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.24;\\n\\ninterface ISynthrNFT {\\n\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n    function safeMint(address to, uint256 lpAmount) external returns (uint256);\\n    function safeMintBatch(address[] calldata _to, uint256[] calldata _lpAmount) external;\\n}\\n\",\"keccak256\":\"0x85ac8740d3b80310bb01250e84d959aed1b5efea0b1e1461a737306cb770408f\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IVotingEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.24;\\n\\ninterface IVotingEscrow {\\n    struct LockedBalance {\\n        int256 amount;\\n        uint256 end;\\n    }\\n    \\n    function balanceOf(address addr) external view returns (uint256);\\n    function totalSupply() external view returns (uint256);\\n    function locked(address addr) external view returns (LockedBalance memory);\\n    function token() external view returns (address);\\n    function balanceOfAtTime(address _user, uint256 _t) external view returns (uint256);\\n    function lockedEnd(address _user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x876e82008bac8adba2c0576dd96262c1f72a41e916bc85c5ae4759f5f4e66639\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0346200017957601f6200293338819003918201601f19168301916001600160401b038311848410176200017e5780849260609460405283398101031262000179578062000052620000a59262000194565b906200006f6040620000676020840162000194565b920162000194565b683635c9adc5dea000006001556001600160a01b03918216608052600380546001600160a01b03191691909216179055620001a9565b5060008051602062002913833981519152600081815260208190527fd4b1ef424fcb83dce82b8e6790fbd9bbcd76978bd34427cec18daa7ab21675448054908390557fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff90839081838580a47f139c2898040ef16910dc9f44dc697df79363da767d8bc92f2e310312b816e46d908183526001604084200192848454945580a46040516126c790816200024c82396080518181816106fa01528181610bde01528181610fc0015281816115eb01526119e60152f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036200017957565b6001600160a01b031660008181527fd4b1ef424fcb83dce82b8e6790fbd9bbcd76978bd34427cec18daa7ab21675436020526040812054909190600080516020620029138339815191529060ff166200024657808352826020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b50509056fe608080604052600436101561001357600080fd5b600090813560e01c90816301ffc9a714611b4e57508063092c5b3b14611b135780630f208beb14611a94578063150b7a0214611a1157806321c0b3421461189c5780632287b1801461171a578063248a9ca3146116ee5780632f2ff15d146116b157806336568abe14611651578063389ed267146116165780633e434e5d1461141057806343808c50146113b257806347e7ef24146111c35780634f2bfe5b1461119c57806351cff8d91461100c57806360c7dc4714610fee5780636263b46714610eb35780636e7b2c2614610db65780637b46c54f14610d4b5780638a7023f214610cf85780638a747bf31461095857806391d148541461090c578063976df6bb146108dc57806398071d3d1461071e57806399248ea7146106da5780639a7b5f111461065d5780639ced7e7614610627578063a111bab914610609578063a217fddf146105ed578063d1c6a231146105ca578063d547741f14610589578063e6039082146101f25763f71b22b81461018c57600080fd5b346101ef5760206003193601126101ef577f5ed6e55c430fc2a42200c2d6f80a56a038dbf3ca778a54686acf00ac42f2e1a66101e96004356101cc612223565b600281905560408051338152602081019290925290918291820190565b0390a180f35b80fd5b50346101ef5760406003193601126101ef5761020c611bee565b60243567ffffffffffffffff81116105855761022c903690600401611cbc565b3360009081527f2a1c876995cd4a57e905c1e774dbbf9c042071dd6e15eba11379d9c34d645f2760205260409020549092907f139c2898040ef16910dc9f44dc697df79363da767d8bc92f2e310312b816e46d9060ff161561054e575061029282611ea1565b92815b815181101561054a576001600160a01b03841683526005602052604083206001600160a01b036102c58385611dcf565b51166000526020526040600020906004604051926102e284611c1f565b60ff81541615158452600181015460208501526002810154604085015260038101546060850152015460808301526001600160a01b036003541660206001600160a01b036103308487611dcf565b51166024604051809481937f4deafcae00000000000000000000000000000000000000000000000000000000835260048301525afa90811561053f578591610509575b50421061049f5760019161041f60408801516103ad670de0b6b3a76400006103a5602086015193608087015194611e81565b049182611db6565b9060808401526001600160a01b03881687526005602052604087203360005260205260406000206103ee84511515829060ff60ff1983541691151516179055565b6020840151868201556040840151908160028201556060850151600382015560046080860151910155858452611e94565b60408201526001600160a01b03861685526005602052604085206001600160a01b0361044b8487611dcf565b51166000526020526004608060406000209261047781511515859060ff60ff1983541691151516179055565b6020810151868501556040810151600285015560608101516003850155015191015501610295565b608460405162461bcd60e51b815260206004820152602160248201527f4e66745374616b696e673a206c6f636b2074696d65206e6f742065787069726560448201527f64000000000000000000000000000000000000000000000000000000000000006064820152fd5b90506020813d602011610537575b8161052460209383611c81565b81010312610533575138610373565b8480fd5b3d9150610517565b6040513d87823e3d90fd5b8280f35b604490604051907fe2517d3f0000000000000000000000000000000000000000000000000000000082523360048301526024820152fd5b8280fd5b50346101ef5760406003193601126101ef576105c66004356105a9611c09565b90808452836020526105c1600160408620015461227f565b612324565b5080f35b50346101ef57806003193601126101ef576020604051670de0b6b3a76400008152f35b50346101ef57806003193601126101ef57602090604051908152f35b50346101ef57806003193601126101ef576020600254604051908152f35b50346101ef5760406003193601126101ef576020610655610646611bee565b61064e611c09565b43916123d4565b604051908152f35b50346101ef5760206003193601126101ef57604060c0916001600160a01b03610684611bee565b1681526004602052208054906001810154906002810154600460038301549201549267ffffffffffffffff6040519560ff81161515875260081c16602086015260408501526060840152608083015260a0820152f35b50346101ef57806003193601126101ef5760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346101ef57602090816003193601126101ef5761073a611bee565b916107436120b9565b906001600160a01b0384169182845260058252604084203360005282526040600020906040519361077385611c1f565b60ff83541615938415865260018401549181870192835260028501549360408801948552600460038701549660608a01978852015496608089019788526108985785511561082e57670de0b6b3a76400006107de60406107d660049b9c9d611ea1565b015183611e81565b048752835288885288526005815260408820903360005252610815604060002096511515879060ff60ff1983541691151516179055565b5160018601555160028501555160038401555191015580f35b6084836040519062461bcd60e51b82526004820152602260248201527f4e66745374616b696e673a20746f6b656e206964206e6f74206465706f73697460448201527f65640000000000000000000000000000000000000000000000000000000000006064820152fd5b6064836040519062461bcd60e51b82526004820152601e60248201527f4e66745374616b696e673a2075736572206973206e6f742070617573656400006044820152fd5b50346101ef5760606003193601126101ef5760206106556108fb611bee565b610903611c09565b604435916123d4565b50346101ef5760406003193601126101ef576001600160a01b036040610930611c09565b92600435815280602052209116600052602052602060ff604060002054166040519015158152f35b50346101ef5760806003193601126101ef57610972611bee565b602460443567ffffffffffffffff8111610cf457610994903690600401611cbc565b6064359167ffffffffffffffff831161053357366023840112156105335782600401356109c081611ca4565b936109ce6040519586611c81565b8185526020850183819360051b83010191368311610cf0578401905b828210610ce0575050506109fc612223565b8351835103610c7657855b8351811015610b82576001600160a01b03610a228286611dcf565b51168752600460205260408720610a8a60405191610a3f83611c65565b600481549167ffffffffffffffff60ff841615159384875260081c166020860152600181015460408601526002810154606086015260038101546080860152015460a0840152611e36565b610a948287611dcf565b51606082015267ffffffffffffffff4316602082015260a08101517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610b6f579060018093920160a08201526001600160a01b03610af48388611dcf565b511689526004602052600460a060408b2092610b2081511515859060ff60ff1983541691151516179055565b6020810151845468ffffffffffffffff00191660089190911b68ffffffffffffffff00161784556040810151868501556060810151600285015560808101516003850155015191015501610a07565b8489634e487b7160e01b81526011600452fd5b5093610bdc610c0292949394610bce6040519384926323b872dd60e01b6020850152803591309185016040919493929460608201956001600160a01b0380921683521660208201520152565b03601f198101835282611c81565b7f0000000000000000000000000000000000000000000000000000000000000000612510565b6020610c1960405193604085526040850190611df9565b91838303828501525191828152019290845b818110610c6057505050807feeed64b8fc3f300f7edc84ec3f54d79beded7fb1691c186e046c059958efb2729133930390a280f35b8251855260209485019490920191600101610c2b565b60848260286040519162461bcd60e51b8352602060048401528201527f4e66745374616b696e673a206c656e677468206f6620617272617920646f657360448201527f6e2774206d6163680000000000000000000000000000000000000000000000006064820152fd5b81358152602091820191016109ea565b8880fd5b8380fd5b50346101ef5760406003193601126101ef57610d12611bee565b6040610d1c611c09565b926001600160a01b03809316815260056020522091166000526020526020600460406000200154604051908152f35b50346101ef5760206003193601126101ef5760c0610d6f610d6a611bee565b611ea1565b60a06040519180511515835267ffffffffffffffff6020820151166020840152604081015160408401526060810151606084015260808101516080840152015160a0820152f35b50346101ef57602080600319360112610eaf5767ffffffffffffffff90600435828111610cf45791610ded84933690600401611cbc565b91610df6612223565b83914316915b8351811015610e6e576001906001600160a01b0380610e1b8388611dcf565b5116875260048452604087208360ff19825416179055610e3b8287611dcf565b511686526004835260408620805468ffffffffffffffff001916600886901b68ffffffffffffffff001617905501610dfc565b5050507f3120197cb0bf46828731cd89ce8090a06db0ca162ee78919341272fb45817b1f6040516020815280610ea933946020830190611df9565b0390a280f35b5080fd5b50346101ef57602080600319360112610eaf576001600160a01b03610ed6611bee565b1680835260058252604083203360005282527fa45a314a87668d6c2809a2171ed0778e127ed246ddf0048b36e1a7466d334a5d604060002092604051610f1b81611c1f565b60ff85541615158152600185015482820190815260028601549560408301908782526004600382015491606086019283520154916080850192835288610f6d575b50505050506040519384523393a380f35b6004938a8252888b526005875260408b20336000528752610fa3604060002096511515879060ff60ff1983541691151516179055565b51600186015551600285015551600384015551910155610fe484337f000000000000000000000000000000000000000000000000000000000000000061205d565b3880808080610f5c565b50346101ef57806003193601126101ef576020600154604051908152f35b50346101ef57602080600319360112610eaf57611027611bee565b906001600160a01b0361103983611ea1565b921690818452600581526040842033600052815260406000209260046040519161106283611c1f565b60ff8654161515835260018601549584840196808852670de0b6b3a76400006110b36002840154926040880193845260408760038701549660608b0197885201549660808a01978852015190611e81565b04976110c58351998b83528551611db6565b8452898352878a526005875260408a203360005287526110fa604060002096511515879060ff60ff1983541691151516179055565b51600186015551600285015551600384015551910155813b15610cf4576040516323b872dd60e01b8152306004820152336024820152604481018490528490818160648183885af180156111915761117d575b50507f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb906040519384523393a380f35b61118690611c51565b610cf457833861114d565b6040513d84823e3d90fd5b50346101ef57806003193601126101ef5760206001600160a01b0360035416604051908152f35b50346101ef5760406003193601126101ef576111dd611bee565b602435906111e96120b9565b906001600160a01b03811691828552602091600583526040862033600052835260406000206040519261121b84611c1f565b60ff82541615158452600182015485850190815260028301549160408601928352600384015494600460608801958787520154956080880196875261136e5760049594939291670de0b6b3a764000061127b60406107d661128695611ea1565b049083528551611d9a565b8452888352898652878a526005875260408a203360005287526112be604060002096511515879060ff60ff1983541691151516179055565b51600186015551600285015551600384015551910155813b15610cf4576040517f42842e0e000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018490528490818160648183885af180156111915761135a575b50507f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62906040519384523393a380f35b61136390611c51565b610cf457833861132a565b6064886040519062461bcd60e51b82526004820152601960248201527f4e66745374616b696e673a20616c7265616479206578697374000000000000006044820152fd5b50346101ef5760206003193601126101ef577f9ebcfad0fd447195381cabc8e99bd2c8d6f050ffbbc10538f729030481e564af6101e96004356113f3612223565b600181905560408051338152602081019290925290918291820190565b50346101ef5760406003193601126101ef5761142a611bee565b611432611c09565b6001600160a01b0361144383611ea1565b92169081845260209060058252604085203386528252604085209060405161146a81611c1f565b600460ff845416158015835260018501549486840195865260406002820154998186019a8b526114b0856003850154946060890195865201549460808801958652611d2c565b01986114ef8a518851906114e86114df8751936114d7670de0b6b3a7640000948592611e81565b049384611db6565b9d518b51611e81565b0490611db6565b83528a87528151968b8352898c526005895260408c20338d52895261152860408d2096511515879060ff60ff1983541691151516179055565b5160018601555160028501555160038401555191015584806115e5575b505084833b156101ef576040516323b872dd60e01b815230600482015233602482015260448101929092528160648183875af1801561053f576115b2575b507f7bb2f81fe27ec9003020db5e0d207b11ff9f4f7aad1380050355dfdb72967564906040519384523393a380f35b936115de7f7bb2f81fe27ec9003020db5e0d207b11ff9f4f7aad1380050355dfdb729675649295611c51565b9390611583565b61160f917f000000000000000000000000000000000000000000000000000000000000000061205d565b3884611545565b50346101ef57806003193601126101ef5760206040517f139c2898040ef16910dc9f44dc697df79363da767d8bc92f2e310312b816e46d8152f35b50346101ef5760406003193601126101ef5761166b611c09565b336001600160a01b03821603611687576105c690600435612324565b60046040517f6697b232000000000000000000000000000000000000000000000000000000008152fd5b50346101ef5760406003193601126101ef576105c66004356116d1611c09565b90808452836020526116e9600160408620015461227f565b6122a5565b50346101ef5760206003193601126101ef57600160406020926004358152808452200154604051908152f35b50346101ef57602090816003193601126101ef57611736611bee565b61173e6120b9565b6001600160a01b0382169182845260058552604084203385528552604084206040519261176a84611c1f565b60ff8254161515845260018201548785019081526002830154916040860192835260038401549460046060880195878752015495608088019687521561185857926040989995926118037f73b16f71cf3c4e1e462af5a372769931a4bb28cd70ef6791b41c16cacc89e888989693670de0b6b3a764000061127b6117ef600499611ea1565b6117fa865185611d77565b9e01518e611e81565b84528a8652888b526005875260408b20338c52875261183660408c2096511515879060ff60ff1983541691151516179055565b516001860155516002850155516003840155519101556040519384523393a380f35b60648a6040519062461bcd60e51b82526004820152601d60248201527f4e66745374616b696e673a20746f6b656e206e6f74206465706f7369740000006044820152fd5b50346101ef5760406003193601126101ef576118b6611bee565b6118be611c09565b907ff7a40077ff7a04c7e61f6f26fb13774259ddf1b6bce9ecf26a8276cdd39926836001600160a01b036118f183611ea1565b921692838552602090600582526040862033875282526040862060046040519161191a83611c1f565b60ff815416159081158452600181015497868501988952604060028301549181870192835261195f8660038601549560608a0196875201549560808901968752611d2c565b015198611984670de0b6b3a764000061197c83519c87519d611e81565b049a8b611db6565b9984528a8c526005885260408c20338d5288526119b560408d2096511515879060ff60ff1983541691151516179055565b5160018601555160028501555160038401555191015583806119e0575b50506040519283523392a380f35b611a0a917f000000000000000000000000000000000000000000000000000000000000000061205d565b38836119d2565b50346101ef5760806003193601126101ef57611a2b611bee565b50611a34611c09565b5060643567ffffffffffffffff808211610585573660238301121561058557816004013590811161058557369101602401116101ef5760206040517f150b7a02000000000000000000000000000000000000000000000000000000008152f35b50346101ef5760406003193601126101ef57604060a091611ab3611bee565b611abb611c09565b906001600160a01b0380911683526005602052838320911682526020522060ff815416906001810154906002810154600460038301549201549260405194151585526020850152604084015260608301526080820152f35b50346101ef57806003193601126101ef5760206040517f7b765e0e932d348852a6f810bfa1ab891e259123f02db8cdcde614c5702233578152f35b905034610eaf576020600319360112610eaf576004357fffffffff00000000000000000000000000000000000000000000000000000000811680910361058557602092507f7965db0b000000000000000000000000000000000000000000000000000000008114908115611bc4575b5015158152f35b7f01ffc9a70000000000000000000000000000000000000000000000000000000091501438611bbd565b600435906001600160a01b0382168203611c0457565b600080fd5b602435906001600160a01b0382168203611c0457565b60a0810190811067ffffffffffffffff821117611c3b57604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff8111611c3b57604052565b60c0810190811067ffffffffffffffff821117611c3b57604052565b90601f601f19910116810190811067ffffffffffffffff821117611c3b57604052565b67ffffffffffffffff8111611c3b5760051b60200190565b9080601f83011215611c04576020908235611cd681611ca4565b93611ce46040519586611c81565b81855260208086019260051b820101928311611c0457602001905b828210611d0d575050505090565b81356001600160a01b0381168103611c04578152908301908301611cff565b15611d3357565b606460405162461bcd60e51b815260206004820152601960248201527f4e66745374616b696e673a2072657761726420706175736564000000000000006044820152fd5b91908203918211611d8457565b634e487b7160e01b600052601160045260246000fd5b91909160008382019384129112908015821691151617611d8457565b81810392916000138015828513169184121617611d8457565b8051821015611de35760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b90815180825260208080930193019160005b828110611e19575050505090565b83516001600160a01b031685529381019392810192600101611e0b565b15611e3d57565b606460405162461bcd60e51b815260206004820152601a60248201527f4e66745374616b696e673a20706f6f6c206e6f742065786973740000000000006044820152fd5b81810292918115918404141715611d8457565b91908201809211611d8457565b9060a0916001600160a01b036040918251611ebb81611c65565b6000958187809352826020820152828682015282606082015282608082015201521690818452600460205280842090805194611ef686611c65565b82549260ff841615159687815267ffffffffffffffff9283602083019660081c1686526001830154938583019485526002840154936060840194855260046003820154916080860192835201549160a08501928352611f55859c611e36565b6002549881815116804311611f73575b505050505050505050505050565b89600496611fcb928a8e7f4884fdd3ca611190740fbfd998257f953e9e90cb530f233718a74e5b702051cb9f61202b575b50505084431684528d8152876020522096511515879060ff60ff1983541691151516179055565b511695611ff787869068ffffffffffffffff001968ffffffffffffffff0083549260081b169116179055565b51948560018601555160028501555160038401555191015582519182526020820152a2388080808080808080808080611f65565b61204761204c9261203f6120539543611d77565b905190611e81565b61239a565b8c51611e94565b8b52388a81611fa4565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000060208201526001600160a01b039290921660248301526044808301939093529181526120b7916120b2606483611c81565b612510565b565b6001600160a01b03600354166024604080928151928380927fcbf9fe5f0000000000000000000000000000000000000000000000000000000082523360048301525afa908115612218576000916121ae575b509081516001541161216b57602082015142101561212857505190565b6064905162461bcd60e51b815260206004820152601d60248201527f4e66745374616b696e673a206c6f636b2074696d6520657870697265640000006044820152fd5b6064905162461bcd60e51b815260206004820152601d60248201527f4e66745374616b696e673a206c6f7720616d6f756e74207374616b65640000006044820152fd5b8281813d8311612211575b6121c38183611c81565b81010312610eaf578251918383019083821067ffffffffffffffff8311176121fd575090602091845280518352015160208201523861210b565b80634e487b7160e01b602492526041600452fd5b503d6121b9565b82513d6000823e3d90fd5b3360009081527fd4b1ef424fcb83dce82b8e6790fbd9bbcd76978bd34427cec18daa7ab216754360205260409020547f7b765e0e932d348852a6f810bfa1ab891e259123f02db8cdcde614c5702233579060ff161561054e5750565b80600052600060205260406000203360005260205260ff604060002054161561054e5750565b90600091808352826020526001600160a01b036040842092169182845260205260ff6040842054161560001461231f57808352826020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b505090565b90600091808352826020526001600160a01b036040842092169182845260205260ff60408420541660001461231f5780835282602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4600190565b670de0b6b3a764000090818102918183041490151715611d845781156123be570490565b634e487b7160e01b600052601260045260246000fd5b906124d4670de0b6b3a7640000916124dd946002546001600160a01b038096169260009284845260046020526020604085818097209482519b6124168d611c65565b8654998d60ff8c16151590528d67ffffffffffffffff968791019b60081c168b5260018801549d8581019e8f5260a0600460028b01549a606084019b8c52600381015460808501520154910152835260056020528383209116825260205220986080600487519b6124868d611c1f565b60ff81541615158d528c600182015499602082019a8b5260028301549101528c6060600383015491015201549a01998a52519551169081811180612507575b6124e0575b5050505051611e81565b04905190611db6565b90565b6124f79261203f6124fd9697959361204793611d77565b90611e94565b90388080806124ca565b508315156124c5565b6001600160a01b031690600080826020829451910182865af13d156125f2573d9067ffffffffffffffff82116125de579061256d916040519161255d6020601f19601f8401160184611c81565b82523d84602084013e5b846125fe565b9081519182151592836125b6575b5050506125855750565b602490604051907f5274afe70000000000000000000000000000000000000000000000000000000082526004820152fd5b819293509060209181010312610eaf5760200151908115918215036101ef575038808061257b565b602483634e487b7160e01b81526041600452fd5b61256d90606090612567565b9061263d575080511561261357805190602001fd5b60046040517f1425ea42000000000000000000000000000000000000000000000000000000008152fd5b81511580612688575b61264e575090565b6024906001600160a01b03604051917f9996b315000000000000000000000000000000000000000000000000000000008352166004820152fd5b50803b1561264656fea264697066735822122075d3a1d9f255e11c7970719f28c923f2a9f8754f183a99139c1724200adbf22764736f6c634300081800337b765e0e932d348852a6f810bfa1ab891e259123f02db8cdcde614c570223357",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b600090813560e01c90816301ffc9a714611b4e57508063092c5b3b14611b135780630f208beb14611a94578063150b7a0214611a1157806321c0b3421461189c5780632287b1801461171a578063248a9ca3146116ee5780632f2ff15d146116b157806336568abe14611651578063389ed267146116165780633e434e5d1461141057806343808c50146113b257806347e7ef24146111c35780634f2bfe5b1461119c57806351cff8d91461100c57806360c7dc4714610fee5780636263b46714610eb35780636e7b2c2614610db65780637b46c54f14610d4b5780638a7023f214610cf85780638a747bf31461095857806391d148541461090c578063976df6bb146108dc57806398071d3d1461071e57806399248ea7146106da5780639a7b5f111461065d5780639ced7e7614610627578063a111bab914610609578063a217fddf146105ed578063d1c6a231146105ca578063d547741f14610589578063e6039082146101f25763f71b22b81461018c57600080fd5b346101ef5760206003193601126101ef577f5ed6e55c430fc2a42200c2d6f80a56a038dbf3ca778a54686acf00ac42f2e1a66101e96004356101cc612223565b600281905560408051338152602081019290925290918291820190565b0390a180f35b80fd5b50346101ef5760406003193601126101ef5761020c611bee565b60243567ffffffffffffffff81116105855761022c903690600401611cbc565b3360009081527f2a1c876995cd4a57e905c1e774dbbf9c042071dd6e15eba11379d9c34d645f2760205260409020549092907f139c2898040ef16910dc9f44dc697df79363da767d8bc92f2e310312b816e46d9060ff161561054e575061029282611ea1565b92815b815181101561054a576001600160a01b03841683526005602052604083206001600160a01b036102c58385611dcf565b51166000526020526040600020906004604051926102e284611c1f565b60ff81541615158452600181015460208501526002810154604085015260038101546060850152015460808301526001600160a01b036003541660206001600160a01b036103308487611dcf565b51166024604051809481937f4deafcae00000000000000000000000000000000000000000000000000000000835260048301525afa90811561053f578591610509575b50421061049f5760019161041f60408801516103ad670de0b6b3a76400006103a5602086015193608087015194611e81565b049182611db6565b9060808401526001600160a01b03881687526005602052604087203360005260205260406000206103ee84511515829060ff60ff1983541691151516179055565b6020840151868201556040840151908160028201556060850151600382015560046080860151910155858452611e94565b60408201526001600160a01b03861685526005602052604085206001600160a01b0361044b8487611dcf565b51166000526020526004608060406000209261047781511515859060ff60ff1983541691151516179055565b6020810151868501556040810151600285015560608101516003850155015191015501610295565b608460405162461bcd60e51b815260206004820152602160248201527f4e66745374616b696e673a206c6f636b2074696d65206e6f742065787069726560448201527f64000000000000000000000000000000000000000000000000000000000000006064820152fd5b90506020813d602011610537575b8161052460209383611c81565b81010312610533575138610373565b8480fd5b3d9150610517565b6040513d87823e3d90fd5b8280f35b604490604051907fe2517d3f0000000000000000000000000000000000000000000000000000000082523360048301526024820152fd5b8280fd5b50346101ef5760406003193601126101ef576105c66004356105a9611c09565b90808452836020526105c1600160408620015461227f565b612324565b5080f35b50346101ef57806003193601126101ef576020604051670de0b6b3a76400008152f35b50346101ef57806003193601126101ef57602090604051908152f35b50346101ef57806003193601126101ef576020600254604051908152f35b50346101ef5760406003193601126101ef576020610655610646611bee565b61064e611c09565b43916123d4565b604051908152f35b50346101ef5760206003193601126101ef57604060c0916001600160a01b03610684611bee565b1681526004602052208054906001810154906002810154600460038301549201549267ffffffffffffffff6040519560ff81161515875260081c16602086015260408501526060840152608083015260a0820152f35b50346101ef57806003193601126101ef5760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346101ef57602090816003193601126101ef5761073a611bee565b916107436120b9565b906001600160a01b0384169182845260058252604084203360005282526040600020906040519361077385611c1f565b60ff83541615938415865260018401549181870192835260028501549360408801948552600460038701549660608a01978852015496608089019788526108985785511561082e57670de0b6b3a76400006107de60406107d660049b9c9d611ea1565b015183611e81565b048752835288885288526005815260408820903360005252610815604060002096511515879060ff60ff1983541691151516179055565b5160018601555160028501555160038401555191015580f35b6084836040519062461bcd60e51b82526004820152602260248201527f4e66745374616b696e673a20746f6b656e206964206e6f74206465706f73697460448201527f65640000000000000000000000000000000000000000000000000000000000006064820152fd5b6064836040519062461bcd60e51b82526004820152601e60248201527f4e66745374616b696e673a2075736572206973206e6f742070617573656400006044820152fd5b50346101ef5760606003193601126101ef5760206106556108fb611bee565b610903611c09565b604435916123d4565b50346101ef5760406003193601126101ef576001600160a01b036040610930611c09565b92600435815280602052209116600052602052602060ff604060002054166040519015158152f35b50346101ef5760806003193601126101ef57610972611bee565b602460443567ffffffffffffffff8111610cf457610994903690600401611cbc565b6064359167ffffffffffffffff831161053357366023840112156105335782600401356109c081611ca4565b936109ce6040519586611c81565b8185526020850183819360051b83010191368311610cf0578401905b828210610ce0575050506109fc612223565b8351835103610c7657855b8351811015610b82576001600160a01b03610a228286611dcf565b51168752600460205260408720610a8a60405191610a3f83611c65565b600481549167ffffffffffffffff60ff841615159384875260081c166020860152600181015460408601526002810154606086015260038101546080860152015460a0840152611e36565b610a948287611dcf565b51606082015267ffffffffffffffff4316602082015260a08101517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610b6f579060018093920160a08201526001600160a01b03610af48388611dcf565b511689526004602052600460a060408b2092610b2081511515859060ff60ff1983541691151516179055565b6020810151845468ffffffffffffffff00191660089190911b68ffffffffffffffff00161784556040810151868501556060810151600285015560808101516003850155015191015501610a07565b8489634e487b7160e01b81526011600452fd5b5093610bdc610c0292949394610bce6040519384926323b872dd60e01b6020850152803591309185016040919493929460608201956001600160a01b0380921683521660208201520152565b03601f198101835282611c81565b7f0000000000000000000000000000000000000000000000000000000000000000612510565b6020610c1960405193604085526040850190611df9565b91838303828501525191828152019290845b818110610c6057505050807feeed64b8fc3f300f7edc84ec3f54d79beded7fb1691c186e046c059958efb2729133930390a280f35b8251855260209485019490920191600101610c2b565b60848260286040519162461bcd60e51b8352602060048401528201527f4e66745374616b696e673a206c656e677468206f6620617272617920646f657360448201527f6e2774206d6163680000000000000000000000000000000000000000000000006064820152fd5b81358152602091820191016109ea565b8880fd5b8380fd5b50346101ef5760406003193601126101ef57610d12611bee565b6040610d1c611c09565b926001600160a01b03809316815260056020522091166000526020526020600460406000200154604051908152f35b50346101ef5760206003193601126101ef5760c0610d6f610d6a611bee565b611ea1565b60a06040519180511515835267ffffffffffffffff6020820151166020840152604081015160408401526060810151606084015260808101516080840152015160a0820152f35b50346101ef57602080600319360112610eaf5767ffffffffffffffff90600435828111610cf45791610ded84933690600401611cbc565b91610df6612223565b83914316915b8351811015610e6e576001906001600160a01b0380610e1b8388611dcf565b5116875260048452604087208360ff19825416179055610e3b8287611dcf565b511686526004835260408620805468ffffffffffffffff001916600886901b68ffffffffffffffff001617905501610dfc565b5050507f3120197cb0bf46828731cd89ce8090a06db0ca162ee78919341272fb45817b1f6040516020815280610ea933946020830190611df9565b0390a280f35b5080fd5b50346101ef57602080600319360112610eaf576001600160a01b03610ed6611bee565b1680835260058252604083203360005282527fa45a314a87668d6c2809a2171ed0778e127ed246ddf0048b36e1a7466d334a5d604060002092604051610f1b81611c1f565b60ff85541615158152600185015482820190815260028601549560408301908782526004600382015491606086019283520154916080850192835288610f6d575b50505050506040519384523393a380f35b6004938a8252888b526005875260408b20336000528752610fa3604060002096511515879060ff60ff1983541691151516179055565b51600186015551600285015551600384015551910155610fe484337f000000000000000000000000000000000000000000000000000000000000000061205d565b3880808080610f5c565b50346101ef57806003193601126101ef576020600154604051908152f35b50346101ef57602080600319360112610eaf57611027611bee565b906001600160a01b0361103983611ea1565b921690818452600581526040842033600052815260406000209260046040519161106283611c1f565b60ff8654161515835260018601549584840196808852670de0b6b3a76400006110b36002840154926040880193845260408760038701549660608b0197885201549660808a01978852015190611e81565b04976110c58351998b83528551611db6565b8452898352878a526005875260408a203360005287526110fa604060002096511515879060ff60ff1983541691151516179055565b51600186015551600285015551600384015551910155813b15610cf4576040516323b872dd60e01b8152306004820152336024820152604481018490528490818160648183885af180156111915761117d575b50507f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb906040519384523393a380f35b61118690611c51565b610cf457833861114d565b6040513d84823e3d90fd5b50346101ef57806003193601126101ef5760206001600160a01b0360035416604051908152f35b50346101ef5760406003193601126101ef576111dd611bee565b602435906111e96120b9565b906001600160a01b03811691828552602091600583526040862033600052835260406000206040519261121b84611c1f565b60ff82541615158452600182015485850190815260028301549160408601928352600384015494600460608801958787520154956080880196875261136e5760049594939291670de0b6b3a764000061127b60406107d661128695611ea1565b049083528551611d9a565b8452888352898652878a526005875260408a203360005287526112be604060002096511515879060ff60ff1983541691151516179055565b51600186015551600285015551600384015551910155813b15610cf4576040517f42842e0e000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018490528490818160648183885af180156111915761135a575b50507f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62906040519384523393a380f35b61136390611c51565b610cf457833861132a565b6064886040519062461bcd60e51b82526004820152601960248201527f4e66745374616b696e673a20616c7265616479206578697374000000000000006044820152fd5b50346101ef5760206003193601126101ef577f9ebcfad0fd447195381cabc8e99bd2c8d6f050ffbbc10538f729030481e564af6101e96004356113f3612223565b600181905560408051338152602081019290925290918291820190565b50346101ef5760406003193601126101ef5761142a611bee565b611432611c09565b6001600160a01b0361144383611ea1565b92169081845260209060058252604085203386528252604085209060405161146a81611c1f565b600460ff845416158015835260018501549486840195865260406002820154998186019a8b526114b0856003850154946060890195865201549460808801958652611d2c565b01986114ef8a518851906114e86114df8751936114d7670de0b6b3a7640000948592611e81565b049384611db6565b9d518b51611e81565b0490611db6565b83528a87528151968b8352898c526005895260408c20338d52895261152860408d2096511515879060ff60ff1983541691151516179055565b5160018601555160028501555160038401555191015584806115e5575b505084833b156101ef576040516323b872dd60e01b815230600482015233602482015260448101929092528160648183875af1801561053f576115b2575b507f7bb2f81fe27ec9003020db5e0d207b11ff9f4f7aad1380050355dfdb72967564906040519384523393a380f35b936115de7f7bb2f81fe27ec9003020db5e0d207b11ff9f4f7aad1380050355dfdb729675649295611c51565b9390611583565b61160f917f000000000000000000000000000000000000000000000000000000000000000061205d565b3884611545565b50346101ef57806003193601126101ef5760206040517f139c2898040ef16910dc9f44dc697df79363da767d8bc92f2e310312b816e46d8152f35b50346101ef5760406003193601126101ef5761166b611c09565b336001600160a01b03821603611687576105c690600435612324565b60046040517f6697b232000000000000000000000000000000000000000000000000000000008152fd5b50346101ef5760406003193601126101ef576105c66004356116d1611c09565b90808452836020526116e9600160408620015461227f565b6122a5565b50346101ef5760206003193601126101ef57600160406020926004358152808452200154604051908152f35b50346101ef57602090816003193601126101ef57611736611bee565b61173e6120b9565b6001600160a01b0382169182845260058552604084203385528552604084206040519261176a84611c1f565b60ff8254161515845260018201548785019081526002830154916040860192835260038401549460046060880195878752015495608088019687521561185857926040989995926118037f73b16f71cf3c4e1e462af5a372769931a4bb28cd70ef6791b41c16cacc89e888989693670de0b6b3a764000061127b6117ef600499611ea1565b6117fa865185611d77565b9e01518e611e81565b84528a8652888b526005875260408b20338c52875261183660408c2096511515879060ff60ff1983541691151516179055565b516001860155516002850155516003840155519101556040519384523393a380f35b60648a6040519062461bcd60e51b82526004820152601d60248201527f4e66745374616b696e673a20746f6b656e206e6f74206465706f7369740000006044820152fd5b50346101ef5760406003193601126101ef576118b6611bee565b6118be611c09565b907ff7a40077ff7a04c7e61f6f26fb13774259ddf1b6bce9ecf26a8276cdd39926836001600160a01b036118f183611ea1565b921692838552602090600582526040862033875282526040862060046040519161191a83611c1f565b60ff815416159081158452600181015497868501988952604060028301549181870192835261195f8660038601549560608a0196875201549560808901968752611d2c565b015198611984670de0b6b3a764000061197c83519c87519d611e81565b049a8b611db6565b9984528a8c526005885260408c20338d5288526119b560408d2096511515879060ff60ff1983541691151516179055565b5160018601555160028501555160038401555191015583806119e0575b50506040519283523392a380f35b611a0a917f000000000000000000000000000000000000000000000000000000000000000061205d565b38836119d2565b50346101ef5760806003193601126101ef57611a2b611bee565b50611a34611c09565b5060643567ffffffffffffffff808211610585573660238301121561058557816004013590811161058557369101602401116101ef5760206040517f150b7a02000000000000000000000000000000000000000000000000000000008152f35b50346101ef5760406003193601126101ef57604060a091611ab3611bee565b611abb611c09565b906001600160a01b0380911683526005602052838320911682526020522060ff815416906001810154906002810154600460038301549201549260405194151585526020850152604084015260608301526080820152f35b50346101ef57806003193601126101ef5760206040517f7b765e0e932d348852a6f810bfa1ab891e259123f02db8cdcde614c5702233578152f35b905034610eaf576020600319360112610eaf576004357fffffffff00000000000000000000000000000000000000000000000000000000811680910361058557602092507f7965db0b000000000000000000000000000000000000000000000000000000008114908115611bc4575b5015158152f35b7f01ffc9a70000000000000000000000000000000000000000000000000000000091501438611bbd565b600435906001600160a01b0382168203611c0457565b600080fd5b602435906001600160a01b0382168203611c0457565b60a0810190811067ffffffffffffffff821117611c3b57604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff8111611c3b57604052565b60c0810190811067ffffffffffffffff821117611c3b57604052565b90601f601f19910116810190811067ffffffffffffffff821117611c3b57604052565b67ffffffffffffffff8111611c3b5760051b60200190565b9080601f83011215611c04576020908235611cd681611ca4565b93611ce46040519586611c81565b81855260208086019260051b820101928311611c0457602001905b828210611d0d575050505090565b81356001600160a01b0381168103611c04578152908301908301611cff565b15611d3357565b606460405162461bcd60e51b815260206004820152601960248201527f4e66745374616b696e673a2072657761726420706175736564000000000000006044820152fd5b91908203918211611d8457565b634e487b7160e01b600052601160045260246000fd5b91909160008382019384129112908015821691151617611d8457565b81810392916000138015828513169184121617611d8457565b8051821015611de35760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b90815180825260208080930193019160005b828110611e19575050505090565b83516001600160a01b031685529381019392810192600101611e0b565b15611e3d57565b606460405162461bcd60e51b815260206004820152601a60248201527f4e66745374616b696e673a20706f6f6c206e6f742065786973740000000000006044820152fd5b81810292918115918404141715611d8457565b91908201809211611d8457565b9060a0916001600160a01b036040918251611ebb81611c65565b6000958187809352826020820152828682015282606082015282608082015201521690818452600460205280842090805194611ef686611c65565b82549260ff841615159687815267ffffffffffffffff9283602083019660081c1686526001830154938583019485526002840154936060840194855260046003820154916080860192835201549160a08501928352611f55859c611e36565b6002549881815116804311611f73575b505050505050505050505050565b89600496611fcb928a8e7f4884fdd3ca611190740fbfd998257f953e9e90cb530f233718a74e5b702051cb9f61202b575b50505084431684528d8152876020522096511515879060ff60ff1983541691151516179055565b511695611ff787869068ffffffffffffffff001968ffffffffffffffff0083549260081b169116179055565b51948560018601555160028501555160038401555191015582519182526020820152a2388080808080808080808080611f65565b61204761204c9261203f6120539543611d77565b905190611e81565b61239a565b8c51611e94565b8b52388a81611fa4565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000060208201526001600160a01b039290921660248301526044808301939093529181526120b7916120b2606483611c81565b612510565b565b6001600160a01b03600354166024604080928151928380927fcbf9fe5f0000000000000000000000000000000000000000000000000000000082523360048301525afa908115612218576000916121ae575b509081516001541161216b57602082015142101561212857505190565b6064905162461bcd60e51b815260206004820152601d60248201527f4e66745374616b696e673a206c6f636b2074696d6520657870697265640000006044820152fd5b6064905162461bcd60e51b815260206004820152601d60248201527f4e66745374616b696e673a206c6f7720616d6f756e74207374616b65640000006044820152fd5b8281813d8311612211575b6121c38183611c81565b81010312610eaf578251918383019083821067ffffffffffffffff8311176121fd575090602091845280518352015160208201523861210b565b80634e487b7160e01b602492526041600452fd5b503d6121b9565b82513d6000823e3d90fd5b3360009081527fd4b1ef424fcb83dce82b8e6790fbd9bbcd76978bd34427cec18daa7ab216754360205260409020547f7b765e0e932d348852a6f810bfa1ab891e259123f02db8cdcde614c5702233579060ff161561054e5750565b80600052600060205260406000203360005260205260ff604060002054161561054e5750565b90600091808352826020526001600160a01b036040842092169182845260205260ff6040842054161560001461231f57808352826020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b505090565b90600091808352826020526001600160a01b036040842092169182845260205260ff60408420541660001461231f5780835282602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4600190565b670de0b6b3a764000090818102918183041490151715611d845781156123be570490565b634e487b7160e01b600052601260045260246000fd5b906124d4670de0b6b3a7640000916124dd946002546001600160a01b038096169260009284845260046020526020604085818097209482519b6124168d611c65565b8654998d60ff8c16151590528d67ffffffffffffffff968791019b60081c168b5260018801549d8581019e8f5260a0600460028b01549a606084019b8c52600381015460808501520154910152835260056020528383209116825260205220986080600487519b6124868d611c1f565b60ff81541615158d528c600182015499602082019a8b5260028301549101528c6060600383015491015201549a01998a52519551169081811180612507575b6124e0575b5050505051611e81565b04905190611db6565b90565b6124f79261203f6124fd9697959361204793611d77565b90611e94565b90388080806124ca565b508315156124c5565b6001600160a01b031690600080826020829451910182865af13d156125f2573d9067ffffffffffffffff82116125de579061256d916040519161255d6020601f19601f8401160184611c81565b82523d84602084013e5b846125fe565b9081519182151592836125b6575b5050506125855750565b602490604051907f5274afe70000000000000000000000000000000000000000000000000000000082526004820152fd5b819293509060209181010312610eaf5760200151908115918215036101ef575038808061257b565b602483634e487b7160e01b81526041600452fd5b61256d90606090612567565b9061263d575080511561261357805190602001fd5b60046040517f1425ea42000000000000000000000000000000000000000000000000000000008152fd5b81511580612688575b61264e575090565b6024906001600160a01b03604051917f9996b315000000000000000000000000000000000000000000000000000000008352166004820152fd5b50803b1561264656fea264697066735822122075d3a1d9f255e11c7970719f28c923f2a9f8754f183a99139c1724200adbf22764736f6c63430008180033",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "claim(address,address)": {
        "params": {
          "_pool": "The address of the pool. See `NFTPoolInfo`.",
          "_to": "Receiver rewards."
        }
      },
      "deposit(address,uint256)": {
        "params": {
          "_pool": "The address of the pool. See `NFTPoolInfo`."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "pendingReward(address,address)": {
        "params": {
          "_pool": "The address of the pool. See `poolInfo`.",
          "_user": "Address of user."
        },
        "returns": {
          "pending_": "reward for a given user."
        }
      },
      "pendingRewardAtBlock(address,address,uint256)": {
        "params": {
          "_pool": "The address of the pool. See `poolInfo`.",
          "_user": "Address of user."
        },
        "returns": {
          "pending_": "reward for a given user."
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "updateEpoch(address,uint256,address[],uint256[])": {
        "params": {
          "_pool": "addresses of pool to be updated.",
          "_rewardPerBlock": "array of rewardPerBlock"
        }
      },
      "updatePool(address)": {
        "params": {
          "_pool": "The address of the pool. See `NFTPoolInfo`."
        },
        "returns": {
          "_poolInfo": "Returns the pool that was updated."
        }
      },
      "userRewardsDebt(address,address)": {
        "details": "retuen user reward debt",
        "params": {
          "_pool": "address of pool",
          "_user": "address of user"
        }
      },
      "withdrawAndClaim(address,address)": {
        "params": {
          "_pool": "address of the pool. See `NFTPoolInfo`.",
          "_to": "Receiver of the LP tokens and syUSD rewards."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "REWARD_TOKEN()": {
        "notice": "Address of reward token contract."
      },
      "addPool(address[])": {
        "notice": "Add a new NFT pool. Can only be called by the owner."
      },
      "claim(address,address)": {
        "notice": "Claim proceeds for transaction sender to `to`."
      },
      "deposit(address,uint256)": {
        "notice": "Deposit NFT token."
      },
      "pendingReward(address,address)": {
        "notice": "View function to see pending reward of user in pool at current block."
      },
      "pendingRewardAtBlock(address,address,uint256)": {
        "notice": "View function to see pending reward of user in pool at future block."
      },
      "poolInfo(address)": {
        "notice": "Info of each pool."
      },
      "setTotalLockAmount(uint256)": {
        "notice": "set total locked token for lpSupply"
      },
      "totalLockAmount()": {
        "notice": "Total lock amount of users in VotingEscrow"
      },
      "unpauseReward(address)": {
        "notice": "user will need to call this immediately after re-createLock"
      },
      "updateEpoch(address,uint256,address[],uint256[])": {
        "notice": "update epoch of pool"
      },
      "updatePool(address)": {
        "notice": "Update reward variables of the given pool."
      },
      "userInfo(address,address)": {
        "notice": "Info of each user that stakes LP tokens."
      },
      "votingEscrow()": {
        "notice": "voting escrow instance"
      },
      "withdrawAndClaim(address,address)": {
        "notice": "Withdraw NFT token from pool and claim proceeds for transaction sender to `to`."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 26,
        "contract": "contracts/NFT-Staking/NftStaking.sol:NftStaking",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)21_storage)"
      },
      {
        "astId": 2306,
        "contract": "contracts/NFT-Staking/NftStaking.sol:NftStaking",
        "label": "stakeAmount",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2309,
        "contract": "contracts/NFT-Staking/NftStaking.sol:NftStaking",
        "label": "totalLockAmount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2313,
        "contract": "contracts/NFT-Staking/NftStaking.sol:NftStaking",
        "label": "votingEscrow",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IVotingEscrow)8117"
      },
      {
        "astId": 2319,
        "contract": "contracts/NFT-Staking/NftStaking.sol:NftStaking",
        "label": "poolInfo",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(NFTPoolInfo)2301_storage)"
      },
      {
        "astId": 2327,
        "contract": "contracts/NFT-Staking/NftStaking.sol:NftStaking",
        "label": "userInfo",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)2287_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IVotingEscrow)8117": {
        "encoding": "inplace",
        "label": "contract IVotingEscrow",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)2287_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct NftStaking.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)2287_storage)"
      },
      "t_mapping(t_address,t_struct(NFTPoolInfo)2301_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct NftStaking.NFTPoolInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(NFTPoolInfo)2301_storage"
      },
      "t_mapping(t_address,t_struct(UserInfo)2287_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct NftStaking.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)2287_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)21_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)21_storage"
      },
      "t_struct(NFTPoolInfo)2301_storage": {
        "encoding": "inplace",
        "label": "struct NftStaking.NFTPoolInfo",
        "members": [
          {
            "astId": 2290,
            "contract": "contracts/NFT-Staking/NftStaking.sol:NftStaking",
            "label": "exist",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 2292,
            "contract": "contracts/NFT-Staking/NftStaking.sol:NftStaking",
            "label": "lastRewardBlock",
            "offset": 1,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 2294,
            "contract": "contracts/NFT-Staking/NftStaking.sol:NftStaking",
            "label": "accRewardPerShare",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2296,
            "contract": "contracts/NFT-Staking/NftStaking.sol:NftStaking",
            "label": "rewardPerBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2298,
            "contract": "contracts/NFT-Staking/NftStaking.sol:NftStaking",
            "label": "currentEpoch",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2300,
            "contract": "contracts/NFT-Staking/NftStaking.sol:NftStaking",
            "label": "epoch",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(RoleData)21_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 18,
            "contract": "contracts/NFT-Staking/NftStaking.sol:NftStaking",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 20,
            "contract": "contracts/NFT-Staking/NftStaking.sol:NftStaking",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserInfo)2287_storage": {
        "encoding": "inplace",
        "label": "struct NftStaking.UserInfo",
        "members": [
          {
            "astId": 2278,
            "contract": "contracts/NFT-Staking/NftStaking.sol:NftStaking",
            "label": "isPause",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 2280,
            "contract": "contracts/NFT-Staking/NftStaking.sol:NftStaking",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2282,
            "contract": "contracts/NFT-Staking/NftStaking.sol:NftStaking",
            "label": "pendingReward",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2284,
            "contract": "contracts/NFT-Staking/NftStaking.sol:NftStaking",
            "label": "tokenId",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2286,
            "contract": "contracts/NFT-Staking/NftStaking.sol:NftStaking",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "4",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}