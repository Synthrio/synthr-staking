{
  "address": "0x478454A6FC7b71e006d59D018032CBb0799672D9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_lockType",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "exist",
              "type": "bool"
            },
            {
              "internalType": "uint64",
              "name": "lastRewardBlock",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "maxPoolSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "penalty",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "coolDownPeriod",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalStaked",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardPerBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "accRewardPerShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "epoch",
              "type": "uint256"
            }
          ],
          "internalType": "struct SynthrStaking.LockInfo[]",
          "name": "_lockInfo",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pendingRewardAmount",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "lockType",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "rewardPerBlock",
          "type": "uint256[]"
        }
      ],
      "name": "EpochUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_killed",
          "type": "bool"
        }
      ],
      "name": "KillPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "lastRewardBlock",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accRewardPerShare",
          "type": "uint256"
        }
      ],
      "name": "LogUpdatePool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_alive",
          "type": "bool"
        }
      ],
      "name": "PoolAlived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RecoveredToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "emergencyWithdrawAllowed",
          "type": "bool"
        }
      ],
      "name": "ToggleEmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "penaltyAmount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawPenalty",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACC_REWARD_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_TOKEN",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "coolDownPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lockType",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdrawAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "killPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "killed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lockInfo",
      "outputs": [
        {
          "internalType": "bool",
          "name": "exist",
          "type": "bool"
        },
        {
          "internalType": "uint64",
          "name": "lastRewardBlock",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "maxPoolSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "penalty",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "coolDownPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalStaked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardPerBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accRewardPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pausePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "penaltyAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pending_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_blockNumber",
          "type": "uint256"
        }
      ],
      "name": "pendingRewardAtBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pending_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "recoverToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revivePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lockType",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPoolSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_penalty",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_coolDownPeriod",
          "type": "uint256"
        }
      ],
      "name": "setLockInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleEmergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpausePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rewardAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_rewardPerBlock",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_lockType",
          "type": "uint256[]"
        }
      ],
      "name": "updateEpoch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lockType",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "exist",
              "type": "bool"
            },
            {
              "internalType": "uint64",
              "name": "lastRewardBlock",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "maxPoolSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "penalty",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "coolDownPeriod",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalStaked",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardPerBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "accRewardPerShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "epoch",
              "type": "uint256"
            }
          ],
          "internalType": "struct SynthrStaking.LockInfo",
          "name": "_lockInfo",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockType",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unlockEnd",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "rewardDebt",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "userRewardsDebt",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "withdrawPenalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x62b5746c1a1c53eaddd7cd03e7756384a8432d9a47cac255da3701acc511f26f",
  "receipt": {
    "to": null,
    "from": "0xD2344ce2CFEaD1cBE24e33E8301411d62946A1d2",
    "contractAddress": "0x478454A6FC7b71e006d59D018032CBb0799672D9",
    "transactionIndex": 4,
    "gasUsed": "2478776",
    "logsBloom": "0x
    "blockHash": "0xe964005ddc9fe2d6935cb01875e05af754e6ff3ec245d4d5d2bf0d1bd0e866ba",
    "transactionHash": "0x62b5746c1a1c53eaddd7cd03e7756384a8432d9a47cac255da3701acc511f26f",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 33849337,
        "transactionHash": "0x62b5746c1a1c53eaddd7cd03e7756384a8432d9a47cac255da3701acc511f26f",
        "address": "0x478454A6FC7b71e006d59D018032CBb0799672D9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d2344ce2cfead1cbe24e33e8301411d62946a1d2"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0xe964005ddc9fe2d6935cb01875e05af754e6ff3ec245d4d5d2bf0d1bd0e866ba"
      }
    ],
    "blockNumber": 33849337,
    "cumulativeGasUsed": "2898986",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD2344ce2CFEaD1cBE24e33E8301411d62946A1d2",
    "0x172160B1C9BD74D683e1EbaE0EdD96a6fEA9A6Eb",
    [
      15552000,
      23328000,
      31104000,
      46656000
    ],
    [
      {
        "maxPoolSize": "2000000000000000000000000",
        "penalty": 40,
        "coolDownPeriod": 1296000,
        "totalStaked": 0,
        "exist": true,
        "lastRewardBlock": 0,
        "rewardPerBlock": "33333000000000000000000",
        "accRewardPerShare": 0,
        "epoch": 1
      },
      {
        "maxPoolSize": "3000000000000000000000000",
        "penalty": 35,
        "coolDownPeriod": 1036800,
        "totalStaked": 0,
        "exist": true,
        "lastRewardBlock": 0,
        "rewardPerBlock": "112500000000000000000000",
        "accRewardPerShare": 0,
        "epoch": 1
      },
      {
        "maxPoolSize": "4000000000000000000000000",
        "penalty": 30,
        "coolDownPeriod": 777600,
        "totalStaked": 0,
        "exist": true,
        "lastRewardBlock": 0,
        "rewardPerBlock": "666667000000000000000000",
        "accRewardPerShare": 0,
        "epoch": 1
      },
      {
        "maxPoolSize": "5000000000000000000000000",
        "penalty": 25,
        "coolDownPeriod": 518400,
        "totalStaked": 0,
        "exist": true,
        "lastRewardBlock": 0,
        "rewardPerBlock": "1250000000000000000000000",
        "accRewardPerShare": 0,
        "epoch": 1
      }
    ]
  ],
  "numDeployments": 2,
  "solcInputHash": "0f0c3c497f4b4a1830ce76fe1a37d118",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_lockType\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"exist\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"lastRewardBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"maxPoolSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coolDownPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"internalType\":\"struct SynthrStaking.LockInfo[]\",\"name\":\"_lockInfo\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pendingRewardAmount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"lockType\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"rewardPerBlock\",\"type\":\"uint256[]\"}],\"name\":\"EpochUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_killed\",\"type\":\"bool\"}],\"name\":\"KillPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"lastRewardBlock\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"}],\"name\":\"LogUpdatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_alive\",\"type\":\"bool\"}],\"name\":\"PoolAlived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoveredToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"emergencyWithdrawAllowed\",\"type\":\"bool\"}],\"name\":\"ToggleEmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"penaltyAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawPenalty\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACC_REWARD_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"coolDownPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockType\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdrawAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"killPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"killed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exist\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"lastRewardBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"maxPoolSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coolDownPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pausePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penaltyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pending_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"pendingRewardAtBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pending_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revivePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPoolSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_penalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_coolDownPeriod\",\"type\":\"uint256\"}],\"name\":\"setLockInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleEmergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpausePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_lockType\",\"type\":\"uint256[]\"}],\"name\":\"updateEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockType\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"exist\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"lastRewardBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"maxPoolSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coolDownPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"internalType\":\"struct SynthrStaking.LockInfo\",\"name\":\"_lockInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockEnd\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"rewardDebt\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userRewardsDebt\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawPenalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"claim(address)\":{\"params\":{\"_to\":\"Receiver rewards.\"}},\"killPool()\":{\"details\":\"kill pool to restrict pool functionality, can only by called by admin\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pausePool()\":{\"details\":\"pause pool to restrict pool functionality, can only by called by admin\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pendingReward(address)\":{\"params\":{\"_user\":\"Address of user.\"},\"returns\":{\"pending_\":\"reward for a given user.\"}},\"pendingRewardAtBlock(address,uint256)\":{\"params\":{\"_user\":\"Address of user.\"},\"returns\":{\"pending_\":\"reward for a given user.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"revivePool()\":{\"details\":\"revive pool, can only by called by admin \"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpausePool()\":{\"details\":\"unpause pool, can only by called by admin \"},\"userRewardsDebt(address)\":{\"details\":\"retuen user reward debt\",\"params\":{\"_user\":\"address of user\"}},\"withdraw(address)\":{\"params\":{\"_to\":\"Receiver of the LP tokens and syUSD rewards.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"REWARD_TOKEN()\":{\"notice\":\"Address of reward token contract.\"},\"claim(address)\":{\"notice\":\"Claim proceeds for transaction sender to `to`.\"},\"deposit(uint256,uint256)\":{\"notice\":\"Deposit token.\"},\"pendingReward(address)\":{\"notice\":\"View function to see pending reward of user in pool at current block.\"},\"pendingRewardAtBlock(address,uint256)\":{\"notice\":\"View function to see pending reward of user at future block.\"},\"totalSupply()\":{\"notice\":\"Total lock amount of users\"},\"updateEpoch(address,uint256,uint256[],uint256[])\":{\"notice\":\"update epoch of pool\"},\"updatePool(uint256)\":{\"notice\":\"Update reward variables of the pool.\"},\"userInfo(address)\":{\"notice\":\"Info of each user that stakes LP tokens.\"},\"withdraw(address)\":{\"notice\":\"Withdraw  token from pool and claim proceeds for transaction sender to `to`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SynthrStaking.sol\":\"SynthrStaking\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd\",\"license\":\"MIT\"},\"contracts/SynthrStaking.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\n\\ncontract SynthrStaking is Ownable, Pausable {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Address of reward token contract.\\n    IERC20 public immutable REWARD_TOKEN;\\n\\n    uint256 public constant ACC_REWARD_PRECISION = 1e18;\\n\\n    /// @notice Info of each gauge controller user.\\n    /// `amount` LP token amount the user has provided.\\n    /// `rewardDebt` The amount of reward token entitled to the user.\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 lockType;\\n        uint256 unlockEnd;\\n        int256 rewardDebt;\\n    }\\n\\n    struct LockInfo {\\n        bool exist;\\n        uint64 lastRewardBlock;\\n        uint256 maxPoolSize;\\n        uint256 penalty;\\n        uint256 coolDownPeriod;\\n        uint256 totalStaked;\\n        uint256 rewardPerBlock;\\n        uint256 accRewardPerShare;\\n        uint256 epoch;\\n    }\\n\\n    bool public killed;\\n    bool public emergencyWithdrawAllowed;\\n    uint256 public lockTime;\\n\\n    /// @notice Total lock amount of users\\n    uint256 public totalSupply;\\n\\n    uint256 public penaltyAmount;\\n\\n\\n    /// @notice Info of each user that stakes LP tokens.\\n    mapping(address => UserInfo) public userInfo;\\n\\n    mapping(address => uint256) public coolDownPeriod;\\n\\n    mapping(uint256 => LockInfo) public lockInfo;\\n\\n    event Deposit(address indexed user, uint256 tokenId);\\n    event Withdraw(address indexed user, uint256 tokenId);\\n    event Claimed(address indexed user, uint256 pendingRewardAmount);\\n    event LogUpdatePool(uint64 lastRewardBlock, uint256 accRewardPerShare);\\n    event EpochUpdated(\\n        address indexed owner,\\n        uint256[] lockType,\\n        uint256[] rewardPerBlock\\n    );\\n    event EmergencyWithdraw(address indexed user, uint256 amount);\\n    event PoolAlived(address indexed owner, bool _alive);\\n    event KillPool(address indexed owner, bool _killed);\\n    event RecoveredToken(address indexed owner, address indexed token, uint256 amount);\\n    event WithdrawPenalty(address indexed owner, address indexed to, uint256 penaltyAmount);\\n    event ToggleEmergencyWithdraw(address indexed owner, bool emergencyWithdrawAllowed);\\n\\n    constructor(address _admin, address _rewardToken, uint256[] memory _lockType, LockInfo[] memory _lockInfo) Ownable(_admin) {\\n        require(_lockInfo.length == _lockType.length, \\\"SynthrStaking: length not equal\\\");\\n        REWARD_TOKEN = IERC20(_rewardToken);\\n\\n        for (uint256 i; i < _lockType.length; ++i) {\\n            lockInfo[_lockType[i]] = _lockInfo[i];\\n        }\\n    }\\n\\n    modifier isAlive() {\\n        require(!killed, \\\"SynthrStaking: pool is killed\\\");\\n        _;\\n    }\\n\\n    /// @dev retuen user reward debt\\n    /// @param _user address of user\\n    function userRewardsDebt(address _user) external view returns (int256) {\\n        return userInfo[_user].rewardDebt;\\n    }\\n\\n    /// @notice View function to see pending reward of user in pool at current block.\\n    /// @param _user Address of user.\\n    /// @return pending_ reward for a given user.\\n    function pendingReward(\\n        address _user\\n    ) external view returns (uint256 pending_) {\\n        pending_ = _pendingRewardAmount(_user, block.number);\\n    }\\n\\n    /// @notice View function to see pending reward of user at future block.\\n    /// @param _user Address of user.\\n    /// @return pending_ reward for a given user.\\n    function pendingRewardAtBlock(\\n        address _user,\\n        uint256 _blockNumber\\n    ) external view returns (uint256 pending_) {\\n        pending_ = _pendingRewardAmount(_user, _blockNumber);\\n    }\\n\\n    /**\\n     * @dev pause pool to restrict pool functionality, can only by called by admin\\n     */\\n    function pausePool() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev unpause pool, can only by called by admin \\n     */\\n    function unpausePool() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev kill pool to restrict pool functionality, can only by called by admin\\n     */\\n    function killPool() external onlyOwner {\\n        killed = true;\\n        emit KillPool(msg.sender, true);\\n    }\\n\\n    /**\\n     * @dev revive pool, can only by called by admin \\n     */\\n    function revivePool() external onlyOwner {\\n        killed = false;\\n        emit PoolAlived(msg.sender, false);\\n    }\\n\\n    function setLockInfo(uint256 _lockType, uint256 _maxPoolSize, uint256 _penalty, uint256 _coolDownPeriod) external onlyOwner {\\n        LockInfo memory _lockInfo = lockInfo[_lockType];\\n        _lockInfo.coolDownPeriod = _coolDownPeriod;\\n        _lockInfo.maxPoolSize = _maxPoolSize;\\n        _lockInfo.penalty = _penalty;\\n        _lockInfo.exist = true;\\n\\n        lockInfo[_lockType] = _lockInfo;\\n    }\\n\\n    function toggleEmergencyWithdraw() external onlyOwner {\\n        emergencyWithdrawAllowed = !emergencyWithdrawAllowed;\\n\\n        emit ToggleEmergencyWithdraw(msg.sender, emergencyWithdrawAllowed);\\n    }\\n\\n    /// @notice update epoch of pool\\n    function updateEpoch(\\n        address _user,\\n        uint256 _rewardAmount,\\n        uint256[] memory _rewardPerBlock,\\n        uint256[] memory _lockType\\n    ) external whenNotPaused isAlive onlyOwner {\\n        require(_rewardPerBlock.length == _lockType.length, \\\"SynthrStaking: length not equal\\\");\\n\\n        for (uint256 i; i < _rewardPerBlock.length; ++i) {\\n\\n            LockInfo memory _lockInfo = lockInfo[_lockType[i]];\\n            _lockInfo.rewardPerBlock = _rewardPerBlock[i];\\n            ++_lockInfo.epoch;\\n\\n            lockInfo[_lockType[i]] = _lockInfo;\\n        }\\n\\n        REWARD_TOKEN.safeTransferFrom(_user, address(this), _rewardAmount);\\n        emit EpochUpdated(msg.sender, _lockType,_rewardPerBlock);\\n    }\\n    \\n    /// @notice Update reward variables of the pool.\\n    function updatePool(uint256 _lockType) public returns (LockInfo memory _lockInfo) {\\n        _lockInfo = lockInfo[_lockType];\\n        require(_lockInfo.exist, \\\"SynthrStaking: lock type not exist\\\");\\n        uint256 _lpSupply = totalSupply;\\n        if (block.number > _lockInfo.lastRewardBlock) {\\n            if (_lpSupply > 0) {\\n                uint256 _blocks = block.number - _lockInfo.lastRewardBlock;\\n                uint256 _rewardAmount = (_blocks * _lockInfo.rewardPerBlock);\\n                _lockInfo.accRewardPerShare += _calAccPerShare(\\n                    _rewardAmount,\\n                    _lpSupply\\n                );\\n            }\\n            _lockInfo.lastRewardBlock = uint64(block.number);\\n\\n            emit LogUpdatePool(\\n                _lockInfo.lastRewardBlock,\\n                _lockInfo.accRewardPerShare\\n            );\\n        }\\n    }\\n\\n    /// @notice Deposit token.\\n    function deposit(uint256 _amount, uint256 _lockType) external whenNotPaused isAlive {\\n        LockInfo memory _lockInfo = updatePool(_lockType);\\n        \\n        require(_lockInfo.totalStaked + _amount <= _lockInfo.maxPoolSize, \\\"SynthrStaking: max amount limit exceed\\\");\\n\\n        UserInfo memory _user = userInfo[msg.sender];\\n        require(_user.unlockEnd == 0 || _user.unlockEnd > block.timestamp, \\\"SynthrStaking: withdraw locked token\\\");\\n\\n        require(_user.lockType == 0 || _user.lockType == _lockType, \\\"SynthrStaking: lock type differ\\\");\\n\\n        // Effects\\n        int256 _calRewardDebt = _calAccRewardPerShare(\\n            _lockInfo.accRewardPerShare,\\n            _amount\\n        );\\n\\n        if (_user.amount == 0)  {\\n            _user.unlockEnd = block.timestamp + _lockType;\\n            _user.lockType = _lockType;\\n        }\\n        _user.amount += _amount;\\n        _user.rewardDebt += _calRewardDebt;\\n        \\n\\n        userInfo[msg.sender] = _user;\\n\\n        totalSupply += _amount;\\n        _lockInfo.totalStaked += _amount;\\n        lockInfo[_lockType] = _lockInfo;\\n\\n        REWARD_TOKEN.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        emit Deposit(msg.sender, _amount);\\n    }\\n\\n    /// @notice Claim proceeds for transaction sender to `to`.\\n    /// @param _to Receiver rewards.\\n    function claim(address _to) external whenNotPaused {\\n        UserInfo memory _user = userInfo[msg.sender];\\n        LockInfo memory _lockInfo = updatePool(_user.lockType);\\n\\n        (\\n            int256 accumulatedReward,\\n            uint256 _pendingReward\\n        ) = _calAccumaltedAndPendingReward(\\n                _lockInfo.accRewardPerShare,\\n                _user.amount,\\n                _user.rewardDebt\\n            );\\n\\n        // Effects\\n        lockInfo[_user.lockType] = _lockInfo;\\n        _user.rewardDebt = accumulatedReward;\\n        userInfo[msg.sender] = _user;\\n\\n        // Interactions\\n        if (_pendingReward != 0) {\\n            REWARD_TOKEN.safeTransfer(_to, _pendingReward);\\n        }\\n\\n        emit Claimed(msg.sender, _pendingReward);\\n    }\\n\\n    function withdrawRequest() external whenNotPaused {\\n        uint256 _lockType = userInfo[msg.sender].lockType;\\n        coolDownPeriod[msg.sender] = block.timestamp + lockInfo[_lockType].coolDownPeriod;\\n    }\\n\\n    /// @notice Withdraw  token from pool and claim proceeds for transaction sender to `to`.\\n    /// @param _to Receiver of the LP tokens and syUSD rewards.\\n    function withdraw(address _to) external whenNotPaused {\\n        uint256 _coolDownPeriod = coolDownPeriod[msg.sender];\\n        require(_coolDownPeriod != 0, \\\"SynthrStaking: request for withdraw\\\");\\n        require(_coolDownPeriod < block.timestamp, \\\"SynthrStaking: lock time not end\\\");\\n        UserInfo memory _user = userInfo[msg.sender];\\n        LockInfo memory _lockInfo = updatePool(_user.lockType);\\n\\n        (\\n            ,\\n            uint256 _pendingReward\\n        ) = _calAccumaltedAndPendingReward(\\n                _lockInfo.accRewardPerShare,\\n                _user.amount,\\n                _user.rewardDebt\\n            );\\n\\n        uint256 _amount = _user.amount;\\n        totalSupply -= _amount;\\n        if (_user.unlockEnd > block.timestamp) {\\n            uint256 _lockType = _user.lockType;\\n            _amount = (_amount * (100 - lockInfo[_lockType].penalty)) / 100;\\n            penaltyAmount += _user.amount - _amount;\\n        }\\n\\n        lockInfo[_user.lockType] = _lockInfo;\\n        delete userInfo[msg.sender];\\n        coolDownPeriod[msg.sender] = 0;\\n\\n        // Interactions\\n        REWARD_TOKEN.safeTransfer(_to, _pendingReward + _amount);\\n\\n        emit Withdraw(msg.sender, _pendingReward + _amount);\\n    }\\n\\n    function emergencyWithdraw() public whenNotPaused {\\n        require(emergencyWithdrawAllowed, \\\"SynthrStaking: emergency withdraw not allowed\\\");\\n        UserInfo memory _user = userInfo[msg.sender];\\n        uint256 _amount = _user.amount;\\n\\n        delete userInfo[msg.sender];\\n\\n        totalSupply -= _amount;\\n\\n        // Interactions\\n        REWARD_TOKEN.safeTransfer(msg.sender, _amount);\\n\\n        emit EmergencyWithdraw(msg.sender, _amount);\\n    }\\n\\n    function recoverToken(address _token, address _to, uint256 _amount) external onlyOwner whenNotPaused {\\n        if (_token == address(REWARD_TOKEN)) {\\n            require(IERC20(_token).balanceOf(address(this)) - _amount >= totalSupply, \\\"SynthrStaking: can not withdraw user token\\\");\\n        }\\n        IERC20(_token).safeTransfer(_to, _amount);\\n\\n        emit RecoveredToken(msg.sender, _token, _amount);\\n    }\\n\\n    function withdrawPenalty(address _to) external onlyOwner whenNotPaused {\\n        REWARD_TOKEN.safeTransfer(_to, penaltyAmount);\\n\\n        emit WithdrawPenalty(msg.sender, _to, penaltyAmount);\\n    }\\n\\n\\n    function _pendingRewardAmount(\\n        address _user,\\n        uint256 _blockNumber\\n    ) internal view returns (uint256 _pending) {\\n        uint256 _lpSupply = totalSupply;\\n        UserInfo memory _userInfo = userInfo[_user];\\n        LockInfo memory _lockInfo = lockInfo[_userInfo.lockType];\\n        uint256 _accRewardPerShare = _lockInfo.accRewardPerShare;\\n        if (_blockNumber > _lockInfo.lastRewardBlock && _lpSupply != 0) {\\n            uint256 _blocks = _blockNumber - (_lockInfo.lastRewardBlock);\\n            uint256 _rewardAmount = (_blocks * _lockInfo.rewardPerBlock);\\n            _accRewardPerShare += (_calAccPerShare(_rewardAmount, _lpSupply));\\n        }\\n        _pending = uint256(\\n            _calAccRewardPerShare(_accRewardPerShare, _userInfo.amount) -\\n                _userInfo.rewardDebt\\n        );\\n    }\\n\\n    function _calAccPerShare(\\n        uint256 _rewardAmount,\\n        uint256 _lpSupply\\n    ) internal pure returns (uint256) {\\n        return (_rewardAmount * ACC_REWARD_PRECISION) / _lpSupply;\\n    }\\n\\n    function _calAccRewardPerShare(\\n        uint256 _accRewardPerShare,\\n        uint256 _amount\\n    ) internal pure returns (int256) {\\n        return int256((_amount * _accRewardPerShare) / ACC_REWARD_PRECISION);\\n    }\\n\\n    function _calAccumaltedAndPendingReward(\\n        uint256 _accRewardPerShare,\\n        uint256 _amount,\\n        int256 _rewardDebt\\n    )\\n        internal\\n        pure\\n        returns (int256 _accumulatedReward, uint256 _pendingReward)\\n    {\\n        _accumulatedReward = _calAccRewardPerShare(_accRewardPerShare, _amount);\\n        _pendingReward = uint256(_accumulatedReward - (_rewardDebt));\\n    }\\n\\n}\\n\",\"keccak256\":\"0xcad4e0ddcdc3bfad31b2f0c98d8d9ef29bc936bb69fa313a1e1c8854b777a682\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c8063068cc5141461186d578063093cf18f146117cf5780630d668087146117b1578063132611f014611777578063166899541461173a57806318160ddd1461171c5780631959a002146116c05780631e83409a1461151f5780631f3a0e41146114f9578063213fed14146113f05780632b6a72211461135e5780632f2c8a50146110a6578063380e687a1461104d57806351cff8d914610d1957806351eb05a614610c935780635b1a4c2414610c015780635c975abb14610bdb5780636611a38914610bb45780636775541514610b44578063715018a614610ad35780637a39b8d814610a4b5780638da5cb5b14610a2457806399248ea7146109e0578063a7229fd91461082d578063aa09d5b7146107a1578063aceda7f91461077b578063d1c6a23114610758578063db2e21bc146105f9578063e2bbb15814610283578063f218f48c14610265578063f2fde38b146101ae5763f40f0f521461017c57600080fd5b346101a95760206003193601126101a95760206101a161019a611910565b4390611e34565b604051908152f35b600080fd5b346101a95760206003193601126101a9576101c7611910565b6101cf611ca0565b6001600160a01b0380911690811561023457600054827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b60246040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260006004820152fd5b346101a95760006003193601126101a9576020600354604051908152f35b346101a95760406003193601126101a957602460043581356102a3611ce4565b6102b560ff60005460a81c16156119ff565b6102be81611ad5565b9260a08401906102cf848351611aa8565b91604086019283511061058f5733600052602093600485526040600020604051906102f982611926565b8054825260018101549087830191825260028101549160036040850192848452015492606085019384528015908115610585575b501561051d578051858115918215610513575b5050156104d05760e08b0196670de0b6b3a764000061036089518d611ac2565b04908551156104bc575b6103758c8751611aa8565b86528451600083820193841291129080158216911516176104a85750837fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9b9c969360079996936003936101009a97523360005260048d52604060002094518555516001850155516002840155519101556103f28a600254611aa8565b6002556104008a8351611aa8565b82526000526006875260406000209583511515875468ffffffffffffffffff1960ff68ffffffffffffffff008c89015160081b169316911617178755516001870155606083015160028701556080830151600387015551600486015560c08201516005860155516006850155015191015561049d8330337f0000000000000000000000000000000000000000000000000000000000000000611d8b565b6040519283523392a2005b634e487b7160e01b60005260116004526000fd5b6104c68742611aa8565b845286835261036a565b606489601f896040519262461bcd60e51b845260048401528201527f53796e7468725374616b696e673a206c6f636b207479706520646966666572006044820152fd5b149050858d610340565b608489886040519162461bcd60e51b83526004830152808201527f53796e7468725374616b696e673a207769746864726177206c6f636b6564207460448201527f6f6b656e000000000000000000000000000000000000000000000000000000006064820152fd5b905042108c61032d565b60848260266040519162461bcd60e51b8352602060048401528201527f53796e7468725374616b696e673a206d617820616d6f756e74206c696d69742060448201527f65786365656400000000000000000000000000000000000000000000000000006064820152fd5b346101a95760006003193601126101a957610612611ce4565b60ff60005460b01c16156106ee57336000526004602052604060002060405161063a81611926565b6060600383549384845260018101546020850152600281015460408501520154910152336000526004602052610686604060002060036000918281558260018201558260028201550155565b61069281600254611ab5565b6002556106c081337f0000000000000000000000000000000000000000000000000000000000000000611d36565b6040519081527f5fafa99d0643513820be26656b45130b01e1c03062e1266bf36f88cbd3bd969560203392a2005b608460405162461bcd60e51b815260206004820152602d60248201527f53796e7468725374616b696e673a20656d657267656e6379207769746864726160448201527f77206e6f7420616c6c6f776564000000000000000000000000000000000000006064820152fd5b346101a95760006003193601126101a9576020604051670de0b6b3a76400008152f35b346101a95760006003193601126101a957602060ff60005460b01c166040519015158152f35b346101a95760006003193601126101a9576107ba611ca0565b6107c2611ce4565b740100000000000000000000000000000000000000007fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff60005416176000557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a1005b346101a95760606003193601126101a957610846611910565b6001600160a01b039060243582811681036101a957829160443592839161086b611ca0565b610873611ce4565b16937f00000000000000000000000000000000000000000000000000000000000000001684146108d6575b6108a89184611d36565b6040519081527f76fb5f9555be8170fef33d7b413bcbe740a6a96cd162b1234b602329b0c84e3260203392a3005b506040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152602081602481875afa80156109d457839060009061099e575b6109269250611ab5565b60025411610934578161089e565b608460405162461bcd60e51b815260206004820152602a60248201527f53796e7468725374616b696e673a2063616e206e6f742077697468647261772060448201527f7573657220746f6b656e000000000000000000000000000000000000000000006064820152fd5b50506020813d6020116109cc575b816109b960209383611975565b810103126101a95782610926915161091c565b3d91506109ac565b6040513d6000823e3d90fd5b346101a95760006003193601126101a95760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b346101a95760006003193601126101a95760206001600160a01b0360005416604051908152f35b346101a95760006003193601126101a957610a64611ca0565b75010000000000000000000000000000000000000000007fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff6000541617600055604051600181527f7c952f2e528aa25b4eaf8b6c07af29184b27ce591295e543ced0a27b167dc79460203392a2005b346101a95760006003193601126101a957610aec611ca0565b60006001600160a01b0381547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346101a95760006003193601126101a957610b5d611ca0565b7fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff60005416600055604051600081527f77337fcf1b48e6e024b256962b66c49de98c9f606b2cd9937cc0edbc7a0fb70960203392a2005b346101a95760406003193601126101a95760206101a1610bd2611910565b60243590611e34565b346101a95760006003193601126101a957602060ff60005460a01c166040519015158152f35b346101a95760206003193601126101a9576004356000526006602052610120604060002080549060018101549060028101546003820154600483015490600584015492600760068601549501549567ffffffffffffffff6040519860ff811615158a5260081c16602089015260408801526060870152608086015260a085015260c084015260e0830152610100820152f35b346101a95760206003193601126101a957610120610cb2600435611ad5565b6040519080511515825267ffffffffffffffff602082015116602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008091015190820152f35b346101a9576020806003193601126101a957610d33611910565b610d3b611ce4565b33600052600582526040600020548015610fe357421115610fa057336000526004825260406000209060405190610d7182611926565b825482526001830154848301818152610da160036002870154966040870197885201549260608601938452611ad5565b90610dc860e0830193670de0b6b3a7640000610dc286518951935193611ac2565b04611d1d565b94805196610dd888600254611ab5565b60025542905111610f05575b5092610ef994926007610100610ef4947f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436499975160005260068b52604060002093815115158c68ffffffffffffffffff1960ff68ffffffffffffffff0089549387015160081b16931691161717855560408201516001860155606082015160028601556080820151600386015560a0820151600486015560c0820151600586015551600685015501519101553360005260048752610eb8604060002060036000918281558260018201558260028201550155565b6005875260006040812055610ecd8484611aa8565b907f0000000000000000000000000000000000000000000000000000000000000000611d36565b611aa8565b916040519283523392a2005b939091949282516000526006885260026040600020015460640360648111610f8a57610100610ef997610ef495610f78610f706064610f676007977f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649f611ac2565b04809b51611ab5565b600354611aa8565b60035594979950945050509294610de4565b634e487b7160e01b600052601160045260246000fd5b6064826040519062461bcd60e51b825280600483015260248201527f53796e7468725374616b696e673a206c6f636b2074696d65206e6f7420656e646044820152fd5b6084836040519062461bcd60e51b82526004820152602360248201527f53796e7468725374616b696e673a207265717565737420666f7220776974686460448201527f72617700000000000000000000000000000000000000000000000000000000006064820152fd5b346101a95760006003193601126101a957611066611ce4565b336000526004602052600160406000200154600052600660205261109260036040600020015442611aa8565b336000526005602052604060002055600080f35b346101a95760806003193601126101a9576110bf611910565b60443567ffffffffffffffff81116101a9576110df903690600401611998565b9060643567ffffffffffffffff81116101a957611100903690600401611998565b91611109611ce4565b61111b60ff60005460a81c16156119ff565b611123611ca0565b805183510361131a5760005b815181101561129b576111428185611a4a565b51600052600660205260406000209060076040519261116084611958565b67ffffffffffffffff815460ff81161515865260081c166020850152600181015460408501526002810154606085015260038101546080850152600481015460a0850152600581015460c0850152600681015460e085015201546101008301526111ca8184611a4a565b5160c0830152610100820151917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8314610f8a5760018093016101008201526112138287611a4a565b516000526006602052600761010060406000209280511515845468ffffffffffffffffff1960ff68ffffffffffffffff00602086015160081b169316911617178455604081015186850155606081015160028501556080810151600385015560a0810151600485015560c0810151600585015560e0810151600685015501519101550161112f565b507f1762287875469c878ab6651d1ec276953f5f0ef1777bc29cf75ecd623a40bce2611306846112ef60243530877f0000000000000000000000000000000000000000000000000000000000000000611d8b565b611315604051928392604084526040840190611a74565b82810360208401523395611a74565b0390a2005b606460405162461bcd60e51b815260206004820152601f60248201527f53796e7468725374616b696e673a206c656e677468206e6f7420657175616c006044820152fd5b346101a95760206003193601126101a957611377611910565b61137f611ca0565b611387611ce4565b6113b4600354827f0000000000000000000000000000000000000000000000000000000000000000611d36565b6001600160a01b036003549160405192835216907f16af3e69b2cf2824289274389004b89c1da6d33361d7379ad0631f14b9869e8160203392a3005b346101a95760806003193601126101a95760043561140c611ca0565b80600052600660205260076040600020916040519261142a84611958565b805467ffffffffffffffff602086019160081c1681526040850160608601608087019060048501549260a0890193845260058601549460c08a019586528860068801549760e08c019889520154976101008b0198895260643585526024358352604435845260018b5260005260066020526040600020995115159068ffffffffffffffffff1960ff68ffffffffffffffff008d54935160081b16931691161717895551600189015551600288015551600387015551600486015551600585015551600684015551910155600080f35b346101a95760006003193601126101a957602060ff60005460a81c166040519015158152f35b346101a9576020806003193601126101a9577fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a61155a611910565b91611563611ce4565b336000526004815260406000209260405161157d81611926565b8454815260036001860154848301968188526115af836002830154926040870193845201549260608601938452611ad5565b9760e0890180519060076101006115de670de0b6b3a76400006115d68b51968a5197611ac2565b049485611d1d565b9c855160005260068c52604060002093815115158d68ffffffffffffffffff1960ff68ffffffffffffffff0089549387015160081b169316911617178555604082015160018601556060820151600286015560808201518a86015560a0820151600486015560c0820151600586015551600685015501519101558352336000526004875260406000209451855551600185015551600284015551910155838061168f575b50506040519283523392a2005b6116b9917f0000000000000000000000000000000000000000000000000000000000000000611d36565b8383611682565b346101a95760206003193601126101a9576001600160a01b036116e1611910565b166000526004602052608060406000208054906001810154906003600282015491015491604051938452602084015260408301526060820152f35b346101a95760006003193601126101a9576020600254604051908152f35b346101a95760206003193601126101a9576001600160a01b0361175b611910565b1660005260046020526020600360406000200154604051908152f35b346101a95760206003193601126101a9576001600160a01b03611798611910565b1660005260056020526020604060002054604051908152f35b346101a95760006003193601126101a9576020600154604051908152f35b346101a95760006003193601126101a9576117e8611ca0565b6000547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff76ff0000000000000000000000000000000000000000000060ff8360b01c161560b01b169116178060005560ff6040519160b01c16151581527f492bd43563eee0c236005121ea0ff9fc5c6ab4942b84402d67fac942013cdbb160203392a2005b346101a95760006003193601126101a957611886611ca0565b60005460ff8160a01c16156118e6577fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff166000557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a1005b60046040517f8dfc202b000000000000000000000000000000000000000000000000000000008152fd5b600435906001600160a01b03821682036101a957565b6080810190811067ffffffffffffffff82111761194257604052565b634e487b7160e01b600052604160045260246000fd5b610120810190811067ffffffffffffffff82111761194257604052565b90601f601f19910116810190811067ffffffffffffffff82111761194257604052565b81601f820112156101a95780359160209167ffffffffffffffff8411611942578360051b90604051946119cd85840187611975565b855283808601928201019283116101a9578301905b8282106119f0575050505090565b813581529083019083016119e2565b15611a0657565b606460405162461bcd60e51b815260206004820152601d60248201527f53796e7468725374616b696e673a20706f6f6c206973206b696c6c65640000006044820152fd5b8051821015611a5e5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b90815180825260208080930193019160005b828110611a94575050505090565b835185529381019392810192600101611a86565b91908201809211610f8a57565b91908203918211610f8a57565b81810292918115918404141715610f8a57565b9060409182805191611ae683611958565b60009081845281602085015281838501528160608501528160808501528160a08501528160c08501528160e08501528161010080950152815260066020522092805193611b3285611958565b80549060ff821615958615815267ffffffffffffffff9081602082019460081c1684526001830154858201526002830154606082015260038301546080820152600483015460a082015260058301549560c08201968752600760068501549460e0840195865201549082015296611c3757600254948184511690814311611bbd575b50505050505050565b867ff7425522fc94826010fa0fd4e6e2777d8d7e42dcfe5534d29eaef7c25faba85197611c05575b50505043168092525182519182526020820152a138808080808080611bb4565b611c21611c2692611c19611c2d9543611ab5565b905190611ac2565b611dfa565b8351611aa8565b8252388080611be5565b6084845162461bcd60e51b815260206004820152602260248201527f53796e7468725374616b696e673a206c6f636b2074797065206e6f742065786960448201527f73740000000000000000000000000000000000000000000000000000000000006064820152fd5b6001600160a01b03600054163303611cb457565b60246040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152fd5b60ff60005460a01c16611cf357565b60046040517fd93c0665000000000000000000000000000000000000000000000000000000008152fd5b81810392916000138015828513169184121617610f8a57565b611d89926001600160a01b03604051937fa9059cbb000000000000000000000000000000000000000000000000000000006020860152166024840152604483015260448252611d8482611926565b611f6c565b565b9290604051927f23b872dd0000000000000000000000000000000000000000000000000000000060208501526001600160a01b03809216602485015216604483015260648201526064815260a081019181831067ffffffffffffffff84111761194257611d8992604052611f6c565b670de0b6b3a764000090818102918183041490151715610f8a578115611e1e570490565b634e487b7160e01b600052601260045260246000fd5b670de0b6b3a7640000611f2e611f37936001600160a01b03600254941660005260046020526040938460002094805191611e6d83611926565b8654835260036001880154978860208601526002810154848601520154966060840197885260005260066020528160002091805190611eab82611958565b67ffffffffffffffff845460ff81161515845260081c16908160208401526001850154908301526002840154606083015260038401546080830152600484015460a083015260058401549160c0810192835261010060076006870154968760e08501520154910152839581811180611f63575b611f3a575b505050505051611ac2565b04905190611d1d565b90565b611f5895965091611c19611c2192611f529594611ab5565b90611aa8565b903880808080611f23565b50831515611f1e565b6001600160a01b031690600080826020829451910182865af13d15612055573d9067ffffffffffffffff82116120415790611fc99160405191611fb96020601f19601f8401160184611975565b82523d84602084013e5b84612061565b908151918215159283612012575b505050611fe15750565b602490604051907f5274afe70000000000000000000000000000000000000000000000000000000082526004820152fd5b81929350906020918101031261203d57602001519081159182150361203a5750388080611fd7565b80fd5b5080fd5b602483634e487b7160e01b81526041600452fd5b611fc990606090611fc3565b906120a0575080511561207657805190602001fd5b60046040517f1425ea42000000000000000000000000000000000000000000000000000000008152fd5b815115806120eb575b6120b1575090565b6024906001600160a01b03604051917f9996b315000000000000000000000000000000000000000000000000000000008352166004820152fd5b50803b156120a956fea26469706673582212203507b25e6283f19083a08f58f67f6880faa93836ceaf13a41e4765d5d90f32f464736f6c63430008180033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "claim(address)": {
        "params": {
          "_to": "Receiver rewards."
        }
      },
      "killPool()": {
        "details": "kill pool to restrict pool functionality, can only by called by admin"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pausePool()": {
        "details": "pause pool to restrict pool functionality, can only by called by admin"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pendingReward(address)": {
        "params": {
          "_user": "Address of user."
        },
        "returns": {
          "pending_": "reward for a given user."
        }
      },
      "pendingRewardAtBlock(address,uint256)": {
        "params": {
          "_user": "Address of user."
        },
        "returns": {
          "pending_": "reward for a given user."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "revivePool()": {
        "details": "revive pool, can only by called by admin "
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpausePool()": {
        "details": "unpause pool, can only by called by admin "
      },
      "userRewardsDebt(address)": {
        "details": "retuen user reward debt",
        "params": {
          "_user": "address of user"
        }
      },
      "withdraw(address)": {
        "params": {
          "_to": "Receiver of the LP tokens and syUSD rewards."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "REWARD_TOKEN()": {
        "notice": "Address of reward token contract."
      },
      "claim(address)": {
        "notice": "Claim proceeds for transaction sender to `to`."
      },
      "deposit(uint256,uint256)": {
        "notice": "Deposit token."
      },
      "pendingReward(address)": {
        "notice": "View function to see pending reward of user in pool at current block."
      },
      "pendingRewardAtBlock(address,uint256)": {
        "notice": "View function to see pending reward of user at future block."
      },
      "totalSupply()": {
        "notice": "Total lock amount of users"
      },
      "updateEpoch(address,uint256,uint256[],uint256[])": {
        "notice": "update epoch of pool"
      },
      "updatePool(uint256)": {
        "notice": "Update reward variables of the pool."
      },
      "userInfo(address)": {
        "notice": "Info of each user that stakes LP tokens."
      },
      "withdraw(address)": {
        "notice": "Withdraw  token from pool and claim proceeds for transaction sender to `to`."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/SynthrStaking.sol:SynthrStaking",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 843,
        "contract": "contracts/SynthrStaking.sol:SynthrStaking",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1002,
        "contract": "contracts/SynthrStaking.sol:SynthrStaking",
        "label": "killed",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1004,
        "contract": "contracts/SynthrStaking.sol:SynthrStaking",
        "label": "emergencyWithdrawAllowed",
        "offset": 22,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1006,
        "contract": "contracts/SynthrStaking.sol:SynthrStaking",
        "label": "lockTime",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1009,
        "contract": "contracts/SynthrStaking.sol:SynthrStaking",
        "label": "totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1011,
        "contract": "contracts/SynthrStaking.sol:SynthrStaking",
        "label": "penaltyAmount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1017,
        "contract": "contracts/SynthrStaking.sol:SynthrStaking",
        "label": "userInfo",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(UserInfo)981_storage)"
      },
      {
        "astId": 1021,
        "contract": "contracts/SynthrStaking.sol:SynthrStaking",
        "label": "coolDownPeriod",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1026,
        "contract": "contracts/SynthrStaking.sol:SynthrStaking",
        "label": "lockInfo",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(LockInfo)1000_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(UserInfo)981_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SynthrStaking.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)981_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(LockInfo)1000_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SynthrStaking.LockInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(LockInfo)1000_storage"
      },
      "t_struct(LockInfo)1000_storage": {
        "encoding": "inplace",
        "label": "struct SynthrStaking.LockInfo",
        "members": [
          {
            "astId": 983,
            "contract": "contracts/SynthrStaking.sol:SynthrStaking",
            "label": "exist",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 985,
            "contract": "contracts/SynthrStaking.sol:SynthrStaking",
            "label": "lastRewardBlock",
            "offset": 1,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 987,
            "contract": "contracts/SynthrStaking.sol:SynthrStaking",
            "label": "maxPoolSize",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 989,
            "contract": "contracts/SynthrStaking.sol:SynthrStaking",
            "label": "penalty",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 991,
            "contract": "contracts/SynthrStaking.sol:SynthrStaking",
            "label": "coolDownPeriod",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 993,
            "contract": "contracts/SynthrStaking.sol:SynthrStaking",
            "label": "totalStaked",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 995,
            "contract": "contracts/SynthrStaking.sol:SynthrStaking",
            "label": "rewardPerBlock",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 997,
            "contract": "contracts/SynthrStaking.sol:SynthrStaking",
            "label": "accRewardPerShare",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 999,
            "contract": "contracts/SynthrStaking.sol:SynthrStaking",
            "label": "epoch",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(UserInfo)981_storage": {
        "encoding": "inplace",
        "label": "struct SynthrStaking.UserInfo",
        "members": [
          {
            "astId": 974,
            "contract": "contracts/SynthrStaking.sol:SynthrStaking",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 976,
            "contract": "contracts/SynthrStaking.sol:SynthrStaking",
            "label": "lockType",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 978,
            "contract": "contracts/SynthrStaking.sol:SynthrStaking",
            "label": "unlockEnd",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 980,
            "contract": "contracts/SynthrStaking.sol:SynthrStaking",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "3",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}