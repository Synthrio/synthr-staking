{
  "address": "0xa2669806DFd1057e277Df54aC65F5DFf53CF2EBa",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gaugeController",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_version",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "prevController",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newController",
          "type": "address"
        }
      ],
      "name": "ControllerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "locktime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_type",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGauge",
          "type": "address"
        }
      ],
      "name": "GaugeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "OwnershipApplied",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "OwnershipCommited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        }
      ],
      "name": "Supply",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newSmartWalletChecker",
          "type": "address"
        }
      ],
      "name": "WalletCommited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timeStamp",
          "type": "uint256"
        }
      ],
      "name": "Withdrew",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CONTROLLER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CREATE_LOCK_TYPE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEPOSIT_FOR_TYPE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INCREASE_LOCK_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INCREASE_UNLOCK_TIME",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INCREASE_UNLOCK_TIME_AND_LOCK_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAXTIME",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WEEK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "applySmartWalletChecker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "applyTransferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_t",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_block",
          "type": "uint256"
        }
      ],
      "name": "balanceOfAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newController",
          "type": "address"
        }
      ],
      "name": "changeController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkpoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "commitSmartWalletChecker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "commitTransferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unlockTime",
          "type": "uint256"
        }
      ],
      "name": "createLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "createLockTs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "depositFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "futureAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "futureSmartWalletChecker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gaugeController",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getLastUserSlope",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "increaseAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unlockTime",
          "type": "uint256"
        }
      ],
      "name": "increaseAmountAndUnlockTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_unlockTime",
          "type": "uint256"
        }
      ],
      "name": "increaseUnlockTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "locked",
      "outputs": [
        {
          "internalType": "int256",
          "name": "amount",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "lockedEnd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pointHistory",
      "outputs": [
        {
          "internalType": "int256",
          "name": "bias",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "slope",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "timeStamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newController",
          "type": "address"
        }
      ],
      "name": "setGaugeController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "slopeChanges",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "smartWalletChecker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_t",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_block",
          "type": "uint256"
        }
      ],
      "name": "totalSupplyAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transfersEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userPointEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userPointHistory",
      "outputs": [
        {
          "internalType": "int256",
          "name": "bias",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "slope",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "timeStamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_idx",
          "type": "uint256"
        }
      ],
      "name": "userPointHistoryTs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x29b69a8641101784083d827704069b57c3c72ae9ca85d1fc7aade53737b3623e",
  "receipt": {
    "to": null,
    "from": "0xD2344ce2CFEaD1cBE24e33E8301411d62946A1d2",
    "contractAddress": "0xa2669806DFd1057e277Df54aC65F5DFf53CF2EBa",
    "transactionIndex": 1,
    "gasUsed": "8213068",
    "logsBloom": "0x
    "blockHash": "0x0a46db26d420a585f12e8285a2a71a7d2cb67217aceb36545571c507badd124d",
    "transactionHash": "0x29b69a8641101784083d827704069b57c3c72ae9ca85d1fc7aade53737b3623e",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 25739928,
        "transactionHash": "0x29b69a8641101784083d827704069b57c3c72ae9ca85d1fc7aade53737b3623e",
        "address": "0xa2669806DFd1057e277Df54aC65F5DFf53CF2EBa",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d2344ce2cfead1cbe24e33e8301411d62946a1d2",
          "0x000000000000000000000000d2344ce2cfead1cbe24e33e8301411d62946a1d2"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x0a46db26d420a585f12e8285a2a71a7d2cb67217aceb36545571c507badd124d"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 25739928,
        "transactionHash": "0x29b69a8641101784083d827704069b57c3c72ae9ca85d1fc7aade53737b3623e",
        "address": "0xa2669806DFd1057e277Df54aC65F5DFf53CF2EBa",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x7b765e0e932d348852a6f810bfa1ab891e259123f02db8cdcde614c570223357",
          "0x000000000000000000000000d2344ce2cfead1cbe24e33e8301411d62946a1d2",
          "0x000000000000000000000000d2344ce2cfead1cbe24e33e8301411d62946a1d2"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x0a46db26d420a585f12e8285a2a71a7d2cb67217aceb36545571c507badd124d"
      }
    ],
    "blockNumber": 25739928,
    "cumulativeGasUsed": "8213068",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x172160B1C9BD74D683e1EbaE0EdD96a6fEA9A6Eb",
    "0xb29Fa09BBd3e083839082611a8a9eE16b4150855",
    "Vote Escrowed SYNTH",
    "veSYNTH",
    "1"
  ],
  "numDeployments": 1,
  "solcInputHash": "6b67800a0edba0eb546cc144245ebead",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gaugeController\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_version\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevController\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"ControllerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"locktime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGauge\",\"type\":\"address\"}],\"name\":\"GaugeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"OwnershipApplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"OwnershipCommited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"Supply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSmartWalletChecker\",\"type\":\"address\"}],\"name\":\"WalletCommited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"Withdrew\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONTROLLER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CREATE_LOCK_TYPE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSIT_FOR_TYPE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INCREASE_LOCK_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INCREASE_UNLOCK_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INCREASE_UNLOCK_TIME_AND_LOCK_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXTIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WEEK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"applySmartWalletChecker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"applyTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_t\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newController\",\"type\":\"address\"}],\"name\":\"changeController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"commitSmartWalletChecker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"commitTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlockTime\",\"type\":\"uint256\"}],\"name\":\"createLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"createLockTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"futureAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"futureSmartWalletChecker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gaugeController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getLastUserSlope\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlockTime\",\"type\":\"uint256\"}],\"name\":\"increaseAmountAndUnlockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unlockTime\",\"type\":\"uint256\"}],\"name\":\"increaseUnlockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"lockedEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pointHistory\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"bias\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"slope\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"timeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newController\",\"type\":\"address\"}],\"name\":\"setGaugeController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slopeChanges\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smartWalletChecker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_t\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transfersEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userPointEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userPointHistory\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"bias\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"slope\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"timeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"userPointHistoryTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VotingEscrow.sol\":\"VotingEscrow\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/VotingEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\nimport \\\"./interfaces/ISmartWalletChecker.sol\\\";\\nimport \\\"./interfaces/IGaugeController.sol\\\";\\n\\ncontract VotingEscrow is AccessControl, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public constant DEPOSIT_FOR_TYPE = 0;\\n    uint256 public constant CREATE_LOCK_TYPE = 1;\\n    uint256 public constant INCREASE_LOCK_AMOUNT = 2;\\n    uint256 public constant INCREASE_UNLOCK_TIME = 3;\\n    uint256 public constant INCREASE_UNLOCK_TIME_AND_LOCK_AMOUNT = 4;\\n\\n    uint256 public constant WEEK = 7 * 86400; // all future times are rounded by week\\n    uint256 public constant MAXTIME = 4 * 365 * 86400; // 4 years\\n    uint256 public constant MULTIPLIER = 10 ** 18;\\n\\n    bytes32 public constant CONTROLLER_ROLE = keccak256(\\\"CONTROLLER_ROLE\\\");\\n\\n    struct Point {\\n        int256 bias;\\n        int256 slope;\\n        uint256 timeStamp;\\n        uint256 blockNumber;\\n    }\\n\\n    struct LockedBalance {\\n        int256 amount;\\n        uint256 end;\\n    }\\n\\n    string public name;\\n    string public symbol;\\n    string public version;\\n\\n    uint256 public decimals;\\n    uint256 public supply;\\n    uint256 public epoch;\\n\\n    address public futureSmartWalletChecker;\\n    address public smartWalletChecker;\\n\\n    address public admin;\\n    address public futureAdmin;\\n\\n    address public token;\\n    address public controller;\\n    address public gaugeController;\\n\\n    bool public transfersEnabled;\\n\\n    Point[100000000000000000000000000000] public pointHistory;\\n\\n    mapping(address => LockedBalance) public locked;\\n    mapping(address => uint256) public createLockTs;\\n    mapping(address => Point[1000000000]) public userPointHistory;\\n    mapping(address => uint256) public userPointEpoch;\\n    mapping(uint256 => uint256) public slopeChanges;\\n\\n    event OwnershipCommited(address admin);\\n    event OwnershipApplied(address admin);\\n    event WalletCommited(address newSmartWalletChecker);\\n    event ControllerChanged(address indexed prevController, address indexed newController);\\n    event Deposited(address indexed provider, uint256 value, uint256 indexed locktime, uint256 _type, uint256 ts);\\n    event Withdrew(address indexed provider, uint256 value, uint256 timeStamp);\\n    event Supply(uint256 prevSupply, uint256 supply);\\n    event GaugeUpdated(address indexed newGauge);\\n\\n    constructor(\\n        address _tokenAddr,\\n        address _gaugeController,\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _version\\n    ) {\\n        admin = msg.sender;\\n        token = _tokenAddr;\\n        gaugeController = _gaugeController;\\n        pointHistory[0].blockNumber = block.number;\\n        pointHistory[0].timeStamp = block.timestamp;\\n        controller = msg.sender;\\n        transfersEnabled = true;\\n\\n        uint256 _decimals = ERC20(_tokenAddr).decimals();\\n        require(_decimals <= 255);\\n        decimals = _decimals;\\n\\n        name = _name;\\n        symbol = _symbol;\\n        version = _version;\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(CONTROLLER_ROLE, msg.sender);\\n    }\\n\\n    function getLastUserSlope(address _user) external view returns (int256) {\\n        uint256 uepoch = userPointEpoch[_user];\\n        return userPointHistory[_user][uepoch].slope;\\n    }\\n\\n    function userPointHistoryTs(address _user, uint256 _idx) external view returns (uint256) {\\n        return userPointHistory[_user][_idx].timeStamp;\\n    }\\n\\n    function lockedEnd(address _user) external view returns (uint256) {\\n        return locked[_user].end;\\n    }\\n\\n    function balanceOf(address _user, uint256 _t) external view returns (uint256) {\\n        uint256 _epoch = userPointEpoch[_user];\\n        if (_epoch == 0) {\\n            return 0;\\n        } else {\\n            Point memory lastPoint = userPointHistory[_user][_epoch];\\n            lastPoint.bias -= lastPoint.slope * int256(_t - lastPoint.timeStamp);\\n            if (lastPoint.bias < 0) {\\n                lastPoint.bias = 0;\\n            }\\n            return uint256(int256(lastPoint.bias));\\n        }\\n    }\\n\\n    function balanceOfAt(address _user, uint256 _block) external view returns (uint256) {\\n        require(_block <= block.number, \\\"VotingEscrow: Wrong condition\\\");\\n        uint256 _min;\\n        uint256 _max = userPointEpoch[_user];\\n        for (uint256 i; i < 128; ++i) {\\n            if (_min >= _max) {\\n                break;\\n            }\\n            uint256 _mid = (_min + _max + 1) / 2;\\n            if (userPointHistory[_user][_mid].blockNumber <= _block) {\\n                _min = _mid;\\n            } else {\\n                _max = _mid - 1;\\n            }\\n        }\\n        Point memory upoint = userPointHistory[_user][_min];\\n        uint256 maxEpoch = epoch;\\n        uint256 _epoch = _findBlockEpoch(_block, maxEpoch);\\n        Point memory point0 = pointHistory[_epoch];\\n        uint256 blockDifference;\\n        uint256 timeStampDiffrence;\\n        if (_epoch < maxEpoch) {\\n            Point memory point1 = pointHistory[_epoch + 1];\\n            blockDifference = point1.blockNumber - point0.blockNumber;\\n            timeStampDiffrence = point1.timeStamp - point0.timeStamp;\\n        } else {\\n            blockDifference = block.number - point0.blockNumber;\\n            timeStampDiffrence = block.timestamp - point0.timeStamp;\\n        }\\n\\n        uint256 blockTime = point0.timeStamp;\\n        if (blockDifference != 0) {\\n            blockTime += (timeStampDiffrence * (_block - point0.blockNumber)) / blockDifference;\\n        }\\n        upoint.bias -= upoint.slope * int128(int256(blockTime - upoint.timeStamp));\\n        if (upoint.bias >= 0) {\\n            return uint256(int256(upoint.bias));\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function totalSupply(uint256 _t) external view returns (uint256) {\\n        uint256 _epoch = epoch;\\n        Point memory lastPoint = pointHistory[_epoch];\\n        return _supplyAt(lastPoint, _t);\\n    }\\n\\n    function totalSupplyAt(uint256 _block) external view returns (uint256) {\\n        require(_block <= block.number, \\\"VotingEscrow: Invalid Block Number\\\");\\n        uint256 _epoch = epoch;\\n        uint256 targetEpoch = _findBlockEpoch(_block, _epoch);\\n        Point memory point = pointHistory[targetEpoch];\\n        uint256 timeStampDiffrence;\\n        if (targetEpoch < _epoch) {\\n            Point memory pointNext = pointHistory[targetEpoch + 1];\\n            if (point.blockNumber != pointNext.blockNumber) {\\n                timeStampDiffrence = ((_block - point.blockNumber) * (pointNext.timeStamp - point.timeStamp))\\n                    / (pointNext.blockNumber - point.blockNumber);\\n            }\\n        } else {\\n            if (point.blockNumber != block.number) {\\n                timeStampDiffrence = timeStampDiffrence = (\\n                    (_block - point.blockNumber) * (block.timestamp - point.timeStamp)\\n                ) / (block.number - point.blockNumber);\\n            }\\n        }\\n        return _supplyAt(point, point.timeStamp + timeStampDiffrence);\\n    }\\n\\n    function changeController(address _newController) external {\\n        require(hasRole(CONTROLLER_ROLE, msg.sender), \\\"VotingEscrow: Invalid Caller\\\");\\n        _revokeRole(CONTROLLER_ROLE, msg.sender);\\n        _grantRole(CONTROLLER_ROLE, _newController);\\n        controller = _newController;\\n\\n        emit ControllerChanged(msg.sender, _newController);\\n    }\\n\\n    function setGaugeController(address _newController) external {\\n        gaugeController = _newController;\\n        emit GaugeUpdated(_newController);\\n    }\\n\\n    function checkpoint() external {\\n        _checkpoint(address(0), LockedBalance(0, 0), LockedBalance(0, 0));\\n    }\\n\\n    function commitTransferOwnership(address _user) external {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"VotingEscrow: admin only\\\");\\n        futureAdmin = _user;\\n        emit OwnershipCommited(_user);\\n    }\\n\\n    function applyTransferOwnership() external {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"VotingEscrow: admin only\\\");\\n        address _admin = futureAdmin;\\n        require(_admin != address(0), \\\"VotingEscrow: Admin not set\\\");\\n        admin = _admin;\\n        emit OwnershipApplied(_admin);\\n    }\\n\\n    function commitSmartWalletChecker(address _user) external {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"VotingEscrow: admin only\\\");\\n        futureSmartWalletChecker = _user;\\n        emit WalletCommited(_user);\\n    }\\n\\n    function applySmartWalletChecker() external {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"VotingEscrow: admin only\\\");\\n        smartWalletChecker = futureSmartWalletChecker;\\n        emit WalletCommited(futureSmartWalletChecker);\\n    }\\n\\n    function depositFor(address _user, uint256 _value) external nonReentrant {\\n        LockedBalance memory _locked = locked[_user];\\n\\n        require(_value > 0, \\\"VotingEscrow: Need non-zero value\\\");\\n        require(_locked.amount > 0, \\\"VotingEscrow: No existing lock found\\\");\\n        require(_locked.end > block.timestamp, \\\"VotingEscrow: Cannot add to an expired lock. Withdraw\\\");\\n\\n        _depositFor(_user, _value, 0, locked[_user], DEPOSIT_FOR_TYPE);\\n    }\\n\\n    function createLock(uint256 _value, uint256 _unlockTime) external nonReentrant {\\n        _assertNotContract(msg.sender);\\n        uint256 unlockTime = (_unlockTime / WEEK) * WEEK;\\n        LockedBalance storage _locked = locked[msg.sender];\\n\\n        require(_value > 0, \\\"VotingEscrow: need non-zero value\\\");\\n        require(_locked.amount == 0, \\\"VotingEscrow: Withdraw old tokens first\\\");\\n        require(unlockTime > block.timestamp, \\\"VotingEscrow: Can only lock until a time in the future\\\");\\n        require(unlockTime <= MAXTIME + block.timestamp, \\\"VotingEscrow: Voting lock can be 4 years max\\\");\\n        createLockTs[msg.sender] = block.timestamp;\\n        _depositFor(msg.sender, _value, unlockTime, _locked, CREATE_LOCK_TYPE);\\n    }\\n\\n    function increaseAmount(uint256 _value) external nonReentrant {\\n        _assertNotContract(msg.sender);\\n        LockedBalance storage _locked = locked[msg.sender];\\n\\n        require(_value > 0, \\\"VotingEscrow: need non-zero value\\\");\\n        require(_locked.amount > 0, \\\"VotingEscrow: No existing lock found\\\");\\n        require(_locked.end > block.timestamp, \\\"VotingEscrow: Cannot add to an expired lock. Withdraw\\\");\\n\\n        _depositFor(msg.sender, _value, 0, _locked, INCREASE_LOCK_AMOUNT);\\n    }\\n\\n    function increaseAmountAndUnlockTime(uint256 _value, uint256 _unlockTime) external nonReentrant {\\n        _assertNotContract(msg.sender);\\n        LockedBalance storage _locked = locked[msg.sender];\\n        uint256 unlockTime = (_unlockTime / WEEK) * WEEK;\\n\\n        require(_value > 0, \\\"VotingEscrow: need non-zero value\\\");\\n        require(_locked.amount > 0, \\\"VotingEscrow: No existing lock found\\\");\\n        require(_locked.end > block.timestamp, \\\"VotingEscrow: Cannot add to an expired lock. Withdraw\\\");\\n        require(unlockTime > _locked.end, \\\"VotingEscrow: Can only increase lock duration\\\");\\n        require(unlockTime <= block.timestamp + MAXTIME, \\\"VotingEscrow: Voting lock can be 4 years max\\\");\\n\\n        _depositFor(msg.sender, _value, unlockTime, _locked, INCREASE_UNLOCK_TIME_AND_LOCK_AMOUNT);\\n    }\\n\\n    function withdraw() external nonReentrant {\\n        LockedBalance storage _locked = locked[msg.sender];\\n        require(block.timestamp >= _locked.end, \\\"VotingEscrow: The lock didn't expire\\\");\\n        uint256 _value = uint256(int256(_locked.amount));\\n        LockedBalance storage oldLocked = _locked;\\n        _locked.end = 0;\\n        _locked.amount = 0;\\n        supply -= _value;\\n\\n        _checkpoint(msg.sender, oldLocked, _locked);\\n        IERC20(token).safeTransfer(msg.sender, _value);\\n        IGaugeController(gaugeController).updateReward(address(this), msg.sender, _value, false);\\n        delete createLockTs[msg.sender];\\n        emit Withdrew(msg.sender, _value, block.timestamp);\\n        emit Supply(supply + _value, supply);\\n    }\\n\\n    function increaseUnlockTime(uint256 _unlockTime) external nonReentrant {\\n        _assertNotContract(msg.sender);\\n        LockedBalance storage _locked = locked[msg.sender];\\n        uint256 unlockTime = (_unlockTime / WEEK) * WEEK;\\n        require(_locked.end > block.timestamp, \\\"VotingEscrow: Lock expired\\\");\\n        require(_locked.amount > 0, \\\"VotingEscrow: Nothing is locked\\\");\\n        require(unlockTime > _locked.end, \\\"VotingEscrow: Can only increase lock duration\\\");\\n        require(unlockTime <= block.timestamp + MAXTIME, \\\"VotingEscrow: Voting lock can be 4 years max\\\");\\n\\n        _depositFor(msg.sender, 0, unlockTime, _locked, INCREASE_UNLOCK_TIME);\\n    }\\n\\n    function _findBlockEpoch(uint256 _block, uint256 _maxEpoch) internal view returns (uint256) {\\n        uint256 _min = 0;\\n        uint256 _max = _maxEpoch;\\n        for (uint256 i = 0; i < 128; i++) {\\n            if (_min >= _max) {\\n                break;\\n            }\\n            uint256 _mid = (_min + _max + 1) / 2;\\n            if (pointHistory[_mid].blockNumber <= _block) {\\n                _min = _mid;\\n            } else {\\n                _max = _mid - 1;\\n            }\\n        }\\n        return _min;\\n    }\\n\\n    function _supplyAt(Point memory _point, uint256 _time) internal view returns (uint256) {\\n        Point memory lastPoint = _point;\\n        uint256 timeInterval = (lastPoint.timeStamp / WEEK) * WEEK;\\n        for (uint256 i; i < 255; ++i) {\\n            timeInterval += WEEK;\\n            int128 dSlope;\\n            if (timeInterval > _time) {\\n                timeInterval = _time;\\n            } else {\\n                dSlope = int128(int256(slopeChanges[timeInterval]));\\n            }\\n            lastPoint.bias -= lastPoint.slope * int256(timeInterval - lastPoint.timeStamp);\\n            if (timeInterval == _time) {\\n                break;\\n            }\\n            lastPoint.slope += dSlope;\\n            lastPoint.timeStamp = timeInterval;\\n        }\\n        if (lastPoint.bias < 0) {\\n            lastPoint.bias = 0;\\n        }\\n        return uint256(int256(lastPoint.bias));\\n    }\\n\\n    function _assertNotContract(address _user) internal {\\n        if (_user != tx.origin) {\\n            address checker = smartWalletChecker;\\n            if (checker != address(0)) {\\n                if (ISmartWalletChecker(checker).check(_user)) {\\n                    return;\\n                }\\n            }\\n            revert(\\\"VotingEscrow: Smart contract depositors not allowed\\\");\\n        }\\n    }\\n\\n    function _checkpoint(address _user, LockedBalance memory _oldLocked, LockedBalance memory _newLocked) internal {\\n        Point memory _uOld;\\n        Point memory _uNew;\\n        int256 _oldDslope = 0;\\n        int256 _newDslope = 0;\\n        uint256 _epoch = epoch;\\n\\n        if (_user != address(0)) {\\n            // Calculate slopes and biases\\n            // Kept at zero when they have to\\n            if (_oldLocked.end > block.timestamp && _oldLocked.amount > 0) {\\n                unchecked {\\n                    _uOld.slope = _oldLocked.amount / int256(MAXTIME);\\n                }\\n                _uOld.bias = _uOld.slope * int256(_oldLocked.end - block.timestamp);\\n            }\\n            if (_newLocked.end > block.timestamp && _newLocked.amount > 0) {\\n                unchecked {\\n                    _uNew.slope = _newLocked.amount / int256(MAXTIME);\\n                }\\n                _uNew.bias = _uNew.slope * int256(_newLocked.end - block.timestamp);\\n            }\\n\\n            // Read values of scheduled changes in the slope\\n            // _oldLocked.end can be in the past and in the future\\n            // _newLocked.end can ONLY by in the FUTURE unless everything expired than zeros\\n            _oldDslope = int256(slopeChanges[_oldLocked.end]);\\n            if (_newLocked.end != 0) {\\n                if (_newLocked.end == _oldLocked.end) {\\n                    _newDslope = _oldDslope;\\n                } else {\\n                    _newDslope = int256(slopeChanges[_newLocked.end]);\\n                }\\n            }\\n        }\\n        Point memory _lastPoint = Point({bias: 0, slope: 0, timeStamp: block.timestamp, blockNumber: block.number});\\n        if (_epoch > 0) {\\n            _lastPoint = pointHistory[_epoch];\\n        }\\n        uint256 _lastCheckpoint = _lastPoint.timeStamp;\\n        // _initial_lastPoint is used for extrapolation to calculate block number\\n        // (approximately, for *At methods) and save them\\n        // as we cannot figure that out exactly from inside the contract\\n        Point memory _initialLastPoint = _lastPoint;\\n        uint256 _blockSlope = 0; // dblock/dt\\n        if (block.timestamp > _lastPoint.timeStamp) {\\n            _blockSlope =\\n                (MULTIPLIER * (block.number - _lastPoint.blockNumber)) / (block.timestamp - _lastPoint.timeStamp);\\n        }\\n        // If last point is already recorded in this block, slope=0\\n        // But that's ok b/c we know the block in such case\\n\\n        // Go over weeks to fill history and calculate what the current point is\\n        uint256 _timeInterval;\\n        unchecked {\\n            _timeInterval = (_lastCheckpoint / WEEK) * WEEK;\\n        }\\n        for (uint256 i; i < 255;) {\\n            // Hopefully it won't happen that this won't get used in 5 years!\\n            // If it does, users will be able to withdraw but vote weight will be broken\\n            _timeInterval += WEEK;\\n            int256 d_slope = 0;\\n            if (_timeInterval > block.timestamp) {\\n                _timeInterval = block.timestamp;\\n            } else {\\n                d_slope = int256(slopeChanges[_timeInterval]);\\n            }\\n            _lastPoint.bias = _lastPoint.bias - _lastPoint.slope * int256(_timeInterval - _lastCheckpoint);\\n            _lastPoint.slope += d_slope;\\n            if (_lastPoint.bias < 0) {\\n                // This can happen\\n                _lastPoint.bias = 0;\\n            }\\n            if (_lastPoint.slope < 0) {\\n                // This cannot happen - just in case\\n                _lastPoint.slope = 0;\\n            }\\n            _lastCheckpoint = _timeInterval;\\n            _lastPoint.timeStamp = _timeInterval;\\n            _lastPoint.blockNumber = _initialLastPoint.blockNumber\\n                + ((_blockSlope * (_timeInterval - _initialLastPoint.timeStamp)) / MULTIPLIER);\\n            _epoch += 1;\\n            if (_timeInterval == block.timestamp) {\\n                _lastPoint.blockNumber = block.number;\\n                break;\\n            } else {\\n                pointHistory[_epoch] = _lastPoint;\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        epoch = _epoch;\\n        // Now pointHistory is filled until t=now\\n\\n        if (_user != address(0)) {\\n            // If last point was in this block, the slope change has been applied already\\n            // But in such case we have 0 slope(s)\\n            _lastPoint.slope += _uNew.slope - _uOld.slope;\\n            _lastPoint.bias += _uNew.bias - _uOld.bias;\\n            if (_lastPoint.slope < 0) {\\n                _lastPoint.slope = 0;\\n            }\\n            if (_lastPoint.bias < 0) {\\n                _lastPoint.bias = 0;\\n            }\\n        }\\n        // Record the changed point into history\\n        pointHistory[_epoch] = _lastPoint;\\n\\n        address _user2 = _user; //To avoid being \\\"Stack Too Deep\\\"\\n\\n        if (_user2 != address(0)) {\\n            // Schedule the slope changes (slope is going down)\\n            // We subtract new_user_slope from [_newLocked.end]\\n            // and add old_user_slope to [_oldLocked.end]\\n            if (_oldLocked.end > block.timestamp) {\\n                // _oldDslope was <something> - _uOld.slope, so we cancel that\\n                _oldDslope += _uOld.slope;\\n                if (_newLocked.end == _oldLocked.end) {\\n                    _oldDslope -= _uNew.slope; // It was a new deposit, not extension\\n                }\\n                slopeChanges[_oldLocked.end] = uint256(_oldDslope);\\n            }\\n            if (_newLocked.end > block.timestamp) {\\n                if (_newLocked.end > _oldLocked.end) {\\n                    _newDslope -= _uNew.slope; // old slope disappeared at this point\\n                    slopeChanges[_newLocked.end] = uint256(_newDslope);\\n                }\\n                // else we recorded it already in _oldDslope\\n            }\\n\\n            // Now handle user history\\n            uint256 _user_epoch;\\n            unchecked {\\n                _user_epoch = userPointEpoch[_user2] + 1;\\n            }\\n\\n            userPointEpoch[_user2] = _user_epoch;\\n            _uNew.timeStamp = block.timestamp;\\n            _uNew.blockNumber = block.number;\\n            userPointHistory[_user2][_user_epoch] = _uNew;\\n        }\\n    }\\n\\n    function _depositFor(\\n        address _user,\\n        uint256 _value,\\n        uint256 _unlockTime,\\n        LockedBalance memory lockedBalance,\\n        uint256 _type\\n    ) internal {\\n        LockedBalance memory _locked = lockedBalance;\\n        uint256 supplyBefore = supply;\\n        supply = supplyBefore + _value;\\n        LockedBalance memory oldLocked = _locked;\\n        _locked.amount += int128(uint128(_value));\\n        if (_unlockTime != 0) {\\n            _locked.end = _unlockTime;\\n        }\\n        locked[_user] = _locked;\\n        _checkpoint(_user, oldLocked, _locked);\\n        if (_value != 0) {\\n            IERC20(token).safeTransferFrom(_user, address(this), _value);\\n            IGaugeController(gaugeController).updateReward(address(this), _user, _value, true);\\n        }\\n        emit Deposited(_user, _value, _locked.end, _type, block.timestamp);\\n        emit Supply(supplyBefore, supplyBefore + _value);\\n    }\\n}\\n\",\"keccak256\":\"0x70d2c70da3f238835488cb14fa6a780ed04ace609c4ad8b0900de147d8845cbe\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IGaugeController.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.24;\\n\\ninterface IGaugeController {\\n    function updateReward(address pool, address user, uint256 amount, bool increase) external;\\n\\n    function decreaseRewardAndClaim(address pool, uint256 amount, address user) external;\\n}\\n\",\"keccak256\":\"0x1136eb7a44cb75a9052e0d5835a9b5c6e603d2b883021b7b639c6fc5bc848eb9\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISmartWalletChecker.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.24;\\n\\ninterface ISmartWalletChecker {\\n    function check(address user) external returns (bool);\\n}\\n\",\"keccak256\":\"0x64f4ec800eb0e91e3804892a6df19f68b4217f4812bc3ad198a44a62ca437718\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x604060c081526004908136101561001557600080fd5b600091823560e01c90816291d2b814612502578162fdd58e146124d957816301ffc9a714612438578163047fc9aa14612419578163059f8b16146123f657816306fdde031461230057816308405788146122e3578163092c5b3b146122a857816315456eba146120a4578163155bcbbd1461207c578163248a9ca3146120525781632f2ff15d146120285781632f4f21e214611dcf578163313ce56714611db057816334d901a414611d2757816336568abe14611cc85781633a0af6bf14611cac5781633ccfd60b14611a6e5781633cebb8231461196b5781634cb654af146119435781634d144a01146111085781634deafcae146118fd5781634ee2cd7e146118d457816354fd4d50146117dc5781637b39ecd5146117c05781637c616fe6146115b25781637df148541461158a57816381fc83bb146115475781638ad4c447146114dc578163900cf0cf146114bd57816391d14854146114775781639586900d1461143457816395d89b411461132e578163981b24d01461114b57816399eecb3b14611123578163a217fddf14611108578163b52c05fe14610db9578163bb65e8db14610b1a578163bd85b03914610ab4578163bef97c8714610a8d578163c2c4c5c114610747578163cbf9fe5f146106fa578163d28d5944146106de578163d4cfd62714610655578163d547741f14610616578163df0ab9d314610540578163e1cebf0b146104b1578163eac6a66714610469578163ee00ef3a1461044a578163f0818583146103bb578163f3a6d60814610357578163f4359ce514610339578163f52a36f71461030157508063f77c4791146102da578063f851a440146102b35763fc0c546a1461028957600080fd5b346102af57816003193601126102af576020906001600160a01b03600c54169051908152f35b5080fd5b50346102af57816003193601126102af576020906001600160a01b03600a54169051908152f35b50346102af57816003193601126102af576020906001600160a01b03600d54169051908152f35b9050346103355760206003193601126103355760209282913581526c050c783eb9b5c85f2a80000013845220549051908152f35b8280fd5b5050346102af57816003193601126102af576020905162093a808152f35b5050346102af5760206003193601126102af5760016103b16020936001600160a01b0361038261256b565b1681526c050c783eb9b5c85f2a8000001285528380822054916c050c783eb9b5c85f2a80000011875220612680565b5001549051908152f35b5050346102af5760206003193601126102af5760207fd51f14a3b8bff946e1ff30178457f3a775892d9abfcbff540a5c225dffb0e9dd916001600160a01b0361040261256b565b85805285845282862033600052845261042160ff846000205416612ce2565b16908173ffffffffffffffffffffffffffffffffffffffff19600854161760085551908152a180f35b5050346102af57816003193601126102af5760209051630784ce008152f35b5050346102af57806003193601126102af5760026103b16020936001600160a01b0361049361256b565b1681526c050c783eb9b5c85f2a800000118552836024359120612680565b5050346102af5760206003193601126102af5760207fa3240ed8b91b2b9b457d36eea99b631317688960891cf3efa12666ce6a8e4252916001600160a01b036104f861256b565b85805285845282862033600052845261051760ff846000205416612ce2565b16908173ffffffffffffffffffffffffffffffffffffffff19600b541617600b5551908152a180f35b91905034610335578260031936011261033557828052826020528083203360005260205261057460ff826000205416612ce2565b6001600160a01b03600b54169182156105d45750816020917fe15d3667144affcc7767a528cb267dc271fe6bcc6bd1237f826d4c71a7834d809373ffffffffffffffffffffffffffffffffffffffff19600a541617600a5551908152a180f35b6020606492519162461bcd60e51b8352820152601b60248201527f566f74696e67457363726f773a2041646d696e206e6f742073657400000000006044820152fd5b91905034610335578060031936011261033557610651913561064c600161063b612581565b938387528660205286200154612eba565b6130ee565b5080f35b5050346102af57816003193601126102af5760207fd51f14a3b8bff946e1ff30178457f3a775892d9abfcbff540a5c225dffb0e9dd918380528382528084203360005282526106aa60ff826000205416612ce2565b6001600160a01b0360085416908173ffffffffffffffffffffffffffffffffffffffff19600954161760095551908152a180f35b5050346102af57816003193601126102af576020905160018152f35b5050346102af5760206003193601126102af5780916001600160a01b0361071f61256b565b1681526c050c783eb9b5c85f2a8000000f602052206001815491015482519182526020820152f35b8383346102af57816003193601126102af578051610764816125c1565b82815282602080920152826020835161077c816125c1565b8281520152610789613164565b50610792613164565b506007549082516107a2816125dd565b600081526000602082015242848201526060904360608201529383610a4c575b808501918251936000938542116109f7575b919060009493945062093a809283808804026000975b60ff891061085d575b505050505050505050806007556c01431e0fae6d7217caa000000081101561084857906108459160021b600f019060606003918051845560208101516001850155604081015160028501550151910155565b80f35b603284634e487b7160e01b6000525260246000fd5b8582018092116109e2576000918881428111156109c05750505060006108ad42935b8d6108a4815161089e8a8401976108988951918b6126f5565b90612718565b90612757565b90528351612e9e565b808352818d51126109b8575b126109ae575b508096818352848b01986108f18a51670de0b6b3a76400006108ea6108e487806126f5565b8c612999565b049061296c565b8a52600190818c01809c11610999578b4285036109245750505050505050505050504390528480808080808080806107f3565b909192939495969798999a506c01431e0fae6d7217caa0000000811015610984578c6109759160021b600f019060606003918051845560208101516001850155604081015160028501550151910155565b019594939291909695976107ea565b60328f634e487b7160e01b6000525260246000fd5b60118f634e487b7160e01b6000525260246000fd5b600090528c6108bf565b818d526108b9565b90846108ad9260009496526c050c783eb9b5c85f2a800000138852205461087f565b60118d634e487b7160e01b6000525260246000fd5b9350610a076060880151436126f5565b670de0b6b3a76400009080820291820403610a3757610a3190610a2b8651426126f5565b90612979565b936107d4565b60118a634e487b7160e01b6000525260246000fd5b93506c01431e0fae6d7217caa0000000831015610a7857610a728360021b600f016126c3565b936107c2565b603286634e487b7160e01b6000525260246000fd5b5050346102af57816003193601126102af5760209060ff600e5460a01c1690519015158152f35b828434610b17576020600319360112610b1757600754906c01431e0fae6d7217caa0000000821015610b045750610afd90610af8602094359160021b600f016126c3565b61373d565b9051908152f35b80603285634e487b7160e01b6024945252fd5b80fd5b8383346102af57610b2a366126ad565b9093610b34612d2d565b610b3d33612d80565b3384526c050c783eb9b5c85f2a8000000f9060209180835284862062093a80809504858102958187041490151715610da65787151590610b7c826127fc565b610b888882541361286d565b610ba26001820154610b9b4282116128dd565b8711612c00565b630784ce004201804211610d935790610bc0610bc592881115612c71565b61294e565b9160065495610bd48a8861296c565b600655610bf76fffffffffffffffffffffffffffffffff8b16600f0b8551612e9e565b845280610d89575b50336000528452610c2486600020928051845585810193600185519101558033613189565b610c9f575b95610c8e917f5e2aa66efd74cce82b21852e317e5490d9ecc9e6bb953ae24d90851258cc2f5c969751908651908382528582015242878201527fe3b53cd1a44fbf11535e145d80b8ef1ed6d57a73bf5daa7e939b6b01657d654960603392a38361296c565b908351928352820152a16001805580f35b6001600160a01b03610ce281600c54168751906323b872dd60e01b878301523360248301523060448301528a606483015260648252610cdd826125f9565b613810565b600e5416803b15610d84578551630df7526560e21b815230848201908152336020820152604081018a905260016060820152909160009183919082908490829060800103925af18015610d795791610c8e93917f5e2aa66efd74cce82b21852e317e5490d9ecc9e6bb953ae24d90851258cc2f5c989993610d6a575b50919796509150610c29565b610d7390612597565b89610d5e565b86513d6000823e3d90fd5b600080fd5b8584015289610bff565b602489601187634e487b7160e01b835252fd5b602487601185634e487b7160e01b835252fd5b8383346102af57610dc9366126ad565b9093610dd3612d2d565b610ddc33612d80565b62093a808092048281029281840414901517156110f5573384526c050c783eb9b5c85f2a8000000f60209181835284862087151590610e1a826127fc565b805461108d574286111561102557630784ce004281018091116110125790610e47610e6492881115612c71565b3389526c050c783eb9b5c85f2a80000010865242888a205561294e565b9260065495610e738a8861296c565b600655610e966fffffffffffffffffffffffffffffffff8b16600f0b8651612e9e565b855280611008575b50336000528452610ec386600020938051855585810194600186519101558033613189565b610f2d575b507f5e2aa66efd74cce82b21852e317e5490d9ecc9e6bb953ae24d90851258cc2f5c9495610c8e9151855182815260018582015242878201527fe3b53cd1a44fbf11535e145d80b8ef1ed6d57a73bf5daa7e939b6b01657d654960603392a38361296c565b6001600160a01b03610f6b81600c54168751906323b872dd60e01b878301523360248301523060448301528a606483015260648252610cdd826125f9565b600e5416803b15610d84578551630df7526560e21b815230928101928352336020840152604083018990526001606084015291600091839182908490829060800103925af18015610ffd57917f5e2aa66efd74cce82b21852e317e5490d9ecc9e6bb953ae24d90851258cc2f5c969791610c8e93610fee575b5091509594610ec8565b610ff790612597565b88610fe4565b85513d6000823e3d90fd5b8585015289610e9e565b602489601186634e487b7160e01b835252fd5b6084838689519162461bcd60e51b8352820152603660248201527f566f74696e67457363726f773a2043616e206f6e6c79206c6f636b20756e746960448201527f6c20612074696d6520696e2074686520667574757265000000000000000000006064820152fd5b6084838689519162461bcd60e51b8352820152602760248201527f566f74696e67457363726f773a205769746864726177206f6c6420746f6b656e60448201527f73206669727374000000000000000000000000000000000000000000000000006064820152fd5b836011602492634e487b7160e01b835252fd5b5050346102af57816003193601126102af5751908152602090f35b5050346102af57816003193601126102af576020906001600160a01b03600e54169051908152f35b828434610b17576020600319360112610b175782354381116112c5576007549061117582826136af565b6c01431e0fae6d7217caa000000093848210156112455761119b8260021b600f016126c3565b948194831060001461126b576001830180931161125857821015611245575060209550916111fc916111d6610afd959460021b600f016126c3565b6060850190878251606083019485518203611202575b5050505050505b8483015161296c565b9061373d565b61123a96506112309261121d610a2b96959361122a936126f5565b9201518b8a0151906126f5565b90612999565b92519051906126f5565b8680808781806111ec565b80603288634e487b7160e01b6024945252fd5b60248260118a634e487b7160e01b835252fd5b5050506020945082916111fc916060610afd950190815190438203611293575b5050506111f3565b6112bd93506112a8610a2b926112b5926126f5565b61122a89880151426126f5565b9151436126f5565b86808061128b565b608484602085519162461bcd60e51b8352820152602260248201527f566f74696e67457363726f773a20496e76616c696420426c6f636b204e756d6260448201527f65720000000000000000000000000000000000000000000000000000000000006064820152fd5b828434610b175780600319360112610b17575080519060009260035460018160011c9160018116801561142a575b602094858510821461141757508387529081156113f7575060011461139c575b50505061138e82611398940383612615565b5191829182612638565b0390f35b600360009081529295507fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b8284106113e457505050826113989461138e928201019461137c565b80548685018801529286019281016113c8565b60ff1916868501525050151560051b830101925061138e8261139861137c565b886022602492634e487b7160e01b835252fd5b92607f169261135c565b5050346102af5760206003193601126102af57806020926001600160a01b0361145b61256b565b1681526c050c783eb9b5c85f2a80000010845220549051908152f35b9050346103355781600319360112610335576001600160a01b038260209461149d612581565b93358152808652209116600052825260ff81600020541690519015158152f35b5050346102af57816003193601126102af576020906007549051908152f35b839150346102af5760206003193601126102af5735906c01431e0fae6d7217caa0000000821015610b17575060021b9061139882600f015491601084015493601260118201549101549151948594859094939260609260808301968352602083015260408201520152565b5050346102af5760206003193601126102af57806020926001600160a01b0361156e61256b565b1681526c050c783eb9b5c85f2a80000012845220549051908152f35b5050346102af57816003193601126102af576020906001600160a01b03600954169051908152f35b8383346102af57602080600319360112610335576115ce612d2d565b6115d733612d80565b3383526c050c783eb9b5c85f2a8000000f8082528284209062093a8091828735048381029381850414901517156117ad5760018101544281111561176b57868254131561172957611629908411612c00565b630784ce0042018042116117165790610bc061164792851115612c71565b600654815190939192919060008112801516611701577f5e2aa66efd74cce82b21852e317e5490d9ecc9e6bb953ae24d90851258cc2f5c9798508352806116f7575b503360005283526116ae84600020918051835584810192600184519101558033613189565b5183516000815260038482015242858201527fe3b53cd1a44fbf11535e145d80b8ef1ed6d57a73bf5daa7e939b6b01657d654960603392a3825191818352820152a16001805580f35b8483015287611689565b601189634e487b7160e01b6000525260246000fd5b60248760118a634e487b7160e01b835252fd5b6064888688519162461bcd60e51b8352820152601f60248201527f566f74696e67457363726f773a204e6f7468696e67206973206c6f636b6564006044820152fd5b6064888688519162461bcd60e51b8352820152601a60248201527f566f74696e67457363726f773a204c6f636b20657870697265640000000000006044820152fd5b602486601189634e487b7160e01b835252fd5b5050346102af57816003193601126102af576020905160038152f35b828434610b175780600319360112610b17575080519060009280549060018260011c91600184169384156118ca575b60209485851081146118b757848852908115611895575060011461183b575b611398868661138e828b0383612615565b60009081529295507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b82841061188257505050826113989461138e92820101948661182a565b8054868501880152928601928101611865565b60ff191687860152505050151560051b830101925061138e826113988661182a565b602489602285634e487b7160e01b835252fd5b92607f169261180b565b5050346102af57806003193601126102af57602090610afd6118f461256b565b602435906129ac565b5050346102af5760206003193601126102af576001816020936001600160a01b0361192661256b565b1681526c050c783eb9b5c85f2a8000000f85522001549051908152f35b5050346102af57816003193601126102af576020906001600160a01b03600b54169051908152f35b9050346103355760206003193601126103355761198661256b565b917f7b765e0e932d348852a6f810bfa1ab891e259123f02db8cdcde614c5702233578452836020528084203360005260205260ff81600020541615611a2b57836001600160a01b03846119d833613043565b506119e281612f17565b50168073ffffffffffffffffffffffffffffffffffffffff19600d541617600d55337f6aef1fb5b23d0e109fc7f2b0601019e1edbacd177e31a441ec8548e8dd14f0f78380a380f35b906020606492519162461bcd60e51b8352820152601c60248201527f566f74696e67457363726f773a20496e76616c69642043616c6c6572000000006044820152fd5b8383346102af57816003193601126102af57611a88612d2d565b33825260206c050c783eb9b5c85f2a8000000f815281832093600185019485544210611c45578085611ae292549755858155611ac6876006546126f5565b600655611adb611ad58261294e565b9161294e565b9033613189565b6001600160a01b03611b3381600c54168551907fa9059cbb000000000000000000000000000000000000000000000000000000008683015233602483015288604483015260448252610cdd826125dd565b600e541690813b15611c415784916084839286519485938492630df7526560e21b845230908401523360248401528a60448401528160648401525af18015611c3457611c03575b507f5e2aa66efd74cce82b21852e317e5490d9ecc9e6bb953ae24d90851258cc2f5c92933385526c050c783eb9b5c85f2a8000001082528483812055825181815242838201527fadec52fcd1408589179b85e44b434374db078b4eaf793e7d1a1bb0ae4ecfeee5843392a2611bf2600654918261296c565b918351928352820152a16001805580f35b92611c2e7f5e2aa66efd74cce82b21852e317e5490d9ecc9e6bb953ae24d90851258cc2f5c94612597565b92611b7a565b50505051903d90823e3d90fd5b8480fd5b5090608492519162461bcd60e51b83528201526024808201527f566f74696e67457363726f773a20546865206c6f636b206469646e277420657860448201527f70697265000000000000000000000000000000000000000000000000000000006064820152fd5b5050346102af57816003193601126102af576020905160028152f35b8383346102af57806003193601126102af57611ce2612581565b90336001600160a01b03831603611cff57506106519192356130ee565b8390517f6697b232000000000000000000000000000000000000000000000000000000008152fd5b5050346102af57806003193601126102af57611d4161256b565b6001600160a01b03602435911683526c050c783eb9b5c85f2a80000011602052818320633b9aca00821015611dac5790611d7a91612680565b508054600182015460028301546003909301549351918252602082015260408101919091526060810191909152608090f35b8380fd5b5050346102af57816003193601126102af576020906005549051908152f35b91905034610335578060031936011261033557611dea61256b565b9160243592611df7612d2d565b6001600160a01b038082168087526c050c783eb9b5c85f2a8000000f93602093858552611e25878a2061294e565b8815611fc0578581611e3c8c611e4594511361286d565b015142106128dd565b82895285855288611e5788822061294e565b92819560065498611e688c8b61296c565b600655611e8b6fffffffffffffffffffffffffffffffff8d16600f0b8751612e9e565b86528684528852611eaf8a8420958051875589810196600188519101558086613189565b611ee581600c54168b51906323b872dd60e01b8b8301528860248301523060448301528d606483015260648252610cdd826125f9565b600e5416803b15610335578951630df7526560e21b8152309281019283526001600160a01b039094166020830152604082018b905260016060830152839182908490829060800103925af18015611fb657917f5e2aa66efd74cce82b21852e317e5490d9ecc9e6bb953ae24d90851258cc2f5c989391610c8e9593611fa2575b5060607fe3b53cd1a44fbf11535e145d80b8ef1ed6d57a73bf5daa7e939b6b01657d654991519389519086825288820152428a820152a38361296c565b611fad919350612597565b88916060611f65565b87513d8b823e3d90fd5b608483878a519162461bcd60e51b8352820152602160248201527f566f74696e67457363726f773a204e656564206e6f6e2d7a65726f2076616c7560448201527f65000000000000000000000000000000000000000000000000000000000000006064820152fd5b91905034610335578060031936011261033557610651913561204d600161063b612581565b612fc9565b90503461033557602060031936011261033557816020936001923581528085522001549051908152f35b5050346102af57816003193601126102af576020906001600160a01b03600854169051908152f35b919050346103355760209182600319360112611dac578035926120c5612d2d565b6120ce33612d80565b3385526c050c783eb9b5c85f2a8000000f9182825283862090612112861515926120f7846127fc565b6121038982541361286d565b610bc0600182015442106128dd565b9160065494612121888761296c565b6006556121446fffffffffffffffffffffffffffffffff8916600f0b8551612e9e565b84523389528452612168868920938051855585810194600186519101558033613189565b6121d1575b507f5e2aa66efd74cce82b21852e317e5490d9ecc9e6bb953ae24d90851258cc2f5c94610c8e9151855182815260028582015242878201527fe3b53cd1a44fbf11535e145d80b8ef1ed6d57a73bf5daa7e939b6b01657d654960603392a38361296c565b866001600160a01b0361221081600c54168851906323b872dd60e01b888301523360248301523060448301528a606483015260648252610cdd826125f9565b600e541691823b156102af578651630df7526560e21b815230918101918252336020830152604082018990526001606083015292839182908490829060800103925af1801561229e57917f5e2aa66efd74cce82b21852e317e5490d9ecc9e6bb953ae24d90851258cc2f5c9691610c8e9361228f575b5091509461216d565b61229890612597565b38612286565b85513d89823e3d90fd5b5050346102af57816003193601126102af57602090517f7b765e0e932d348852a6f810bfa1ab891e259123f02db8cdcde614c5702233578152f35b919050346103355782600319360112610335576020925051908152f35b9190503461033557826003193601126103355780519183600254906001908260011c926001811680156123ec575b60209586861082146123d957508488529081156123b7575060011461235e57611398868661138e828b0383612615565b929550600283527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace5b8284106123a457505050826113989461138e92820101943861182a565b8054868501880152928601928101612387565b60ff191687860152505050151560051b830101925061138e826113983861182a565b836022602492634e487b7160e01b835252fd5b93607f169361232e565b5050346102af57816003193601126102af5760209051670de0b6b3a76400008152f35b5050346102af57816003193601126102af576020906006549051908152f35b9050346103355760206003193601126103355735907fffffffff00000000000000000000000000000000000000000000000000000000821680920361033557602092507f7965db0b0000000000000000000000000000000000000000000000000000000082149182156124af575b50519015158152f35b7f01ffc9a700000000000000000000000000000000000000000000000000000000149150386124a6565b5050346102af57806003193601126102af57602090610afd6124f961256b565b60243590612770565b8334610b17576020600319360112610b17576001600160a01b0361252461256b565b168073ffffffffffffffffffffffffffffffffffffffff19600e541617600e557f629d40c6cf2ac89d7ffe5746f80af769a9d19c37a5c5bd61ca861444f50c370c8280a280f35b600435906001600160a01b0382168203610d8457565b602435906001600160a01b0382168203610d8457565b67ffffffffffffffff81116125ab57604052565b634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff8211176125ab57604052565b6080810190811067ffffffffffffffff8211176125ab57604052565b60a0810190811067ffffffffffffffff8211176125ab57604052565b90601f601f19910116810190811067ffffffffffffffff8211176125ab57604052565b60208082528251818301819052939260005b85811061266c57505050601f19601f8460006040809697860101520116010190565b81810183015184820160400152820161264a565b90633b9aca008110156126975760021b0190600090565b634e487b7160e01b600052603260045260246000fd5b6003196040910112610d84576004359060243590565b906040516126d0816125dd565b6060600382948054845260018101546020850152600281015460408501520154910152565b9190820391821161270257565b634e487b7160e01b600052601160045260246000fd5b8181029291600082127f800000000000000000000000000000000000000000000000000000000000000082141661270257818405149015171561270257565b8181039291600013801582851316918412161761270257565b6001600160a01b031660009081526c050c783eb9b5c85f2a8000001260205260408120548061279f5750905090565b6127e96127e26127cd6127c785946c050c783eb9b5c85f2a8000001160205260408620612680565b506126c3565b946108986020870151916040880151906126f5565b8451612757565b808452126127f657505190565b81525190565b1561280357565b608460405162461bcd60e51b815260206004820152602160248201527f566f74696e67457363726f773a206e656564206e6f6e2d7a65726f2076616c7560448201527f65000000000000000000000000000000000000000000000000000000000000006064820152fd5b1561287457565b608460405162461bcd60e51b8152602060048201526024808201527f566f74696e67457363726f773a204e6f206578697374696e67206c6f636b206660448201527f6f756e64000000000000000000000000000000000000000000000000000000006064820152fd5b156128e457565b608460405162461bcd60e51b815260206004820152603560248201527f566f74696e67457363726f773a2043616e6e6f742061646420746f20616e206560448201527f787069726564206c6f636b2e20576974686472617700000000000000000000006064820152fd5b9060405161295b816125c1565b602060018294805484520154910152565b9190820180921161270257565b8115612983570490565b634e487b7160e01b600052601260045260246000fd5b8181029291811591840414171561270257565b438211612bbc576001600160a01b031660008181526c050c783eb9b5c85f2a80000012602090815260408083205490939183915b60808310612b41575b505050612a11916127c7916000526c050c783eb9b5c85f2a8000001160205283600020612680565b9160075491612a2083836136af565b6c01431e0fae6d7217caa00000008082101561269757612a458260021b600f016126c3565b94821015612b1257600182018092116127025781101561269757612ace93612ac793612a79612abe9360021b600f016126c3565b90612a9e85612a9160608501516060870151906126f5565b93015186850151906126f5565b905b858401519383612ae3575b50505050602086015192860151906126f5565b600f0b90612718565b8251612757565b9081905260008112612add5790565b50600090565b612b039261122a612b099695936060612afe940151906126f5565b612979565b9061296c565b38808080612aab565b5050612abe83612ac793612b2d6060612ace970151436126f5565b90612b3b85840151426126f5565b90612aa0565b90919381811015612bb657612b56828261296c565b6001808201809211612702571c90846000526c050c783eb9b5c85f2a800000118452876003612b88848a600020612680565b50015411612b9e5750600190945b0191906129e0565b94915060001981019081116127025760019091612b96565b936129e9565b606460405162461bcd60e51b815260206004820152601d60248201527f566f74696e67457363726f773a2057726f6e6720636f6e646974696f6e0000006044820152fd5b15612c0757565b608460405162461bcd60e51b815260206004820152602d60248201527f566f74696e67457363726f773a2043616e206f6e6c7920696e6372656173652060448201527f6c6f636b206475726174696f6e000000000000000000000000000000000000006064820152fd5b15612c7857565b608460405162461bcd60e51b815260206004820152602c60248201527f566f74696e67457363726f773a20566f74696e67206c6f636b2063616e20626560448201527f2034207965617273206d617800000000000000000000000000000000000000006064820152fd5b15612ce957565b606460405162461bcd60e51b815260206004820152601860248201527f566f74696e67457363726f773a2061646d696e206f6e6c7900000000000000006044820152fd5b600260015414612d3e576002600155565b60046040517f3ee5aeb5000000000000000000000000000000000000000000000000000000008152fd5b90816020910312610d8457518015158103610d845790565b6001600160a01b0380911690328203612d97575050565b600954169081612e0c575b608460405162461bcd60e51b815260206004820152603360248201527f566f74696e67457363726f773a20536d61727420636f6e74726163742064657060448201527f6f7369746f7273206e6f7420616c6c6f776564000000000000000000000000006064820152fd5b600091602460209260405194859384927fc23697a800000000000000000000000000000000000000000000000000000000845260048401525af1908115612e9257600091612e63575b50612e61578080612da2565b565b612e85915060203d602011612e8b575b612e7d8183612615565b810190612d68565b38612e55565b503d612e73565b6040513d6000823e3d90fd5b9190916000838201938412911290801582169115161761270257565b80600052600060205260406000203360005260205260ff6040600020541615612ee05750565b604490604051907fe2517d3f0000000000000000000000000000000000000000000000000000000082523360048301526024820152fd5b6001600160a01b031660008181527fd4b1ef424fcb83dce82b8e6790fbd9bbcd76978bd34427cec18daa7ab216754360205260408120549091907f7b765e0e932d348852a6f810bfa1ab891e259123f02db8cdcde614c5702233579060ff16612fc457808352826020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b505090565b90600091808352826020526001600160a01b036040842092169182845260205260ff60408420541615600014612fc457808352826020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b6001600160a01b031660008181527fd4b1ef424fcb83dce82b8e6790fbd9bbcd76978bd34427cec18daa7ab216754360205260408120549091907f7b765e0e932d348852a6f810bfa1ab891e259123f02db8cdcde614c5702233579060ff1615612fc45780835282602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4600190565b90600091808352826020526001600160a01b036040842092169182845260205260ff604084205416600014612fc45780835282602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4600190565b60405190613171826125dd565b60006060838281528260208201528260408201520152565b9091613193613164565b61319b613164565b60805260009182916001600160a01b03600754951695861515806135dc575b60409687516131c8816125dd565b60008152602060a052600060a0518201524289820152436060820152816135b2575b888101805190600090824211613578575b9062093a8080808504026000945b60ff8610613438575b50505050505082826007556133ce575b6c01431e0fae6d7217caa0000000821015612697576132669160021b600f019060606003918051845560208101516001850155604081015160028501550151910155565b613274575b50505050505050565b60a051019342855111613378575b505060a0510191825190428211613336575b50505050816000526c050c783eb9b5c85f2a8000001260a051526132ed816000206001815401809155826080510192428452606060805101944386526000526c050c783eb9b5c85f2a8000001160a05152600020612680565b9290926133205760039160805151845560a05160805101516001850155516002840155519101553880808080808061326b565b634e487b7160e01b600052600060045260246000fd5b5110613344575b8080613294565b60a051608051015161335591612757565b90516000526c050c783eb9b5c85f2a8000001360a051528160002055388061333d565b6133879160a051015190612e9e565b60a0518201518451146133b8575b83516000526c050c783eb9b5c85f2a8000001360a0515284600020553880613282565b60a05160805101516133c991612757565b613395565b60006133e760a051608051015160a05188015190612757565b6133f760a0518401918251612e9e565b815261341261340b60805151895190612757565b8451612e9e565b908184528281511261342f575b5012156132225760008152613222565b8290523861341f565b828201809211612702576000918f814281111561355457505050600061347d42935b6134748a5161089e60a0518d01966108988851918a6126f5565b8a528351612e9e565b8083528189511261354c575b12613542575b50809381815260608701956134bb8751670de0b6b3a76400006108ea6134b587806126f5565b89612999565b8752600190818a01809a1161270257894285036134e8575050505050505050439052388080808080613212565b9091929394959697506c01431e0fae6d7217caa000000081101561269757886135369160021b600f019060606003918051845560208101516001850155604081015160028501550151910155565b01929190939294613209565b600090523861348f565b818952613489565b908461347d9260009496526c050c783eb9b5c85f2a8000001360a05152205461345a565b90506135886060840151436126f5565b670de0b6b3a76400009080820291820403612702576135ac90610a2b8351426126f5565b906131fb565b506c01431e0fae6d7217caa0000000811015612697576135d78160021b600f016126c3565b6131ea565b6020820180514210806136a5575b613682575b604060208601974289511180613678575b613651575b825181526c050c783eb9b5c85f2a8000001360205220549651908161362c575b50506131ba565b51919550908103613642575084935b3880613625565b6000526040600020549361363b565b61366f630784ce008851058060206080510152610898428c516126f5565b60805152613605565b5080875113613600565b61369e630784ce008451058060208701526108984284516126f5565b84526135ef565b50868351136135ea565b600091906000915b608083106136c6575b50505090565b90919281811015613737576136db828261296c565b9060018083018093116127025782811c926c01431e0fae6d7217caa000000084101561269757901b6003191660120154841061371f5750600190935b0191906136b7565b93915060001981019081116127025760019091613717565b926136c0565b906040906040830162093a8091828251048381029080820485149015171561270257936000945b60ff8610613788575b5050505050506000815112613780575190565b600081525190565b8481018091116127025760009080848111156137ed57505082955b602088016137c16137ba825161089889518c6126f5565b8a51612757565b89528488146137e6576137da600193600f0b8251612e9e565b90528685520194613764565b505061376d565b918391979281526c050c783eb9b5c85f2a800000136020522054600f0b906137a3565b6001600160a01b031690600080826020829451910182865af13d156138e3573d67ffffffffffffffff81116138cf5760405161386d93929161385c601f8201601f191660200183612615565b8152809260203d92013e5b836138f0565b80519081151591826138b4575b50506138835750565b602490604051907f5274afe70000000000000000000000000000000000000000000000000000000082526004820152fd5b6138c79250602080918301019101612d68565b15388061387a565b602483634e487b7160e01b81526041600452fd5b61386d9150606090613867565b9061392f575080511561390557805190602001fd5b60046040517f1425ea42000000000000000000000000000000000000000000000000000000008152fd5b8151158061397a575b613940575090565b6024906001600160a01b03604051917f9996b315000000000000000000000000000000000000000000000000000000008352166004820152fd5b50803b1561393856fea26469706673582212204beeaa019b4cb0afe480d286d777eda4c5c93ea421c6064fa8fedfce0d5aa55764736f6c63430008180033",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 26,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)21_storage)"
      },
      {
        "astId": 2006,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3182,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 3184,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 3186,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "version",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 3188,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "decimals",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 3190,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "supply",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 3192,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "epoch",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 3194,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "futureSmartWalletChecker",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 3196,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "smartWalletChecker",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 3198,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "admin",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 3200,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "futureAdmin",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 3202,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "token",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 3204,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "controller",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 3206,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "gaugeController",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 3208,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "transfersEnabled",
        "offset": 20,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 3213,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "pointHistory",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_struct(Point)3175_storage)100000000000000000000000000000_storage"
      },
      {
        "astId": 3218,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "locked",
        "offset": 0,
        "slot": "400000000000000000000000000015",
        "type": "t_mapping(t_address,t_struct(LockedBalance)3180_storage)"
      },
      {
        "astId": 3222,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "createLockTs",
        "offset": 0,
        "slot": "400000000000000000000000000016",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3229,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "userPointHistory",
        "offset": 0,
        "slot": "400000000000000000000000000017",
        "type": "t_mapping(t_address,t_array(t_struct(Point)3175_storage)1000000000_storage)"
      },
      {
        "astId": 3233,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "userPointEpoch",
        "offset": 0,
        "slot": "400000000000000000000000000018",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3237,
        "contract": "contracts/VotingEscrow.sol:VotingEscrow",
        "label": "slopeChanges",
        "offset": 0,
        "slot": "400000000000000000000000000019",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Point)3175_storage)100000000000000000000000000000_storage": {
        "base": "t_struct(Point)3175_storage",
        "encoding": "inplace",
        "label": "struct VotingEscrow.Point[100000000000000000000000000000]",
        "numberOfBytes": "12800000000000000000000000000000"
      },
      "t_array(t_struct(Point)3175_storage)1000000000_storage": {
        "base": "t_struct(Point)3175_storage",
        "encoding": "inplace",
        "label": "struct VotingEscrow.Point[1000000000]",
        "numberOfBytes": "128000000000"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_struct(Point)3175_storage)1000000000_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct VotingEscrow.Point[1000000000])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Point)3175_storage)1000000000_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(LockedBalance)3180_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct VotingEscrow.LockedBalance)",
        "numberOfBytes": "32",
        "value": "t_struct(LockedBalance)3180_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)21_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)21_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(LockedBalance)3180_storage": {
        "encoding": "inplace",
        "label": "struct VotingEscrow.LockedBalance",
        "members": [
          {
            "astId": 3177,
            "contract": "contracts/VotingEscrow.sol:VotingEscrow",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 3179,
            "contract": "contracts/VotingEscrow.sol:VotingEscrow",
            "label": "end",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Point)3175_storage": {
        "encoding": "inplace",
        "label": "struct VotingEscrow.Point",
        "members": [
          {
            "astId": 3168,
            "contract": "contracts/VotingEscrow.sol:VotingEscrow",
            "label": "bias",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 3170,
            "contract": "contracts/VotingEscrow.sol:VotingEscrow",
            "label": "slope",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          },
          {
            "astId": 3172,
            "contract": "contracts/VotingEscrow.sol:VotingEscrow",
            "label": "timeStamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3174,
            "contract": "contracts/VotingEscrow.sol:VotingEscrow",
            "label": "blockNumber",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(RoleData)21_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 18,
            "contract": "contracts/VotingEscrow.sol:VotingEscrow",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 20,
            "contract": "contracts/VotingEscrow.sol:VotingEscrow",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}